{"version":3,"file":"WebMap-b8116152.js","sources":["../../src/view/WebMap.vue"],"sourcesContent":["<script>\r\nimport { computed, nextTick, onMounted, reactive } from 'vue'\r\nimport $ from 'jquery'\r\nimport { useStore } from 'vuex'\r\n\r\nimport { Feature, Map, View } from 'ol'\r\nimport XYZ from 'ol/source/XYZ'\r\nimport { Tile, Vector } from 'ol/layer'\r\nimport Select from 'ol/interaction/Select'\r\nimport { click } from 'ol/events/condition'\r\nimport { ScaleLine } from 'ol/control'\r\nimport VectorSource from 'ol/source/Vector'\r\nimport { Point } from 'ol/geom'\r\nimport { Icon, Style } from 'ol/style'\r\n\r\nimport OLCesium from 'olcs/OLCesium'\r\nimport Static from 'ol/source/ImageStatic'\r\n\r\nimport 'ol/ol.css'\r\nimport 'ol-ext/dist/ol-ext.css'\r\nimport Overlay from 'ol/Overlay'\r\nimport currentPositionImg from '@/assets/img/icon/currentPosition.svg'\r\n\r\nimport { isEmpty } from '@/methods.js'\r\n\r\nimport mapLayerList from '@/config/mapLayerList'\r\nimport baseMapList, { getBaseMapAll } from '@/config/baseMapList'\r\nimport * as Cesium from 'cesium'\r\nimport AsideTool from '@/components/AsideTool.vue'\r\nimport MapSourceOption from '@/components/MapSourceOption.vue'\r\nimport SearchBar from '@/components/SearchBar.vue'\r\nimport Condition from '@/components/Condition.vue'\r\nimport OverLayer from '@/components/OverLayer.vue'\r\nimport LayerSelector from '@/components/LayerSelector.vue'\r\nimport MNavbar from '@/components/MNavbar.vue'\r\nimport AreaData from '@/components/AreaData.vue'\r\n\r\nexport default {\r\n    components: { AreaData, MNavbar, LayerSelector, OverLayer, Condition, SearchBar, MapSourceOption, AsideTool },\r\n    props: {},\r\n    setup(props, { emit }){\r\n        const getMapLayers = mapLayerList\r\n        const baseMaps = baseMapList\r\n        const store = useStore()\r\n        const state = reactive({\r\n            // defaultCenter: [120.971859, 24.801583],\r\n            // defaultCenterZoom: 14,\r\n            defaultCenter: [121.326776, 24.655499],\r\n            defaultCenterZoom: 14,\r\n            targetNum: 1,\r\n            conditionWrap: false,\r\n            layerSelect: false,\r\n            currentLayers: [],\r\n            layers: [],\r\n            mapLayers: computed(() => {\r\n              return state.layers.map((node, index) => {\r\n                  return {\r\n                    label: node.group_title,\r\n                    value: node.value,\r\n                    layers: node.group_layers,\r\n                    groupClass: node.group_class,\r\n                  }\r\n                })\r\n            }),\r\n            selectLock: false,\r\n            mapCount: 1,\r\n            map1: null,\r\n            map2: null,\r\n            map1LayerStatus: [],\r\n            map2LayerStatus: [],\r\n            temp: {\r\n                map1BaseStatus: 0,\r\n                map2BaseStatus: 0,\r\n            },\r\n            deleteLightbox: false,\r\n            // 目前地圖狀態為2D or 3D\r\n            dimensionMap: {\r\n                map1: '2D',\r\n                map2: '2D',\r\n            },\r\n            toSearchDimensionStatus: computed(() => {\r\n                const target = state.targetNum === 1 ? 'map1' : 'map2'\r\n                return state.dimensionMap[target] === '2D'\r\n            }),\r\n            selectValueTemp: 0,\r\n            popup: {\r\n                nodeRef: null,\r\n                overlay: null,\r\n                popupId: 0,\r\n                coordinate: [],\r\n                popupData: '',\r\n            },\r\n            comSize: {\r\n                wrapHeight: '',\r\n                wrapWidth: '',\r\n            },\r\n            tribeQuery: {},\r\n        })\r\n\r\n        let ol3d = null\r\n        Cesium.Ion.defaultAccessToken = import.meta.env.VITE_Ol3D_TOKEN\r\n\r\n        const defaultView = new View({\r\n            projection: 'EPSG:4326',\r\n            center: state.defaultCenter,\r\n            zoom: state.defaultCenterZoom,\r\n            minZoom: 4,\r\n            maxZoom: 16,\r\n        })\r\n\r\n        // 初始化地圖\r\n        function initMap(){\r\n            state.map1 = new Map({\r\n                target: 'map1',\r\n                layers: [\r\n                    baseMapList.getBaseMapData(0),\r\n                ],\r\n                view: defaultView,\r\n                controls: [],\r\n            })\r\n\r\n            state.map1.addControl(new ScaleLine({\r\n                units: 'metric', // 比例尺單位\r\n            }))\r\n        }\r\n\r\n        function addPoint(targetLng, targetLat){\r\n            const marker = new Vector({\r\n                source: new VectorSource({\r\n                    features: [\r\n                        new Feature({\r\n                            geometry: new Point([targetLng, targetLat]),\r\n                            population: 4000,\r\n                            rainfall: 500,\r\n                        }),\r\n                    ],\r\n                }),\r\n                style: new Style({\r\n                    image: new Icon({\r\n                        anchor: [0.5, 100],\r\n                        anchorXUnits: 'fraction',\r\n                        anchorYUnits: 'pixels',\r\n                        src: currentPositionImg,\r\n                    }),\r\n                }),\r\n            })\r\n\r\n            const target = state.targetNum === 1 ? 'map1' : 'map2'\r\n            state[target].addLayer(marker)\r\n        }\r\n\r\n        function mapControl({\r\n            action,\r\n            value,\r\n        }){\r\n            const mainMap = state.map1?.getTarget() == null ? 'map2' : 'map1'\r\n            const View = state[mainMap].getView()\r\n            switch (action){\r\n                case 'In':\r\n                    View.animate({\r\n                        zoom: View.getZoom() + 1,\r\n                    })\r\n                    break\r\n                case 'Out':\r\n                    View.animate({\r\n                        zoom: View.getZoom() - 1,\r\n                    })\r\n                    break\r\n                case 'toNorth':\r\n                    View.animate({\r\n                        rotation: 0,\r\n                    })\r\n                    break\r\n                case 'moveTo':\r\n                    if (value){\r\n                        const {\r\n                            xAxis,\r\n                            yAxis,\r\n                        } = value\r\n                        View.animate({\r\n                            center: [xAxis, yAxis],\r\n                            zoom: 17,\r\n                            duration: 100,\r\n                        })\r\n                    } else {\r\n                        navigator.geolocation.getCurrentPosition(function(pos){\r\n                            View.animate({\r\n                                center: [pos.coords.longitude, pos.coords.latitude],\r\n                                zoom: 17,\r\n                                duration: 100,\r\n                            })\r\n                            addPoint(pos.coords.longitude, pos.coords.latitude)\r\n                        })\r\n                    }\r\n                    break\r\n                case 'fullScreen':\r\n                    const target = document.getElementById(`map${state.targetNum}`)\r\n                    if (target.requestFullscreen){\r\n                        target.requestFullscreen()\r\n                    } else if (target.msRequestFullscreen){\r\n                        target.msRequestFullscreen()\r\n                    } else if (target.mozRequestFullScreen){\r\n                        target.mozRequestFullScreen()\r\n                    } else if (target.webkitRequestFullscreen){\r\n                        target.webkitRequestFullscreen()\r\n                    }\r\n                    break\r\n            }\r\n        }\r\n\r\n        function layerControl({ action, value }) {\r\n            const target = state.targetNum == 1 ? state.map1 : state.map2\r\n            const targetLayers = target?.getLayers()\r\n            switch (action) {\r\n                case 'layerMode':\r\n                    if (value.checked){\r\n                        let nestedSubNodeIndex = value.nestedSubNodeIndex\r\n                        // 點選父層後，刪除同樣子層的圖層，帶入當前選擇的圖層\r\n                        let isSingleTiles = state.layers[value.nodeIndex].group_layers[value.subNodeIndex].single_tiles\r\n                        let haveInfoBox = !isEmpty(state.layers[value.nodeIndex].group_layers[value.subNodeIndex].info_box)\r\n                        // 目標區塊目前是否在3D模式下\r\n                        if (state[`${state.targetNum == 1 ? 'map1' : 'map2'}LayerStatus`].includes('3D')) {\r\n                            if (!(isSingleTiles) || haveInfoBox) {\r\n                                const scene = ol3d.getCesiumScene()\r\n                                const imageryLayersCount = scene.imageryLayers.length;\r\n                                for (let i = 0; i < imageryLayersCount; i++) {\r\n                                    let layer = scene.imageryLayers.get(i)\r\n                                    let id = layer?.imageryProvider._resource?.queryParameters?.id\r\n                                    const imageNodeIndex = getMapLayers.getLayerIndex(id)?.nodeIndex\r\n                                    const imageSubNodeIndex = getMapLayers.getLayerIndex(id)?.subNodeIndex\r\n                                    if((value.nodeIndex == imageNodeIndex) && (value.subNodeIndex == imageSubNodeIndex)) {\r\n                                        scene.imageryLayers.remove(layer)\r\n                                    }\r\n                                }\r\n                                nestedSubNodeIndex = state.selectValueTemp\r\n                                value.id = getMapLayers.resetLayerId(value.id, 'nestedSubNode', state.selectValueTemp)\r\n                            }\r\n                            const request = getMapLayers.get3DLayer(state.layers[value.nodeIndex].group_layers[value.subNodeIndex], nestedSubNodeIndex, value.id)\r\n                            ol3d.getCesiumScene().imageryLayers.addImageryProvider(\r\n                                new Cesium.WebMapServiceImageryProvider(request)\r\n                            )\r\n                        } else {\r\n                            if (!(isSingleTiles) || haveInfoBox) {\r\n                                let layersAry = targetLayers.getArray()\r\n                                layersAry.forEach(element => {\r\n                                    if (!(element.get('id'))) { return }\r\n                                    if (element.get('id').includes(`node${value.nodeIndex}_subNode${value.subNodeIndex}_nestedSubNode`)) {\r\n                                        target.removeLayer(element)\r\n                                    }\r\n                                })\r\n                                nestedSubNodeIndex = state.selectValueTemp\r\n                                value.id = getMapLayers.resetLayerId(value.id, 'nestedSubNode', state.selectValueTemp)\r\n                            }\r\n                            let targetLayer = getMapLayers.getLayer(state.layers[value.nodeIndex].group_layers[value.subNodeIndex], nestedSubNodeIndex, value.id)\r\n                            target.addLayer(targetLayer)\r\n                            // FIXME: addSpecialLayerEvent(targetLayer.get('label'), targetLayer, value)\r\n                            if (['雷達回波預測', '累積雨量預測', '氣溫預測'].includes(targetLayer.get('label'))) {\r\n                                const { currentLayerKey, tilesImageUrls, imageExtent } = targetLayer.get('ext')\r\n                                const timeKey = value.id.split('_nestedSubNode')[0]\r\n                                if (state.temp?.[`${timeKey}count`] === undefined) {\r\n                                    state.temp[`${timeKey}count`] = currentLayerKey\r\n                                }\r\n                                state.temp[timeKey] = setInterval(function () {\r\n                                    state.temp[`${timeKey}count`] = state.temp[`${timeKey}count`] + 1 > 4 ? 0 : state.temp[`${timeKey}count`] + 1\r\n                                    let newSource = new Static({\r\n                                        url: tilesImageUrls[state.temp[`${timeKey}count`]],\r\n                                        projection: 'EPSG:4326',\r\n                                        imageExtent: imageExtent,\r\n                                        interpolate: true,\r\n                                    })\r\n                                    targetLayer.setSource(newSource)\r\n                                }, 1000)\r\n                            }\r\n                            if (['新竹縣原住民部落範圍', '近年歷史災害82處部落點位', '雨量站', '工程鑽探', '土石流潛勢溪流', '落石分布'].includes(targetLayer.get('label'))) {\r\n                                mapClickEvent(target, targetLayer.label)\r\n                                addSelectElement(value, targetLayer.get('label'))\r\n                            }\r\n                        }\r\n                        onMapLayerStatus('add', target.getTarget(), value.id)\r\n                    } else {\r\n                        // FIXME: 刪除3D狀態下的圖層\r\n                        if (state[`${state.targetNum == 1 ? 'map1' : 'map2'}LayerStatus`].includes('3D')) {\r\n                            const { id, nestedSubNodeIndex, nodeIndex, subNodeIndex } = value\r\n                            let pickedLayer = state.layers[nodeIndex].group_layers[subNodeIndex]\r\n                            const scene = ol3d.getCesiumScene()\r\n                            const imageryLayersCount = scene.imageryLayers.length;\r\n                            for (let i = 0; i < imageryLayersCount; i++) {\r\n                                let layer = scene.imageryLayers.get(i)\r\n                                const id = layer?.imageryProvider._resource?.queryParameters?.id\r\n                                const imageNodeIndex = getMapLayers.getLayerIndex(id)?.nodeIndex\r\n                                const imageSubNodeIndex = getMapLayers.getLayerIndex(id)?.subNodeIndex\r\n                                if(pickedLayer.title === id || ((nodeIndex == imageNodeIndex) && (subNodeIndex == imageSubNodeIndex))) {\r\n                                    scene.imageryLayers.remove(layer)\r\n                                }\r\n                            }\r\n                        } else {\r\n                            let layersAry = targetLayers.getArray()\r\n                            function removeLayersById() {\r\n                                const deleteKey = value.id.split('_nestedSubNode')[0]\r\n                                const toRemoveLayerId = layersAry.filter(element => element?.get('id')?.includes(deleteKey))\r\n                                toRemoveLayerId.forEach((node) => {\r\n                                    target.removeLayer(node);\r\n                                });\r\n                            }\r\n                            removeLayersById()\r\n                            if (state.layers[value.nodeIndex].group_layers[value.subNodeIndex].layer_type === \"WFS\") {\r\n                                addSelectElement(value);\r\n                                state.popup.popupId = 0\r\n                                state.popup.popupData = '';\r\n                                if (state.popup.overlay) {\r\n                                    target.removeOverlay(state.popup.overlay);\r\n                                    state.popup.overlay = null;\r\n                                }\r\n                            }\r\n                            if (['雷達回波預測', '累積雨量預測', '氣溫預測'].includes(state.layers[value.nodeIndex].group_layers[value.subNodeIndex].title)) {\r\n                                const timeKey = value.id.split('_nestedSubNode')[0]\r\n                                clearInterval(state.temp[timeKey]);\r\n                                delete state.temp[`${timeKey}count`]\r\n                            }\r\n                        }\r\n                        onMapLayerStatus('delete', target.getTarget(), value.id)\r\n                    }\r\n                    break\r\n                case 'selectLayerMode':\r\n                    if (state.selectLock){\r\n                        return\r\n                    }\r\n                    if (value.layerName === 'all'){\r\n                        const layersAry = targetLayers.getArray()\r\n                        const layersToRemove = layersAry.filter(node => !(node.get('id') === undefined))\r\n                        layersToRemove.forEach((node) => {\r\n                            layerControl({\r\n                                action: 'layerMode',\r\n                                value: { checked: false, ...getMapLayers.getLayerIndex(node.get('id')) },\r\n                            })\r\n                        })\r\n                    } else {\r\n                        layerControl({\r\n                            action: 'layerMode',\r\n                            value: { checked: false, ...getMapLayers.getLayerIndex(value.id) },\r\n                        })\r\n                    }\r\n                    break\r\n                case 'changeOrder':\r\n                    if (state.selectLock){\r\n                        return\r\n                    }\r\n                    const {\r\n                        nodeIndex,\r\n                        subNodeIndex,\r\n                        nestedSubNodeIndex,\r\n                    } = getMapLayers.getLayerIndex(value.id)\r\n                    const nowTileLayer = getMapLayers.getLayer(state.layers[nodeIndex].group_layers[subNodeIndex], nestedSubNodeIndex, value.id)\r\n                    if (value.movement === 'up'){\r\n                        if (value.key + 1 === targetLayers.getArray().length){\r\n                            return\r\n                        }\r\n                        const obj = {\r\n                            checked: false,\r\n                            nodeIndex,\r\n                            subNodeIndex,\r\n                            nestedSubNodeIndex,\r\n                            id: value.id,\r\n                        }\r\n                        layerControl({\r\n                            action: 'layerMode',\r\n                            value: obj,\r\n                        })\r\n                        targetLayers.insertAt(value.key + 1, nowTileLayer)\r\n                    }\r\n                    if (value.movement === 'down'){\r\n                        if (value.key - 1 === 0){\r\n                            return\r\n                        }\r\n                        const obj = {\r\n                            checked: false,\r\n                            nodeIndex,\r\n                            subNodeIndex,\r\n                            nestedSubNodeIndex,\r\n                            id: value.id,\r\n                        }\r\n                        layerControl({\r\n                            action: 'layerMode',\r\n                            value: obj,\r\n                        })\r\n                        targetLayers.insertAt(value.key - 1, nowTileLayer)\r\n                    }\r\n                    break\r\n                case 'baseMap':\r\n                    state.temp[`map${state.targetNum}BaseStatus`] = value.baseId\r\n                    const newTileLayer = new Tile({\r\n                        preload: Infinity,\r\n                        name: value.name,\r\n                        label: value.label,\r\n                        type: value.mapType,\r\n                        baseId: value.baseId,\r\n                        source: new XYZ({\r\n                            url: value.url,\r\n                        }),\r\n                        crossOrigin: 'anonymous',\r\n                    })\r\n                    const layersAry = target?.getLayers().getArray()\r\n                    targetLayers.insertAt(0, newTileLayer)\r\n\r\n                    layersAry.forEach(element => {\r\n                        if (element.get('type') === 'base' && element.get('baseId') !== value.baseId){\r\n                            target.removeLayer(element)\r\n                        }\r\n                        return true\r\n                    })\r\n                    break;\r\n                case 'setOpacity':\r\n                    onChangeLayerOpacity(value.key, value.value)\r\n                    break\r\n            }\r\n            getCurrentMapData()\r\n        }\r\n\r\n        // FIXME: 加入特殊圖層事件，addSpecialLayerEvent\r\n        function addSpecialLayerEvent(labelName, targetLayer, value) {\r\n            const target = state.targetNum == 1 ? state.map1 : state.map2\r\n            if (['雷達回波預測', '累積雨量預測', '氣溫預測'].includes(labelName)) {\r\n                const { currentLayerKey, tilesImageUrls, imageExtent } = targetLayer.get('ext')\r\n                const timeKey = value.id.split('_nestedSubNode')[0]\r\n                if (state.temp?.[`${timeKey}count`] === undefined) {\r\n                    state.temp[`${timeKey}count`] = currentLayerKey\r\n                }\r\n                state.temp[timeKey] = setInterval(function () {\r\n                    state.temp[`${timeKey}count`] = state.temp[`${timeKey}count`] + 1 > 4 ? 0 : state.temp[`${timeKey}count`] + 1\r\n                    let newSource = new Static({\r\n                        url: tilesImageUrls[state.temp[`${timeKey}count`]],\r\n                        projection: 'EPSG:4326',\r\n                        imageExtent: imageExtent,\r\n                        interpolate: true,\r\n                    })\r\n                    targetLayer.setSource(newSource)\r\n                }, 1000)\r\n            } else if (['新竹縣原住民部落範圍', '近年歷史災害82處部落點位', '雨量站', '工程鑽探', '土石流潛勢溪流', '落石分布'].includes(labelName)) {\r\n                mapClickEvent(target, labelName)\r\n                addSelectElement(value, labelName)\r\n            }\r\n        }\r\n\r\n        function getCurrentMapData() {\r\n            if (state[`${state.targetNum == 1 ? 'map1' : 'map2'}LayerStatus`].includes('3D')) {\r\n                state.currentLayers = []\r\n                const scene = ol3d.getCesiumScene()\r\n                const imageryLayersCount = scene.imageryLayers.length;\r\n                for (let i = 0; i < imageryLayersCount; i++) {\r\n                    let layer = scene.imageryLayers.get(i)\r\n                    let provider = layer.imageryProvider;\r\n                    if (provider instanceof Cesium.WebMapServiceImageryProvider) {\r\n                        state.currentLayers.push({\r\n                            label: provider._resource?.queryParameters.layers_name,\r\n                            id: provider._resource?.queryParameters.id,\r\n                            visible: 1,\r\n                        })\r\n                    }\r\n                }\r\n            } else {\r\n                const target = state.targetNum == 1 ? state.map1 : state.map2\r\n                const layers = target?.getLayers()?.getArray()\r\n                state.currentLayers = layers?.map(layer => {\r\n                    return {\r\n                        label: layer.get('label'),\r\n                        id: layer.get('id'),\r\n                        visible: layer.getVisible(),\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        function onChangeDimensionMap(value){\r\n            const target = state.targetNum === 1 ? state.map1 : state.map2\r\n            const targetLayers = target?.getLayers()\r\n            const ta = state.targetNum === 1 ? 'map1' : 'map2'\r\n            state.dimensionMap[ta] = value\r\n            if (value === '3D'){\r\n                // 先移除82處部落，後面補回\r\n                const layersArray = targetLayers.getArray()\r\n                const layerToRemove = layersArray.find(element => element.get('label').includes('近年歷史災害82處部落點位'))\r\n                if (layerToRemove){\r\n                    state[`map${state.targetNum}`].removeLayer(layerToRemove)\r\n                }\r\n                drawDimensionMap(true)\r\n                state[`${ta}LayerStatus`].push('3D')\r\n            } else {\r\n                drawDimensionMap(false)\r\n                state[`${ta}LayerStatus`] = state[`${ta}LayerStatus`].filter(node => node !== '3D')\r\n                state[`map${state.targetNum}LayerStatus`].forEach(node => {\r\n                    const {\r\n                        nodeIndex,\r\n                        subNodeIndex,\r\n                        nestedSubNodeIndex,\r\n                    } = getMapLayers.getLayerIndex(node)\r\n                    const nowTileLayer = getMapLayers.getLayer(state.layers[nodeIndex].group_layers[subNodeIndex], nestedSubNodeIndex, value.id)\r\n                    if (nowTileLayer.get('label').includes('近年歷史災害82處部落點位')){\r\n                        layerControl({\r\n                            action: 'layerMode',\r\n                            value: {\r\n                                checked: true,\r\n                                nodeIndex,\r\n                                subNodeIndex,\r\n                                nestedSubNodeIndex,\r\n                                id: node,\r\n                            },\r\n                        })\r\n                    }\r\n                    return node\r\n                })\r\n            }\r\n        }\r\n\r\n        function drawDimensionMap(value){\r\n            const target = state.targetNum === 1 ? state.map1 : state.map2\r\n            if (value){\r\n                ol3d = new OLCesium({\r\n                    map: target,\r\n                    time() {\r\n                        return Cesium.JulianDate.now();\r\n                    },\r\n                    sceneOptions: {\r\n                        mapProjection: new Cesium.WebMercatorProjection(),\r\n                    },\r\n                })\r\n                ol3d.setEnabled(true)\r\n                const scene = ol3d.getCesiumScene()\r\n                scene.terrainProvider = Cesium.createWorldTerrain({})\r\n                ol3d.setEnabled(true)\r\n            } else {\r\n                ol3d.setEnabled(false)\r\n            }\r\n        }\r\n\r\n        function onChangeLayerVisible(key){\r\n            const target = state.targetNum === 1 ? state.map1 : state.map2\r\n            const targetLayers = target?.getLayers()\r\n            if (state.selectLock){\r\n                return\r\n            }\r\n            const visibleStatus = !(targetLayers.getArray()[key].getVisible())\r\n            targetLayers.getArray()[key].setVisible(visibleStatus)\r\n            nextTick(() => {\r\n                getCurrentMapData()\r\n            })\r\n        }\r\n\r\n        function onChangeLayerOpacity(key, value){\r\n            const target = state.targetNum === 1 ? state.map1 : state.map2\r\n            const targetLayers = target?.getLayers()\r\n            targetLayers.getArray()[key].setOpacity(Number(value))\r\n        }\r\n\r\n        function changeMapCount(qty){\r\n            if (state.mapCount === qty){\r\n                return\r\n            }\r\n            const otherMap = state.targetNum !== 1 ? 'map1' : 'map2'\r\n            state.mapCount = qty\r\n            const otherLayers = state[`${otherMap}LayerStatus`].filter(node => node !== '3D')\r\n            const otherLayersData = otherLayers.map(item => mapLayerList.getLayerIndex(item))\r\n            if (qty === 2){\r\n                state[otherMap] = new Map({\r\n                    target: otherMap,\r\n                    layers: [\r\n                        baseMapList.getBaseMapData(0),\r\n                        // TODO: check\r\n                        ...otherLayersData.map(node => getMapLayers.getLayer(state.layers[node.nodeIndex].group_layers[node.subNodeIndex], node.nestedSubNodeIndex, node.id)),\r\n                    ],\r\n                    view: defaultView,\r\n                    controls: [],\r\n                })\r\n                if (state[`${otherMap}LayerStatus`]?.indexOf('3D') !== -1){\r\n                    ol3d = new OLCesium({\r\n                        map: state[otherMap],\r\n                        time() {\r\n                            return Cesium.JulianDate.now();\r\n                        },\r\n                    })\r\n                    ol3d.setEnabled(true)\r\n                    const scene = ol3d.getCesiumScene({})\r\n                    scene.terrainProvider = Cesium.createWorldTerrain({})\r\n                }\r\n            }\r\n            if (qty === 1){\r\n                state[otherMap] = null\r\n                const element = document.getElementById(otherMap)\r\n                while (element.firstChild){\r\n                    element.removeChild(element.firstChild)\r\n                }\r\n            }\r\n        }\r\n\r\n        function changeTarget(value){\r\n            state.targetNum = value\r\n            const delToMap = state.targetNum !== 1 ? 'map1' : 'map2'\r\n            if (state.mapCount === 1){\r\n                // 目標地圖為空\r\n                if (!state[`map${value}`]){\r\n                    let otherLayers = state[`map${value}LayerStatus`].filter(node => node !== '3D')\r\n                    // TODO: 優化，把node0_subNode4_nestedSubNodeundefined移到最後面\r\n                    if (otherLayers.includes('node0_subNode4_nestedSubNodeundefined')){\r\n                        const a = otherLayers.filter(node => node !== 'node0_subNode4_nestedSubNodeundefined')\r\n                        otherLayers = [...a, 'node0_subNode4_nestedSubNodeundefined']\r\n                    }\r\n\r\n                    const otherLayersData = otherLayers.map(item => mapLayerList.getLayerIndex(item))\r\n                    state[`map${value}`] = new Map({\r\n                        target: `map${value}`,\r\n                        layers: [\r\n                            baseMapList.getBaseMapData(state.temp[`map${state.targetNum}BaseStatus`]),\r\n                            ...otherLayersData.map(node => {\r\n                                return getMapLayers.getLayer(state.layers[node.nodeIndex].group_layers[node.subNodeIndex], node.nestedSubNodeIndex, node.id)\r\n                            }),\r\n                        ],\r\n                        view: defaultView,\r\n                        controls: [],\r\n                    })\r\n\r\n                    mapClickEvent(state[`map${value}`])\r\n                    if (state[`map${value}LayerStatus`]?.indexOf('3D') !== -1){\r\n                        ol3d = new OLCesium({\r\n                            map: state[`map${value}`],\r\n                            time() {\r\n                                return Cesium.JulianDate.now();\r\n                            },\r\n                        })\r\n                        ol3d.setEnabled(true)\r\n                    }\r\n                }\r\n                // 非目標地圖的刪除\r\n                if (state[delToMap]){\r\n                    state[delToMap] = null\r\n                    const element = document.getElementById(delToMap)\r\n                    while (element.firstChild){\r\n                        element.removeChild(element.firstChild)\r\n                    }\r\n                }\r\n            }\r\n            nextTick(() => {\r\n                getCurrentMapData()\r\n            })\r\n        }\r\n\r\n        function conditionWrap(){\r\n            state.conditionWrap = !state.conditionWrap\r\n        }\r\n\r\n        function onMapLayerStatus(action, target, id){\r\n            if (action === 'add'){\r\n                state[`${target}LayerStatus`].push(id)\r\n            } else if (action === 'delete'){\r\n                const a = state[`${target}LayerStatus`].findIndex(node => node === id)\r\n                state[`${target}LayerStatus`].splice(a, 1)\r\n            } else {\r\n                console.log('error')\r\n            }\r\n        }\r\n\r\n        function mapClickEvent(target){\r\n            const selector = new Select({\r\n                layers: target?.getLayers()?.getArray(),\r\n                condition: click,\r\n            })\r\n            target.addInteraction(selector)\r\n            selector.on('select', (event) => {\r\n                const selectedFeatures = event.selected[0]\r\n                if (selectedFeatures){\r\n                    state.popup.overlay = new Overlay({\r\n                        element: state.popup.nodeRef,\r\n                        autoPan: true,\r\n                        autoPanAnimation: {\r\n                            duration: 250,\r\n                        },\r\n                    })\r\n                    state.popup.overlay.setPosition(event.mapBrowserEvent.coordinate)\r\n                    target.addOverlay(state.popup.overlay)\r\n                    // TODO: 截圖結構修改\r\n                    // TODO: 優化結構，獲取state.popupId.overlay方式修正，考慮整包selectedFeatures放進去\r\n                    // selectedFeatures.getKeys().forEach(key => console.log(`${key} -> ${selectedFeatures.get(key)}`))\r\n\r\n                    const selectIds = (selectedFeatures.getId() ?? selectedFeatures.getGeometryName()).split('.')\r\n                    state.popup.popupData = selectIds[0]\r\n                    state.popup.coordinate = event.mapBrowserEvent.coordinate\r\n                    if (selectIds[0] === '新竹縣原住民部落範圍'){\r\n                        state.popup.popupId = selectedFeatures.get('編號')\r\n                        return\r\n                    }\r\n                    if (selectIds[0] === '近年歷史災害82處部落點位'){\r\n                        state.popup.popupId = selectIds[1]\r\n                        return\r\n                    }\r\n                    if (selectIds[0] === '雨量站'){\r\n                        state.popup.popupId = selectedFeatures.get('Name')\r\n                        return\r\n                    }\r\n                    if (selectIds[0] === '工程鑽探'){\r\n                        console.log('選到工程鑽探')\r\n                        state.popup.popupId = selectedFeatures.get('name').split('_')[0]\r\n                        // state.popup.temp = selectedFeatures\r\n                        return\r\n                    }\r\n                    if (selectIds[0] === '土石流潛勢溪流'){\r\n                        state.popup.popupId = selectedFeatures.get('ID')\r\n                        state.popup.temp = selectedFeatures\r\n                        return\r\n                    }\r\n                    if (selectIds[0] === '落石分布'){\r\n                        state.popup.popupId = selectedFeatures.get('DATA_ID')\r\n                        state.popup.temp = selectedFeatures\r\n                    }\r\n                } else {\r\n                    target.removeOverlay(state.popup.overlay)\r\n                    state.popup.overlay = null\r\n                    state.popup = {\r\n                        nodeRef: null,\r\n                        overlay: null,\r\n                        popupId: 0,\r\n                        coordinate: [],\r\n                        popupData: '',\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        function closeAreaData(){\r\n            const target = state.targetNum === 1 ? state.map1 : state.map2\r\n            target.removeOverlay(state.popup.overlay)\r\n            state.popup.overlay = null\r\n        }\r\n\r\n        // TODO: 優化 移除id判斷?\r\n        function addSelectElement(value, layerName){\r\n            const {\r\n                checked,\r\n                id,\r\n            } = value\r\n            if (!checked){\r\n                state.selectLayerOption = {}\r\n                return\r\n            }\r\n            if (layerName === '新竹縣原住民部落範圍'){\r\n                $.ajax({\r\n                    url: 'https://api.edtest.site/tribeQuery',\r\n                    method: 'GET',\r\n                    success: (res) => {\r\n                        state.tribeQuery = res\r\n                    },\r\n                    error: (res) => {\r\n                        console.log(res)\r\n                    },\r\n                })\r\n            }\r\n        }\r\n\r\n        function moveToMap(val){\r\n            const obj = {\r\n                action: 'moveTo',\r\n                value: {\r\n                    xAxis: val.WGS84.lng,\r\n                    yAxis: val.WGS84.lat,\r\n                },\r\n            }\r\n            mapControl(obj)\r\n        }\r\n\r\n        onMounted(async () => {\r\n            const getBaseData = $.ajax({\r\n                url: 'https://api.edtest.site/underLayers',\r\n                method: 'GET',\r\n            }).done(res => {\r\n                return res\r\n            })\r\n\r\n            const getLayerData = $.ajax({\r\n                url: 'https://api.edtest.site/layers',\r\n                method: 'GET',\r\n            }).done(res => {\r\n                return res\r\n            })\r\n\r\n            Promise.all([getBaseData, getLayerData]).then((value) => {\r\n                let result = value[0].data.map((node, nodeIndex) => {\r\n                    return {\r\n                        mapType: 'base',\r\n                        baseId: nodeIndex,\r\n                        onCurrent: false,\r\n                        ...node,\r\n                    }\r\n                })\r\n                baseMapList.setBaseMapData(result)\r\n                state.temp.map1BaseStatus = 0\r\n                state.temp.baseMapList = getBaseMapAll()\r\n\r\n                state.layers = value[1].map((node, index) => {\r\n                    node.group_layers.forEach((sub, subIndex) => {\r\n                        const subNodeIndex = subIndex; let nestedSubNodeIndex\r\n                        sub.id = `node${index}_subNode${subNodeIndex}_nestedSubNode${nestedSubNodeIndex}`\r\n\r\n                        if (!(sub.single_tiles)){\r\n                            sub.tiles_list.forEach((nestedSub, nestedSubIndex) => {\r\n                                nestedSubNodeIndex = nestedSubIndex\r\n                                nestedSub.id = `node${index}_subNode${subNodeIndex}_nestedSubNode${nestedSubNodeIndex}`\r\n                            })\r\n                        }\r\n                    })\r\n                    return {\r\n                        ...node,\r\n                        value: index,\r\n                    }\r\n                })\r\n\r\n                nextTick(() => {\r\n                    initMap()\r\n                    getCurrentMapData()\r\n                })\r\n            })\r\n            state.comSize.wrapHeight = window.innerHeight\r\n            state.comSize.wrapWidth = window.innerWidth\r\n            store.dispatch('updateWindowWidth', window.innerWidth)\r\n            window.onresize = (e) => {\r\n                state.comSize.wrapHeight = e.target.innerHeight\r\n                state.comSize.wrapWidth = e.target.innerWidth\r\n                store.dispatch('updateWindowWidth', window.innerWidth)\r\n            }\r\n        })\r\n\r\n        function show() {// 创建一个新的 Cesium 图层\r\n            // var billboardCollection = new Cesium.BillboardCollection();\r\n\r\n\r\n            // 创建一个 Cesium 影像图层\r\n            var cesiumImageryProvider = new Cesium.WebMapServiceImageryProvider({\r\n                url: 'https://dwgis1.ncdr.nat.gov.tw/server/services/MAP0627/Map2022FloodingPoint1721/MapServer/WMSServer',\r\n                layers: '0',\r\n                parameters: {\r\n                    'FORMAT': 'image/png',\r\n                    'VERSION': '1.1.1',\r\n                    'TRANSPARENT': true,\r\n                    'STYLES': ''\r\n                }\r\n            });\r\n\r\n            // 将图层添加到 Cesium 场景中\r\n            var imageryLayer = new Cesium.ImageryLayer(cesiumImageryProvider, {\r\n                show: true\r\n            });\r\n            ol3d.imageryLayers.addImageryProvider(imageryLayer);\r\n\r\n        }\r\n\r\n        return {\r\n            state,\r\n            props,\r\n            store,\r\n            mapControl,\r\n            layerControl,\r\n            onChangeLayerVisible,\r\n            onChangeLayerOpacity,\r\n            changeTarget,\r\n            conditionWrap,\r\n            closeAreaData,\r\n            moveToMap,\r\n            changeMapCount,\r\n            onChangeDimensionMap,\r\n            show,\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<template>\r\n    <!-- <div @click=\"show\">show</div> -->\r\n    <div>\r\n        <!-- TODO: 寬度設定是否調整 -->\r\n        <div class=\"w-100 d-flex justify-content-between flex-sm-row flex-wrap flex-sm-nowrap mapWrap\" id=\"mapWrap\">\r\n            <div id=\"map1\" :class=\"{\r\n            'w-100': state.map1?.getTarget() == 'map1',\r\n            'h-100': state.mapCount === 1,\r\n            'h-50': state.mapCount === 2 && (state.comSize.wrapWidth < 600),\r\n            'middleMap': state.map1?.getTarget()\r\n        }\">\r\n      </div>\r\n      <div class=\"middleLine\" v-if=\"state.mapCount === 2\"></div>\r\n      <div id=\"map2\" :class=\"{\r\n            'w-100': state.map2?.getTarget() === 'map2',\r\n            'h-100': state.mapCount === 1,\r\n            'h-50': state.mapCount === 2 && (state.comSize.wrapWidth < 600),\r\n            'middleMap': state.map2?.getTarget()\r\n        }\">\r\n      </div>\r\n    </div>\r\n    <asideTool class=\"asideTool position-absolute top-50 translate-middle-y\" id=\"asideTool\" :onChangeTarget=\"(value) => {\r\n            changeTarget(value)\r\n        }\" @onMapControl=\"({ action, value }) => {\r\n            mapControl({ action, value })\r\n        }\" />\r\n        <div class=\"SearchBar d-block d-sm-block position-fixed w-100 w-sm-auto position-sm-absolute p-3 p-sm-0\">\r\n            <div class=\"d-flex align-items-center justify-content-between justify-content-sm-start\">\r\n                <img src=\"@/assets/logo.svg\" alt=\"\" class=\"logo col-5 col-sm-auto me-0 me-sm-5\">\r\n                <mapSourceOption class=\"mapSourceOption col-5 col-sm-auto d-block d-sm-block\"\r\n                :baseMapList=\"state.temp.baseMapList\" :onChangeBaseMaps=\"({ action, value }) => {\r\n                    layerControl({ action, value })\r\n                }\" />\r\n            </div>\r\n            <SearchBar class=\"mt-4 d-none d-sm-block\" v-bind=\"{\r\n            dimensionMapStatus: state.toSearchDimensionStatus,\r\n            currentLayers: state.currentLayers,\r\n            mapCount: state.mapCount,\r\n            onChangeBaseMaps: ({ action, value }) => {\r\n                layerControl({ action, value })\r\n            },\r\n            onChangeMapCount: (qty) => {\r\n                changeMapCount(qty)\r\n            },\r\n            }\"\r\n            :onChangeTarget=\"(value) => {\r\n                changeTarget(value)\r\n            }\"\r\n            @onLayerControl=\"({ action, value }) => {\r\n                layerControl({ action, value })\r\n            }\"\r\n            @conditionWrap=\"(value) => {\r\n                conditionWrap(value)\r\n            }\"\r\n            :onChangeDimensionMap=\"(value)=>{\r\n                onChangeDimensionMap(value)\r\n            }\" />\r\n        </div>\r\n\r\n    <div class=\"conditionCom d-none d-sm-block position-absolute\">\r\n      <div class=\"mb-4\">\r\n        <button class=\"border-0 w-100 rounded-4 bg-steel text-white text-center p-2 fw-bold fs-5\"\r\n                v-if=\"!state.conditionWrap\" @click=\"state.conditionWrap = true\">\r\n          圖層選項\r\n        </button>\r\n        <div class=\"mb-4\" v-if=\"state.conditionWrap\">\r\n          <Condition v-bind=\"{\r\n            tribeQuery: state.tribeQuery,\r\n            mapLayers: state.mapLayers,\r\n            currentLayers: state.currentLayers,\r\n            onClose: () => {\r\n                state.conditionWrap = false\r\n            },\r\n            showSelectLayerValue: (val) => {\r\n                state.selectValueTemp = val\r\n            },\r\n            moveToMap: (val) => {\r\n                moveToMap(val)\r\n            }\r\n        }\" @onLayerControl=\"({ action, value }) => { layerControl({ action, value }) }\"/>\r\n        </div>\r\n        <OverLayer :text=\"'可選擇要加入的圖層'\" :styles=\"'right: 105%;top: 0;text-align: right;'\"/>\r\n      </div>\r\n\r\n      <div>\r\n        <button class=\"border-0 w-100 rounded-4 bg-steel text-white text-center p-2 fw-bold fs-5\"\r\n                v-if=\"!state.layerSelect\" @click=\"state.layerSelect = true\">\r\n          已選擇的圖層\r\n        </button>\r\n        <div v-if=\"state.layerSelect\">\r\n          <!-- TODO: onChangeLayerOpacity帶入而不是走onLayerControl -->\r\n          <LayerSelector\r\n              v-bind=\"{\r\n                        selectLock: state.selectLock,\r\n                        currentLayers: state.currentLayers,\r\n                        onClose: () => {\r\n                            state.layerSelect = false\r\n                        },\r\n                        onLockLayer: () => {\r\n                            state.selectLock = !state.selectLock\r\n                        },\r\n                        onDeleteLayer: ({ action, value }) => {\r\n                            if (value.layerName === 'all') {\r\n                                state.deleteLightbox = true\r\n                            } else {\r\n                                layerControl({ action, value })\r\n                            }\r\n                        },\r\n                        onLayerControl: ({ action, value }) => {\r\n                            layerControl({ action, value })\r\n                        },\r\n                        onChangeLayerVisible: (key) => {\r\n                            onChangeLayerVisible(key)\r\n                        },\r\n                        onChangeLayerOpacity: (key, value) => {\r\n                            onChangeLayerOpacity(key, value)\r\n                        }\r\n                    }\"/>\r\n        </div>\r\n        <OverLayer :text=\"'顯示已經選擇的圖層'\" :styles=\"'right: 105%;top: 0;text-align: right;'\"/>\r\n      </div>\r\n    </div>\r\n\r\n        <div class=\"m-Navbar d-flex d-sm-none position-relative w-100\">\r\n            <div class=\"position-absolute bottom-100 w-100\" style=\"max-height: 70vh;overflow-y: scroll;\">\r\n                <Condition class=\"w-100\" v-if=\"state.conditionWrap\"\r\n                v-bind=\"{\r\n                    mapLayers: state.mapLayers,\r\n                    currentLayers: state.currentLayers,\r\n                    onClose: () => {\r\n                        state.conditionWrap = false\r\n                    },\r\n                    showSelectLayerValue: (val) => {\r\n                        state.selectValueTemp = val\r\n                    }\r\n                }\"\r\n                @onLayerControl=\"({ action, value }) => { layerControl({ action, value }) }\" />\r\n            </div>\r\n            <div v-if=\"state.layerSelect\">\r\n                <LayerSelector class=\"position-absolute bottom-100 w-100\" v-bind=\"{\r\n                    selectLock: state.selectLock,\r\n                    currentLayers: state.currentLayers,\r\n                    onClose: () => {\r\n                        state.layerSelect = false\r\n                    },\r\n                    onLockLayer: () => {\r\n                        state.selectLock = !state.selectLock\r\n                    },\r\n                    onDeleteLayer: ({ action, value }) => {\r\n                        if (value.layerName == 'all') {\r\n                            state.deleteLightbox = true\r\n                        } else {\r\n                            layerControl({ action, value })\r\n                        }\r\n                    },\r\n                    onChangLayerVisible: (action) => {\r\n                        layerControl(action)\r\n                    },\r\n                    onChangeOrderLayer: ({ action, value }) => {\r\n                        layerControl({ action, value })\r\n                    },\r\n                    onLayerControl: ({ action, value }) => {\r\n                        layerControl({ action, value })\r\n                    },\r\n                }\" />\r\n            </div>\r\n            <mNavbar\r\n            v-bind=\"{\r\n                dimensionMapStatus: state.toSearchDimensionStatus,\r\n                currentLayers: state.currentLayers,\r\n                mapCount: state.mapCount,\r\n                openConditionWrap: () => {\r\n                    state.conditionWrap = !state.conditionWrap\r\n                    state.layerSelect = false\r\n                },\r\n                openLayerSelect: () => {\r\n                    state.layerSelect = !state.layerSelect\r\n                    state.conditionWrap = false\r\n                },\r\n                onLayerControl: ({ action, value }) => {\r\n                    layerControl({ action, value })\r\n                },\r\n                onChangeMapCount: (qty) => {\r\n                    changeMapCount(qty)\r\n                },\r\n                onChangeTarget: (value) => {\r\n                    changeTarget(value)\r\n                }\r\n            }\"\r\n            :onChangeDimensionMap=\"(value)=>{\r\n                onChangeDimensionMap(value)\r\n            }\"\r\n            @conditionWrap=\"(value) => { conditionWrap(value) }\"\r\n            />\r\n        </div>\r\n\r\n    <div class=\"lightWrap w-100 h-100 d-flex justify-content-center align-items-center\" v-if=\"state.deleteLightbox\">\r\n      <div class=\"p-4 rounded bg-white\" style=\"width: 250px;\">\r\n        <p class=\"text-center fw-bold\">是否要取消全部圖層</p>\r\n        <div class=\" d-flex justify-content-around\">\r\n          <button class=\"rounded px-3 py-1 bg-steel text-white border-0\" @click=\"() => {\r\n            layerControl({\r\n                action: 'selectLayerMode',\r\n                value: {\r\n                    layerName: 'all'\r\n                }\r\n            })\r\n            state.deleteLightbox = false\r\n        }\">確定\r\n          </button>\r\n          <button class=\"rounded px-3 py-1 bg-secondary bg-gradient text-white border-0\" @click=\"() => {\r\n            state.deleteLightbox = false\r\n        }\">取消\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div id=\"popup\" class=\"popup position-absolute bottom-0\" :ref=\"(e) => {\r\n            state.popup.nodeRef = e\r\n        }\">\r\n      <areaData class=\"areaData\" v-if=\"state.popup.popupId !== 0\" :closeAreaData=\"() => {\r\n            closeAreaData()\r\n        }\" :popup=\"state.popup\" :maxHeight=\"500\"/>\r\n    </div>\r\n\r\n    <div class=\"stepOverLayer position-absolute top-0 start-0 w-100 h-100 bg-black opacity-50\" id=\"firstEnter\"\r\n         v-if=\"store.state.isInit\" @click=\"() => {\r\n            store.dispatch('updateLayerStatus', false)\r\n        }\"></div>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"sass\">\r\n@import '@/assets/styles/all.module.scss'\r\n.mapWrap\r\n  height: 100vh\r\n\r\n.asideTool\r\n  z-index: 220\r\n  left: 20px\r\n\r\n.SearchBar\r\n  top: 20px\r\n  left: 20px\r\n  z-index: 220\r\n\r\n.conditionCom\r\n  width: 480px\r\n  right: 1%\r\n  bottom: 5%\r\n\r\n.middleLine\r\n  width: 5px\r\n  background: $blue-steel\r\n\r\n.popup\r\n  z-index: 9999\r\n\r\n.areaData\r\n  width: 450px\r\n  max-height: 550px\r\n  background: #fff\r\n  box-sizing: border-box\r\n  border-radius: 10px\r\n  border: 1px solid #088\r\n\r\n.middleMap\r\n  position: relative\r\n\r\n  &::after\r\n    content: ''\r\n    position: absolute\r\n    display: block\r\n    border: 2px solid #000\r\n    width: 40px\r\n    height: 40px\r\n    top: calc((100% - 40px) / 2)\r\n    left: calc((100% - 40px) / 2)\r\n\r\n@media (max-width: 600px)\r\n  .mapWrap\r\n    height: 92%\r\n  .m-Navbar\r\n    z-index: 222\r\n    height: 8%\r\n  .SearchBar\r\n    top: 0\r\n    left: 0\r\n\r\n    .logo\r\n      width: 180px\r\n  .asideTool\r\n    left: 5px\r\n  .middleLine\r\n    height: 1px\r\n    width: 100%\r\n  .areaData\r\n    width: 85vw\r\n</style>\r\n"],"names":["_sfc_main","props","emit","store","useStore","state","reactive","node","index","computed","target","initMap","Map","defaultView","ScaleLine","addPoint","targetLng","targetLat","Point","Style","Icon","mapControl","action","View","mainMap","value","xAxis","yAxis","layerControl","targetLayers","nestedSubNodeIndex","isSingleTiles","haveInfoBox","scene","ol3d","i","imageryLayersCount","layer","imageSubNodeIndex","_d","getMapLayers","id","imageNodeIndex","request","element","targetLayer","currentLayerKey","tilesImageUrls","imageExtent","timeKey","newSource","mapClickEvent","pickedLayer","nodeIndex","subNodeIndex","_i","layersAry","_a","deleteKey","removeLayersById","obj","XYZ","newTileLayer","onChangeLayerOpacity","getCurrentMapData","provider","_b","layers","_c","onChangeDimensionMap","ta","layerToRemove","drawDimensionMap","OLCesium","onChangeLayerVisible","key","visibleStatus","qty","otherLayersData","otherMap","item","mapLayerList","otherLayers","baseMapList","delToMap","onMapLayerStatus","a","click","selector","event","selectedFeatures","Overlay","selectIds","addSelectElement","layerName","checked","$","res","val","onMounted","result","getBaseMapAll","sub","subIndex","nestedSubIndex","nestedSub","e","show","cesiumImageryProvider","moveToMap","changeMapCount","_hoisted_3","_hoisted_4","_imports_0","_hoisted_6","_hoisted_7","_hoisted_10","_hoisted_15","_createElementVNode","_hoisted_16","_hoisted_1","$setup","_openBlock","_createElementBlock","_hoisted_2","_createVNode","_component_SearchBar","_mergeProps","_cache","_hoisted_8","_component_Condition","_hoisted_11","_createBlock","_component_LayerSelector","_component_mNavbar","_hoisted_13","_hoisted_14"],"mappings":"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"}