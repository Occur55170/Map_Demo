{"version":3,"file":"Image-8144c9a7.js","sources":["../../node_modules/ol/string.js","../../node_modules/ol/reproj/Image.js","../../node_modules/ol/source/Image.js","../../node_modules/ol/uri.js","../../node_modules/ol/source/wms.js","../../node_modules/ol/source/ImageWMS.js","../../node_modules/ol/layer/BaseImage.js","../../node_modules/ol/renderer/canvas/ImageLayer.js","../../node_modules/ol/layer/Image.js"],"sourcesContent":["/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\n * @return {string} Formatted string\n */\nexport function padNumber(number, width, precision) {\n  const numberString =\n    precision !== undefined ? number.toFixed(precision) : '' + number;\n  let decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width\n    ? numberString\n    : new Array(1 + width - decimal).join('0') + numberString;\n}\n\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @return {number} Value\n */\nexport function compareVersions(v1, v2) {\n  const s1 = ('' + v1).split('.');\n  const s2 = ('' + v2).split('.');\n\n  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {\n    const n1 = parseInt(s1[i] || '0', 10);\n    const n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n","/**\n * @module ol/reproj/Image\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport EventType from '../events/EventType.js';\nimport ImageBase from '../ImageBase.js';\nimport ImageState from '../ImageState.js';\nimport Triangulation from './Triangulation.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {getCenter, getHeight, getIntersection, getWidth} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../ImageBase.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageBase {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    interpolate\n  ) {\n    const maxSourceExtent = sourceProj.getExtent();\n    const maxTargetExtent = targetProj.getExtent();\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = getImageFunction(\n      sourceExtent,\n      sourceResolution,\n      pixelRatio\n    );\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../ImageBase.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        this.sourceImage_.getResolution(),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.interpolate_\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          function (e) {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n          this\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (this.sourceListenerKey_)\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n","/**\n * @module ol/source/Image\n */\nimport Event from '../events/Event.js';\nimport ImageState from '../ImageState.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from './Source.js';\nimport {abstract} from '../util.js';\nimport {equals} from '../extent.js';\nimport {equivalent} from '../proj.js';\nimport {linearFindNearest} from '../array.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror',\n};\n\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing a single image.\n * @abstract\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n    });\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.resolutions_ =\n      options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {Array<number>|null} resolutions Resolutions.\n   */\n  setResolutions(resolutions) {\n    this.resolutions_ = resolutions;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    const resolutions = this.getResolutions();\n    if (resolutions) {\n      const idx = linearFindNearest(resolutions, resolution, 0);\n      resolution = resolutions[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageBase.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    }\n    if (this.reprojectedImage_) {\n      if (\n        this.reprojectedRevision_ == this.getRevision() &&\n        equivalent(this.reprojectedImage_.getProjection(), projection) &&\n        this.reprojectedImage_.getResolution() == resolution &&\n        equals(this.reprojectedImage_.getExtent(), extent)\n      ) {\n        return this.reprojectedImage_;\n      }\n      this.reprojectedImage_.dispose();\n      this.reprojectedImage_ = null;\n    }\n\n    this.reprojectedImage_ = new ReprojImage(\n      sourceProjection,\n      projection,\n      extent,\n      resolution,\n      pixelRatio,\n      (extent, resolution, pixelRatio) =>\n        this.getImageInternal(extent, resolution, pixelRatio, sourceProjection),\n      this.getInterpolate()\n    );\n    this.reprojectedRevision_ = this.getRevision();\n\n    return this.reprojectedImage_;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageBase.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    let type;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n      default:\n        return;\n    }\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\n\nexport default ImageSource;\n","/**\n * @module ol/uri\n */\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexport function appendParams(uri, params) {\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function (k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri += uri.includes('?') ? '&' : '?';\n  return uri + qs;\n}\n","/**\n * @module ol/source/wms\n */\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_VERSION = '1.3.0';\n\n/**\n * @api\n * @typedef {'carmentaserver' | 'geoserver' | 'mapserver' | 'qgis'} ServerType\n * Set the server type to use implementation-specific parameters beyond the WMS specification.\n *  - `'carmentaserver'`: HiDPI support for [Carmenta Server](https://www.carmenta.com/en/products/carmenta-server)\n *  - `'geoserver'`: HiDPI support for [GeoServer](https://geoserver.org/)\n *  - `'mapserver'`: HiDPI support for [MapServer](https://mapserver.org/)\n *  - `'qgis'`: HiDPI support for [QGIS](https://qgis.org/)\n */\n","/**\n * @module ol/source/ImageWMS\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport {DEFAULT_VERSION} from './wms.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {ceil, floor, round} from '../math.js';\nimport {compareVersions} from '../string.js';\nimport {\n  containsExtent,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {get as getProjection, transform} from '../proj.js';\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nconst DECIMALS = 4;\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} [url] WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageWMS extends ImageSource {\n  /**\n   * @param {Options} [options] ImageWMS options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = Object.assign({}, options.params);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n    this.updateV13_();\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        resolution\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const extent = getForViewAndSize(\n      coordinate,\n      resolution,\n      0,\n      GETFEATUREINFO_IMAGE_SIZE\n    );\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    Object.assign(baseParams, this.params_, params);\n\n    const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\n    const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      extent,\n      GETFEATUREINFO_IMAGE_SIZE,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    Object.assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.url_), baseParams);\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const imageResolution = resolution / pixelRatio;\n\n    const center = getCenter(extent);\n    const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n    const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n    const viewExtent = getForViewAndSize(center, imageResolution, 0, [\n      viewWidth,\n      viewHeight,\n    ]);\n    const requestWidth = ceil(\n      (this.ratio_ * getWidth(extent)) / imageResolution,\n      DECIMALS\n    );\n    const requestHeight = ceil(\n      (this.ratio_ * getHeight(extent)) / imageResolution,\n      DECIMALS\n    );\n    const requestExtent = getForViewAndSize(center, imageResolution, 0, [\n      requestWidth,\n      requestHeight,\n    ]);\n\n    const image = this.image_;\n    if (\n      image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), viewExtent)\n    ) {\n      return image;\n    }\n\n    const params = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n    };\n    Object.assign(params, this.params_);\n\n    this.imageSize_[0] = round(\n      getWidth(requestExtent) / imageResolution,\n      DECIMALS\n    );\n    this.imageSize_[1] = round(\n      getHeight(requestExtent) / imageResolution,\n      DECIMALS\n    );\n\n    const url = this.getRequestUrl_(\n      requestExtent,\n      this.imageSize_,\n      pixelRatio,\n      projection,\n      params\n    );\n\n    this.image_ = new ImageWrapper(\n      requestExtent,\n      resolution,\n      pixelRatio,\n      url,\n      this.crossOrigin_,\n      this.imageLoadFunction_\n    );\n\n    this.renderedRevision_ = this.getRevision();\n\n    this.image_.addEventListener(\n      EventType.CHANGE,\n      this.handleImageChange.bind(this)\n    );\n\n    return this.image_;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case 'geoserver':\n          const dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case 'mapserver':\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case 'carmentaserver':\n        case 'qgis':\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default: // Unknown `serverType` configured\n          assert(false, 8);\n          break;\n      }\n    }\n\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n\n    const axisOrientation = projection.getAxisOrientation();\n    let bbox;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    return appendParams(/** @type {string} */ (this.url_), params);\n  }\n\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n}\n\nexport default ImageWMS;\n","/**\n * @module ol/layer/BaseImage\n */\nimport Layer from './Layer.js';\n\n/**\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {ImageSourceType} [source] Source for this layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<ImageSourceType, RendererType>}\n * @api\n */\nclass BaseImageLayer extends Layer {\n  /**\n   * @param {Options<ImageSourceType>} [options] Layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super(options);\n  }\n}\n\nexport default BaseImageLayer;\n","/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  makeInverse,\n  toString as toTransformString,\n} from '../../transform.js';\nimport {\n  containsCoordinate,\n  containsExtent,\n  getHeight,\n  getIntersection,\n  getWidth,\n  intersects as intersectsExtent,\n  isEmpty,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nclass CanvasImageLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n   */\n  constructor(imageLayer) {\n    super(imageLayer);\n\n    /**\n     * @protected\n     * @type {?import(\"../../ImageBase.js\").default}\n     */\n    this.image_ = null;\n  }\n\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   */\n  getImage() {\n    return !this.image_ ? null : this.image_.getImage();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewResolution = viewState.resolution;\n\n    const imageSource = this.getLayer().getSource();\n\n    const hints = frameState.viewHints;\n\n    let renderedExtent = frameState.extent;\n    if (layerState.extent !== undefined) {\n      renderedExtent = getIntersection(\n        renderedExtent,\n        fromUserExtent(layerState.extent, viewState.projection)\n      );\n    }\n\n    if (\n      !hints[ViewHint.ANIMATING] &&\n      !hints[ViewHint.INTERACTING] &&\n      !isEmpty(renderedExtent)\n    ) {\n      if (imageSource) {\n        const projection = viewState.projection;\n        const image = imageSource.getImage(\n          renderedExtent,\n          viewResolution,\n          pixelRatio,\n          projection\n        );\n        if (image) {\n          if (this.loadImage(image)) {\n            this.image_ = image;\n          } else if (image.getState() === ImageState.EMPTY) {\n            this.image_ = null;\n          }\n        }\n      } else {\n        this.image_ = null;\n      }\n    }\n\n    return !!this.image_;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice()\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const imageExtent = this.image_.getExtent();\n    const img = this.image_.getImage();\n\n    const imageMapWidth = getWidth(imageExtent);\n    const col = Math.floor(\n      img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth)\n    );\n    if (col < 0 || col >= img.width) {\n      return null;\n    }\n\n    const imageMapHeight = getHeight(imageExtent);\n    const row = Math.floor(\n      img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight)\n    );\n    if (row < 0 || row >= img.height) {\n      return null;\n    }\n\n    return this.getImageData(img, col, row);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const image = this.image_;\n    const imageExtent = image.getExtent();\n    const imageResolution = image.getResolution();\n    const imagePixelRatio = image.getPixelRatio();\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewCenter = viewState.center;\n    const viewResolution = viewState.resolution;\n    const scale =\n      (pixelRatio * imageResolution) / (viewResolution * imagePixelRatio);\n\n    const extent = frameState.extent;\n    const resolution = viewState.resolution;\n    const rotation = viewState.rotation;\n    // desired dimensions of the canvas in pixels\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n\n    // set forward and inverse pixel transforms\n    composeTransform(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / pixelRatio,\n      1 / pixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2\n    );\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n\n    const context = this.context;\n    const canvas = context.canvas;\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent) {\n      const layerExtent = fromUserExtent(\n        layerState.extent,\n        viewState.projection\n      );\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    const img = image.getImage();\n\n    const transform = composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      scale,\n      scale,\n      0,\n      (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolution,\n      (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolution\n    );\n\n    this.renderedResolution = (imageResolution * pixelRatio) / imagePixelRatio;\n\n    const dw = img.width * transform[0];\n    const dh = img.height * transform[3];\n\n    if (!this.getLayer().getSource().getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n    if (render && dw >= 0.5 && dh >= 0.5) {\n      const dx = transform[4];\n      const dy = transform[5];\n      const opacity = layerState.opacity;\n      let previousAlpha;\n      if (opacity !== 1) {\n        previousAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n      }\n      context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);\n      if (opacity !== 1) {\n        context.globalAlpha = previousAlpha;\n      }\n    }\n    this.postRender(context, frameState);\n\n    if (clipped) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n\n    return this.container;\n  }\n}\n\nexport default CanvasImageLayerRenderer;\n","/**\n * @module ol/layer/Image\n */\nimport BaseImageLayer from './BaseImage.js';\nimport CanvasImageLayerRenderer from '../renderer/canvas/ImageLayer.js';\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @extends {BaseImageLayer<ImageSourceType, CanvasImageLayerRenderer>}\n * @api\n */\nclass ImageLayer extends BaseImageLayer {\n  /**\n   * @param {import(\"./BaseImage.js\").Options<ImageSourceType>} [options] Layer options.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  createRenderer() {\n    return new CanvasImageLayerRenderer(this);\n  }\n\n  /**\n   * Get data for a pixel location.  A four element RGBA array will be returned.  For requests outside the\n   * layer extent, `null` will be returned.  Data for an image can only be retrieved if the\n   * source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default ImageLayer;\n"],"names":["compareVersions","v1","v2","s1","s2","i","n1","n2","ReprojImage","ImageBase","sourceProj","targetProj","targetExtent","targetResolution","pixelRatio","getImageFunction","interpolate","maxSourceExtent","maxTargetExtent","limitedTargetExtent","getIntersection","targetCenter","getCenter","sourceResolution","calculateSourceResolution","errorThresholdInPixels","ERROR_THRESHOLD","triangulation","Triangulation","sourceExtent","sourceImage","state","ImageState","sourcePixelRatio","sourceState","width","getWidth","height","getHeight","renderReprojected","listen","EventType","e","unlistenByKey","ReprojImage$1","ImageSourceEventType","ImageSourceEvent","Event","type","image","ImageSource","Source","options","resolutions","resolution","idx","linearFindNearest","extent","projection","sourceProjection","equivalent","equals","abstract","event","defaultImageLoadFunction","src","ImageSource$1","appendParams","uri","params","keyParams","k","qs","DEFAULT_VERSION","DECIMALS","GETFEATUREINFO_IMAGE_SIZE","ImageWMS","coordinate","projectionObj","getProjection","sourceProjectionObj","transform","getForViewAndSize","baseParams","x","floor","y","layers","mpu","pixelSize","imageResolution","center","viewWidth","ceil","viewHeight","viewExtent","requestWidth","requestHeight","requestExtent","containsExtent","round","url","ImageWrapper","size","assert","dpi","axisOrientation","bbox","imageLoadFunction","version","ImageWMS$1","BaseImageLayer","Layer","BaseImageLayer$1","CanvasImageLayerRenderer","CanvasLayerRenderer","imageLayer","frameState","layerState","viewState","viewResolution","imageSource","hints","renderedExtent","fromUserExtent","ViewHint","isEmpty","pixel","layer","applyTransform","layerExtent","containsCoordinate","imageExtent","img","imageMapWidth","col","imageMapHeight","row","target","imagePixelRatio","viewCenter","scale","rotation","composeTransform","makeInverse","canvasTransform","toTransformString","context","canvas","clipped","render","intersectsExtent","dw","dh","dx","dy","opacity","previousAlpha","CanvasImageLayerRenderer$1","ImageLayer","ImageLayer$1"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}