{"version":3,"file":"WebMap-ddaf395f.js","sources":["../../src/view/WebMap.vue"],"sourcesContent":["<script>\r\nimport { useSlots, onBeforeMount, onMounted, onBeforeUnmount, ref, reactive, computed, watch, nextTick, defineAsyncComponent, useCssModule, inject, getCurrentInstance } from 'vue'\r\nimport $ from 'jquery'\r\n\r\nimport { Map, View, Feature } from 'ol'\r\nimport Select from 'ol/interaction/Select';\r\nimport { click } from 'ol/events/condition';\r\n\r\nimport { ImageArcGISRest, OSM } from 'ol/source.js'\r\nimport TileWMS from 'ol/source/TileWMS'\r\nimport { IGC, WFS, } from 'ol/format'\r\nimport * as ol from 'ol';\r\nimport { TileArcGISRest } from 'ol/source.js'\r\n\r\n\r\nimport XYZ from 'ol/source/XYZ'\r\nimport VectorSource from 'ol/source/Vector.js'\r\nimport { Icon, Fill, Stroke, Style } from 'ol/style.js'\r\nimport { Tile, Tile as TileLayer, Image as ImageLayer, Vector, Vector as VectorLayer } from 'ol/layer.js'\r\nimport ImageWMS from 'ol/source/ImageWMS.js';\r\nimport TileGrid from 'ol/layer/Tile.js';\r\n\r\nimport PerspectiveMap from \"ol-ext/map/PerspectiveMap\"\r\n\r\nimport EsriJSON from 'ol/format/EsriJSON.js'\r\nimport { createXYZ } from 'ol/tilegrid.js'\r\nimport { bbox, tile as tileStrategy } from 'ol/loadingstrategy.js'\r\nimport { Circle, Polygon, Point } from 'ol/geom.js'\r\nimport Projection from 'ol/proj/Projection.js'\r\nimport GeoJSON from 'ol/format/GeoJSON.js'\r\n\r\nimport OLCesium from 'olcs/OLCesium.js';\r\nimport VectorImageLayer from 'ol/layer/VectorImage.js';\r\nimport TileState from 'ol/TileState.js';\r\n\r\nimport 'ol/ol.css'\r\n\r\nimport mapLayerList from '@/config/mapLayerList'\r\nimport baseMapList from '@/config/baseMapList'\r\n\r\nimport 'ol-ext/dist/ol-ext.css'\r\nimport * as olTilecoord from 'ol/tilecoord'\r\nimport { get as getProjection } from 'ol/proj';\r\nimport WMSGetFeatureInfo from 'ol/format/WMSGetFeatureInfo.js';\r\nimport Overlay from 'ol/Overlay.js';\r\n\r\nexport default {\r\n    props: {},\r\n    setup(props, { emit }) {\r\n        const mapLayers = mapLayerList\r\n        const baseMaps = baseMapList\r\n        const state = reactive({\r\n            // defaultCenter: [120.971859, 24.801583],\r\n            defaultCenter: [121.326776, 24.655499],\r\n            defaultCenterZoom: 14,\r\n            targetNum: 1,\r\n            conditionWrap: false,\r\n            layerSelect: false,\r\n            currentLayers: [],\r\n            layers: [],\r\n            mapLayers: computed(() => {\r\n                return state.layers.map((node, index) => {\r\n                    return {\r\n                        label: node.group_title,\r\n                        value: node.value,\r\n                        layers: node.group_layers,\r\n                        groupClass: node.group_class\r\n                    }\r\n                })\r\n            }),\r\n            selectLock: false,\r\n            mapCount: 1,\r\n            map1: null,\r\n            map2: null,\r\n            map1LayerStatus: [],\r\n            map2LayerStatus: [],\r\n            deleteLightbox: false,\r\n            // 目前地圖狀態為2D or 3D\r\n            dimensionMap: {\r\n                map1: '2D',\r\n                map2: '2D'\r\n            },\r\n            toSearchDimensionStatus: computed(() => {\r\n                let target = state.targetNum == 1 ? 'map1' : 'map2'\r\n                return state.dimensionMap[target] === '2D'\r\n            }),\r\n            ol3d: null,\r\n            selectValueTemp: 0,\r\n            areaData: {\r\n                nodeRef: null,\r\n                overlay: null,\r\n                tribeAreaData: {},\r\n            },\r\n            comSize: {\r\n                wrapHeight: '',\r\n                wrapWidth: '',\r\n            },\r\n        })\r\n\r\n        const defaultView = new View({\r\n            projection: 'EPSG:4326',\r\n            center: state.defaultCenter,\r\n            zoom: state.defaultCenterZoom,\r\n        })\r\n\r\n        const defaultLayer = new Tile({\r\n            preload: Infinity,\r\n            name: 'source_nlsc_EMAP',\r\n            label: '臺灣通用電子地圖',\r\n            source: new XYZ({\r\n                url: 'https://wmts.nlsc.gov.tw/wmts/EMAP5/default/EPSG:3857/{z}/{y}/{x}'\r\n            }),\r\n            crossOrigin: 'anonymous',\r\n        })\r\n\r\n        let ol3d = null\r\n\r\n        // 初始化地圖\r\n        function initMap() {\r\n            state.map1 = new Map({\r\n                target: 'map1',\r\n                layers: [baseMapList.getBaseMapData(0)],\r\n                view: defaultView,\r\n                controls: [],\r\n            })\r\n        }\r\n\r\n        function addPoint(targetLng, targetLat) {\r\n            const marker = new Vector({\r\n                source: new VectorSource({\r\n                    features: [\r\n                        new Feature({\r\n                            geometry: new Point([targetLng, targetLat]),\r\n                            name: 'Null Island',\r\n                            population: 4000,\r\n                            rainfall: 500,\r\n                        })\r\n                    ]\r\n                }),\r\n                style: new Style({\r\n                    image: new Icon({\r\n                        anchor: [0.5, 100],\r\n                        anchorXUnits: 'fraction',\r\n                        anchorYUnits: 'pixels',\r\n                        // 圖片連結需修改\r\n                        src: 'https://www.ockert-cnc.de/wp-content/uploads/2016/12/map-marker-icon-100x100.png',\r\n                    }),\r\n                })\r\n            })\r\n\r\n            let target = state.targetNum == 1 ? 'map1' : 'map2'\r\n            state[target].addLayer(marker)\r\n        }\r\n\r\n        function mapControl({ action, value }) {\r\n            let mainMap = state.map1?.getTarget() == null ? 'map2' : 'map1'\r\n            let View = state[mainMap].getView()\r\n            switch (action) {\r\n                case 'In':\r\n                    View.animate({\r\n                        zoom: View.getZoom() + 1,\r\n                    })\r\n                    break;\r\n                case 'Out':\r\n                    View.animate({\r\n                        zoom: View.getZoom() - 1,\r\n                    })\r\n                    break;\r\n                case 'toNorth':\r\n                    View.animate({\r\n                        rotation: 0,\r\n                    })\r\n                    break;\r\n                case 'moveTo':\r\n                    if (value) {\r\n                        const { xAxis, yAxis } = value\r\n                        View.animate({\r\n                            center: [xAxis, yAxis],\r\n                            zoom: 10,\r\n                            duration: 100,\r\n                        });\r\n                    } else {\r\n                        navigator.geolocation.getCurrentPosition(function (pos) {\r\n                            View.animate({\r\n                                center: [pos.coords.longitude, pos.coords.latitude],\r\n                                zoom: 17,\r\n                                duration: 100,\r\n                            });\r\n                            addPoint(pos.coords.longitude, pos.coords.latitude)\r\n                        })\r\n                    }\r\n                    break;\r\n                case 'fullScreen':\r\n                    let target = document.getElementById(`map${state.targetNum}`)\r\n                    if (target.requestFullscreen) {\r\n                        target.requestFullscreen()\r\n                    } else if (target.msRequestFullscreen) {\r\n                        target.msRequestFullscreen()\r\n                    } else if (target.mozRequestFullScreen) {\r\n                        target.mozRequestFullScreen()\r\n                    } else if (target.webkitRequestFullscreen) {\r\n                        target.webkitRequestFullscreen()\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function layerControl({ action, value }) {\r\n            console.log(action, value)\r\n            let target = state.targetNum == 1 ? state.map1 : state.map2\r\n            let targetLayers = target?.getLayers()\r\n            switch (action) {\r\n                case 'layerMode':\r\n                    if (value.checked) {\r\n                        if (!(state.layers[value.nodeIndex].group_layers[value.subNodeIndex].single_tiles)) {\r\n                            let layersAry = targetLayers.getArray()\r\n                            layersAry.forEach(element => {\r\n                                if (!(element.get('id'))) { return }\r\n                                if (element.get('id').includes(`node${value.nodeIndex}_subNode${value.subNodeIndex}_nestedSubNode`)) {\r\n                                    target.removeLayer(element)\r\n                                }\r\n                            })\r\n                            onMapLayerStatus('delete', target.getTarget(), value.id)\r\n                        }\r\n                        let nestedSubNodeIndex = value.nestedSubNodeIndex || state.selectValueTemp\r\n                        let targetLayer = mapLayers.getLayer(state.layers[value.nodeIndex].group_layers[value.subNodeIndex], nestedSubNodeIndex, value.id)\r\n                        target.addLayer(targetLayer)\r\n\r\n                        // TODO: 3接4\r\n                        if (value.id === 'node0_subNode3_nestedSubNodeundefined') {\r\n                            let obj1 = {\r\n                                action: \"layerMode\",\r\n                                value: {\r\n                                    checked: true,\r\n                                    id: \"node0_subNode4_nestedSubNodeundefined\",\r\n                                    nestedSubNode: false,\r\n                                    nestedSubNodeIndex: undefined,\r\n                                    nodeIndex: 0,\r\n                                    subNodeIndex: 4\r\n                                }\r\n                            }\r\n                            layerControl(obj1)\r\n                        }\r\n\r\n                        if (['node0_subNode4_nestedSubNodeundefined', 'node0_subNode5_nestedSubNodeundefined'].includes(value.id)) {\r\n                            mapClickEvent(target, value.id)\r\n                        }\r\n\r\n                        onMapLayerStatus('add', target.getTarget(), value.id)\r\n                    } else {\r\n                        let layersAry = targetLayers.getArray()\r\n                        let toRemoveLayerId\r\n                        // TODO: 結構優化\r\n                        // FIXME: 直接選擇select，然後透過checkbox不會自動關閉所有圖層\r\n                        switch (value.id) {\r\n                            case 'node0_subNode0_nestedSubNodeundefined':\r\n                                // toRemoveLayerId = layersAry.filter(node => !(node.get('id') === undefined))\r\n                                toRemoveLayerId = layersAry.filter(element => {\r\n                                    console.log(element.get('id'))\r\n                                    return element.get('id') ? element?.get('id').includes('node0_subNode0_nestedSubNode') : false\r\n                                })\r\n                                toRemoveLayerId.forEach((node) => {\r\n                                    target.removeLayer(node)\r\n                                })\r\n                                break\r\n                            case 'node3_subNode1_nestedSubNodeundefined':\r\n                                toRemoveLayerId = layersAry.filter(element => {\r\n                                    return element.get('id') ? element?.get('id').includes('node3_subNode1_nestedSubNodeundefined') : false\r\n                                })\r\n                                toRemoveLayerId.forEach((node) => {\r\n                                    target.removeLayer(node)\r\n                                })\r\n                                break\r\n                            default:\r\n                                layersAry.forEach(element => {\r\n                                    if (element.get('id') == value.id) {\r\n                                        target.removeLayer(element)\r\n                                    }\r\n                                })\r\n                                break\r\n                        }\r\n                        onMapLayerStatus('delete', target.getTarget(), value.id)\r\n                    }\r\n                    break;\r\n                case 'selectLayerMode':\r\n                    if (state.selectLock) { return }\r\n                    if (value.layerName === 'all') {\r\n                        let layersAry = targetLayers.getArray()\r\n                        let layersToRemove = layersAry.filter(node => !(node.get('id') === undefined))\r\n                        layersToRemove.forEach((node) => {\r\n                            target.removeLayer(node)\r\n                        })\r\n                    } else {\r\n                        let layersAry = targetLayers.getArray()\r\n                        layersAry.forEach(element => {\r\n                            if (element.get('id') == value.id) {\r\n                                target.removeLayer(element)\r\n                            }\r\n                        })\r\n                    }\r\n                    break;\r\n                case 'changeOrder':\r\n                    if (state.selectLock) { return }\r\n                    let layeredIndex = mapLayerList.getLayerIndex(value.id)\r\n                    let nowTileLayer = mapLayers.getLayer(state.layers[layeredIndex.nodeIndex].group_layers[layeredIndex.subNodeIndex], layeredIndex.nestedSubNodeIndex, value.id)\r\n                    if (value.movement === 'up') {\r\n                        if (value.key + 1 == targetLayers.getArray().length) { return }\r\n                        value.checked = false\r\n                        layerControl({ action: 'layerMode', value: value })\r\n                        targetLayers.insertAt(value.key + 1, nowTileLayer)\r\n                    }\r\n                    if (value.movement === 'down') {\r\n                        if (value.key - 1 == 0) { return }\r\n                        value.checked = false\r\n                        layerControl({ action: 'layerMode', value: value })\r\n                        targetLayers.insertAt(value.key - 1, nowTileLayer)\r\n                    }\r\n                    break;\r\n                case 'changeLayerVisible':\r\n                    if (state.selectLock) { return }\r\n                    let visibleStatus = !(targetLayers.getArray()[value.key].getVisible())\r\n                    targetLayers.getArray()[value.key].setVisible(visibleStatus)\r\n                    break;\r\n                case 'baseMap':\r\n                    let newTileLayer = new Tile({\r\n                        preload: Infinity,\r\n                        name: value.layer.name,\r\n                        label: value.layer.label,\r\n                        source: new XYZ({\r\n                            url: value.layer.url\r\n                        }),\r\n                        crossOrigin: 'anonymous',\r\n                    })\r\n                    targetLayers.extend([newTileLayer])\r\n\r\n                    let layersAry = targetLayers.getArray()\r\n                    layersAry.forEach(element => {\r\n                        if (element.get('name') !== value.layerName) {\r\n                            target.removeLayer(element)\r\n                        }\r\n                    })\r\n                    break;\r\n                case 'changeMapCount':\r\n                    if (state.mapCount === value.qty) { return }\r\n                    let otherMap = state.targetNum !== 1 ? 'map1' : 'map2'\r\n                    state.mapCount = value.qty\r\n                    let otherLayers = state[`${otherMap}LayerStatus`].filter(node => node !== '3D')\r\n                    let otherLayersData = otherLayers.map(item => mapLayerList.getLayerIndex(item))\r\n                    if (value.qty === 2) {\r\n                        state[otherMap] = new Map({\r\n                            target: otherMap,\r\n                            layers: [\r\n                                baseMapList.getBaseMapData(0),\r\n                                ...otherLayersData.map(node => mapLayers.getLayer(state.layers[node.nodeIndex].group_layers[node.subNodeIndex], node.nestedSubNodeIndex, node.id))\r\n                            ],\r\n                            view: defaultView,\r\n                            controls: [],\r\n                        })\r\n                        if (state[`${otherMap}LayerStatus`]?.indexOf('3D') !== -1) {\r\n                            ol3d = new OLCesium({\r\n                                map: state[otherMap],\r\n                            })\r\n                            ol3d.setEnabled(true)\r\n                            Cesium.Ion.defaultAccessToken = import.meta.env.VITE_Ol3D_TOKEN\r\n                            let scene = ol3d.getCesiumScene({})\r\n                            scene.terrainProvider = Cesium.createWorldTerrain({})\r\n                        }\r\n                    }\r\n                    if (value.qty === 1) {\r\n                        state[otherMap] = null\r\n                        const element = document.getElementById(otherMap)\r\n                        while (element.firstChild) {\r\n                            element.removeChild(element.firstChild)\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'changeDimensionMap':\r\n                    let ta = state.targetNum == 1 ? 'map1' : 'map2'\r\n                    state.dimensionMap[ta] = value\r\n                    if (value === '3D') {\r\n                        ol3d = new OLCesium({\r\n                            map: target,\r\n                        })\r\n                        ol3d.setEnabled(true)\r\n                        Cesium.Ion.defaultAccessToken = import.meta.env.VITE_Ol3D_TOKEN\r\n                        let scene = ol3d.getCesiumScene({})\r\n                        scene.terrainProvider = Cesium.createWorldTerrain({})\r\n                        state[`${ta}LayerStatus`].push('3D')\r\n                    } else {\r\n                        ol3d.setEnabled(false)\r\n                        state[`${ta}LayerStatus`] = state[`${ta}LayerStatus`].filter(node => node !== '3D')\r\n                    }\r\n                    break;\r\n                case 'setOpacity':\r\n                    if (targetLayers.getArray()[value.key].getOpacity() !== 1) {\r\n                        targetLayers.getArray()[value.key].setOpacity(1)\r\n                    } else {\r\n                        targetLayers.getArray()[value.key].setOpacity(0.5)\r\n                    }\r\n                    break;\r\n            }\r\n            getCurrentLayerNames()\r\n        }\r\n\r\n        function changeTarget(value) {\r\n            state.targetNum = value\r\n            let delToMap = state.targetNum !== 1 ? 'map1' : 'map2'\r\n            if (state.mapCount === 1) {\r\n                // 目標地圖為空\r\n                if (!state[`map${value}`]) {\r\n                    let otherLayers = state[`map${value}LayerStatus`].filter(node => node !== '3D')\r\n\r\n                    // TODO: 優化，靶node0_subNode4_nestedSubNodeundefined移到最後面\r\n                    if (otherLayers.includes('node0_subNode4_nestedSubNodeundefined')) {\r\n                        let a = otherLayers.filter(node => node !== 'node0_subNode4_nestedSubNodeundefined')\r\n                        otherLayers = [...a, 'node0_subNode4_nestedSubNodeundefined']\r\n                    }\r\n\r\n                    let otherLayersData = otherLayers.map(item => mapLayerList.getLayerIndex(item))\r\n\r\n                    state[`map${value}`] = new Map({\r\n                        target: `map${value}`,\r\n                        layers: [\r\n                            baseMapList.getBaseMapData(0),\r\n                            ...otherLayersData.map(node => mapLayers.getLayer(state.layers[node.nodeIndex].group_layers[node.subNodeIndex], node.nestedSubNodeIndex, node.layeredIndex))\r\n                        ],\r\n                        view: defaultView,\r\n                        controls: [],\r\n                    })\r\n\r\n                    mapClickEvent(state[`map${value}`])\r\n\r\n                    // FIXME: 切換3D會有問題跳回平面\r\n                    if (state[`map${value}LayerStatus`]?.indexOf('3D') !== -1) {\r\n                        ol3d = new OLCesium({\r\n                            map: state[`map${value}`],\r\n                        })\r\n                        ol3d.setEnabled(true)\r\n                    }\r\n\r\n                }\r\n                // 非目標地圖的刪除\r\n                if (state[delToMap]) {\r\n                    state[delToMap] = null\r\n                    const element = document.getElementById(delToMap)\r\n                    while (element.firstChild) {\r\n                        element.removeChild(element.firstChild)\r\n                    }\r\n                }\r\n            }\r\n            nextTick(() => {\r\n                getCurrentLayerNames()\r\n            })\r\n        }\r\n\r\n        function getCurrentLayerNames() {\r\n            let target = state.targetNum == 1 ? state.map1 : state.map2\r\n            const layers = target?.getLayers()?.getArray()\r\n            state.currentLayers = layers?.map(layer => {\r\n                return {\r\n                    label: layer.get('label'),\r\n                    id: layer.get('id'),\r\n                    visible: layer.getVisible(),\r\n                }\r\n            })\r\n        }\r\n\r\n        function conditionWrap() {\r\n            state.conditionWrap = !state.conditionWrap\r\n        }\r\n\r\n        function onMapLayerStatus(action, target, id) {\r\n            if (action === 'add') {\r\n                state[`${target}LayerStatus`].push(id)\r\n            } else if (action === 'delete') {\r\n                let a = state[`${target}LayerStatus`].findIndex(node => node === id)\r\n                state[`${target}LayerStatus`].splice(a, 1)\r\n            } else {\r\n                console.log('error')\r\n            }\r\n        }\r\n\r\n        function mapClickEvent(target, vid='node0_subNode4_nestedSubNodeundefined') {\r\n            let selector = new Select({\r\n                layers: target?.getLayers()?.getArray(),\r\n                condition: click\r\n            })\r\n            target.addInteraction(selector)\r\n            selector.on('select', (event) => {\r\n                let selectedFeatures = event.selected\r\n                if (event.selected[0]) {\r\n                    state.areaData.overlay = new Overlay({\r\n                        element: state.areaData.nodeRef,\r\n                        autoPan: true,\r\n                        autoPanAnimation: {\r\n                            duration: 250\r\n                        }\r\n                    });\r\n                    target.addOverlay(state.areaData.overlay);\r\n                    state.areaData.overlay.setPosition(event.mapBrowserEvent.coordinate)\r\n\r\n                    // TODO: 重置area小地圖id\r\n                    state.areaData.tribeAreaData = {}\r\n                    // TODO: 優化結構，獲取state.areaData.overlay方式修正，考慮整包selectedFeatures放進去\r\n                    if (selectedFeatures[0].get('編號') === undefined) {\r\n                        state.areaData.tribeAreaData = selectedFeatures[0]\r\n                    } else {\r\n                        selectedFeatures.forEach((feature) => {\r\n                            let properties = feature.getProperties()\r\n                            Object.entries(properties).forEach(node => {\r\n                                const key = node[0], value = node[1]\r\n                                state.areaData.tribeAreaData[key] = value\r\n                                })\r\n                        })\r\n                    }\r\n                } else {\r\n                    state.areaData.tribeAreaData = {}\r\n                    target.removeOverlay(state.areaData.overlay)\r\n                    state.areaData.overlay = null\r\n                }\r\n            })\r\n        }\r\n\r\n        function closeMapData() {\r\n            let target = state.targetNum == 1 ? state.map1 : state.map2\r\n            target.removeOverlay(state.areaData.overlay)\r\n            state.areaData.overlay = null\r\n        }\r\n\r\n        onMounted(async () => {\r\n            await $.ajax({\r\n                url: 'https://api.edtest.site/layers',\r\n                method: \"GET\"\r\n            }).done(res => {\r\n                state.layers = res.map((node, index) => {\r\n                    node.group_layers.forEach((sub, subIndex) => {\r\n                        let subNodeIndex = subIndex, nestedSubNodeIndex = undefined\r\n                        sub.id = `node${index}_subNode${subNodeIndex}_nestedSubNode${nestedSubNodeIndex}`\r\n\r\n                        if (!(sub.single_tiles)) {\r\n                            sub.tiles_list.forEach((nestedSub, nestedSubIndex) => {\r\n                                nestedSubNodeIndex = nestedSubIndex\r\n                                nestedSub.id = `node${index}_subNode${subNodeIndex}_nestedSubNode${nestedSubNodeIndex}`\r\n                            })\r\n                        }\r\n                    })\r\n                    return {\r\n                        ...node,\r\n                        value: index,\r\n                    }\r\n                })\r\n                nextTick(() => {\r\n                    initMap()\r\n                    getCurrentLayerNames()\r\n                })\r\n            }).fail(FailMethod => {\r\n                console.log('Fail', FailMethod)\r\n            })\r\n\r\n            state.comSize.wrapHeight = window.innerHeight\r\n            state.comSize.wrapWidth = window.innerWidth\r\n            window.onresize = (e)=>{\r\n                state.comSize.wrapHeight = e.target.innerHeight\r\n                state.comSize.wrapWidth = e.target.innerWidth\r\n            }\r\n\r\n        })\r\n\r\n        return {\r\n            state,\r\n            props,\r\n            mapControl,\r\n            layerControl,\r\n            getCurrentLayerNames,\r\n            changeTarget,\r\n            conditionWrap,\r\n            closeMapData\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<template>\r\n    <div>\r\n        <div class=\"w-100 d-flex flex flex-sm-row flex-wrap flex-sm-nowrap mapWrap\" id=\"mapWrap\">\r\n            <!-- TODO: 寬度設定是否調整 -->\r\n            <div id=\"map1\"\r\n            :class=\"{ 'w-100': state.map1?.getTarget() == 'map1', 'h-100':state.mapCount === 1, 'h-50':state.mapCount === 2 && (state.comSize.wrapWidth < 600) }\"\r\n            ></div>\r\n            <div class=\"middleLine\" v-if=\"state.mapCount === 2\"></div>\r\n            <div id=\"map2\"\r\n            :class=\"{ 'w-100': state.map2?.getTarget() == 'map2', 'h-100':state.mapCount === 1, 'h-50':state.mapCount === 2 && (state.comSize.wrapWidth < 600) }\"\r\n            ></div>\r\n        </div>\r\n        <asideTool class=\"asideTool position-absolute top-50 translate-middle-y\" id=\"asideTool\"\r\n            @onMapControl=\"({ action, value }) => { mapControl({ action, value }) }\" />\r\n\r\n        <div class=\"SearchBar d-none d-sm-block position-absolute\">\r\n            <div class=\"d-flex align-items-center\">\r\n                <img src=\"@/assets/logo.svg\" alt=\"\" class=\"mb-2\">\r\n                <ul>\r\n                    <li class=\"d-flex align-items-center\">\r\n                        <span class=\"me-2\">部落</span>\r\n                        <mapSourceOption class=\"mapSourceOption d-none d-sm-block\"\r\n                        :onChangeBaseMaps=\"({ action, value })=>{\r\n                            layerControl({ action, value })\r\n                        }\" />\r\n                    </li>\r\n                    <li class=\"d-flex align-items-center\">\r\n\r\n                    </li>\r\n                    <li class=\"d-flex align-items-center\">\r\n\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <SearchBar\r\n            :dimensionMapStatus=\"state.toSearchDimensionStatus\"\r\n            :currentLayers=\"state.currentLayers\"\r\n            :mapCount=\"state.mapCount\"\r\n            :onChangeBaseMaps=\"({ action, value })=>{\r\n                layerControl({ action, value })\r\n            }\"\r\n            @onLayerControl=\"({ action, value }) => { layerControl({ action, value }) }\"\r\n            @onChangeTarget=\"(value) => { changeTarget(value) }\"\r\n            @conditionWrap=\"(value) => { conditionWrap(value) }\" />\r\n        </div>\r\n\r\n        <div class=\"conditionCom d-none d-sm-block position-absolute\">\r\n            <div class=\"mb-2\">\r\n                <button class=\"border-0 w-100 rounded-4 bg-steel text-white text-center p-2 fw-bold fs-5\"\r\n                    v-if=\"!state.conditionWrap\" @click=\"state.conditionWrap = true\">\r\n                    圖層選項\r\n                </button>\r\n                <div class=\"mb-4\" v-if=\"state.conditionWrap\">\r\n                    <condition v-bind=\"{\r\n                        mapLayers: state.mapLayers,\r\n                        currentLayers: state.currentLayers,\r\n                        onClose: () => {\r\n                            state.conditionWrap = false\r\n                        },\r\n                        showSelectLayerValue: (val) => {\r\n                            state.selectValueTemp = val\r\n                        }\r\n                    }\"\r\n                    @onMapControl=\"({ action, value }) => { mapControl({ action, value }) }\"\r\n                    @onLayerControl=\"({ action, value }) => { layerControl({ action, value }) }\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <button class=\"border-0 w-100 rounded-4 bg-steel text-white text-center p-2 fw-bold fs-5\"\r\n                    v-if=\"!state.layerSelect\" @click=\"state.layerSelect = true\">\r\n                    已選擇的圖層\r\n                </button>\r\n                <div v-if=\"state.layerSelect\">\r\n                    <layerSelect v-bind=\"{\r\n                        selectLock: state.selectLock,\r\n                        currentLayers: state.currentLayers,\r\n                        onClose: () => {\r\n                            state.layerSelect = false\r\n                        },\r\n                        onLockLayer: () => {\r\n                            state.selectLock = !state.selectLock\r\n                        },\r\n                        onDeleteLayer: ({ action, value }) => {\r\n                            if (value.layerName == 'all') {\r\n                                state.deleteLightbox = true\r\n                            } else {\r\n                                layerControl({ action, value })\r\n                            }\r\n                        },\r\n                        onDeleteLayerAll: () => {\r\n                            state.deleteLightbox = true\r\n                        },\r\n                        onLayerControl: ({ action, value }) => {\r\n                            layerControl({ action, value })\r\n                        },\r\n                    }\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"lightWrap w-100 h-100 d-flex justify-content-center align-items-center\" v-if=\"state.deleteLightbox\">\r\n            <div class=\"p-4 rounded bg-white\" style=\"width: 250px;\">\r\n                <p class=\"text-center fw-bold\">是否要刪除全部圖層</p>\r\n                <div class=\" d-flex justify-content-around\">\r\n                    <button class=\"rounded px-3 py-1 bg-steel text-white border-0\" @click=\"() => {\r\n                        layerControl({\r\n                            action: 'selectLayerMode',\r\n                            value: {\r\n                                layerName: 'all'\r\n                            }\r\n                        })\r\n                        state.deleteLightbox = false\r\n                    }\">確定</button>\r\n                    <button class=\"rounded px-3 py-1 bg-secondary bg-gradient text-white border-0\" @click=\"() => {\r\n                        state.deleteLightbox = false\r\n                    }\">取消</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div id=\"popup\" class=\"position-absolute bottom-0\" :ref=\"(e) => {\r\n            state.areaData.nodeRef = e\r\n        }\">\r\n            <areaData class=\"areaData\" v-if=\"state.areaData?.overlay\" :closeMapData=\"() => {\r\n                closeMapData()\r\n            }\" :tribeAreaData=\"state.areaData.tribeAreaData\" :maxHeight=\"500\" />\r\n        </div>\r\n\r\n        <div class=\"m-Navbar d-flex d-sm-none position-fixed bottom-0 start-0 w-100\">\r\n            <condition\r\n            class=\"position-absolute bottom-100 w-100\"\r\n            v-if=\"state.conditionWrap\"\r\n            v-bind=\"{\r\n                mapLayers: state.mapLayers,\r\n                currentLayers: state.currentLayers,\r\n                onClose: () => {\r\n                    state.conditionWrap = false\r\n                },\r\n                showSelectLayerValue: (val) => {\r\n                    state.selectValueTemp = val\r\n                }\r\n            }\"\r\n            @onMapControl=\"({ action, value }) => { mapControl({ action, value }) }\"\r\n            @onLayerControl=\"({ action, value }) => { layerControl({ action, value }) }\" />\r\n\r\n            <div v-if=\"state.layerSelect\">\r\n                    <layerSelect\r\n                    class=\"position-absolute bottom-100 w-100\"\r\n                    v-bind=\"{\r\n                        selectLock: state.selectLock,\r\n                        currentLayers: state.currentLayers,\r\n                        onClose: () => {\r\n                            state.layerSelect = false\r\n                        },\r\n                        onChangLayerVisible: (action) => {\r\n                            layerControl(action)\r\n                        },\r\n                        onChangeOrderLayer: ({ action, value }) => {\r\n                            layerControl({ action, value })\r\n                        },\r\n                        onLockLayer: () => {\r\n                            state.selectLock = !state.selectLock\r\n                        },\r\n                        onDeleteLayer: ({ action, value }) => {\r\n                            if (value.layerName == 'all') {\r\n                                state.deleteLightbox = true\r\n                            } else {\r\n                                layerControl({ action, value })\r\n                            }\r\n                        },\r\n                        onDeleteLayerAll: () => {\r\n                            state.deleteLightbox = true\r\n                        },\r\n                    }\"\r\n                    :setOpacity=\"({ action, value })=>{\r\n                        layerControl({ action, value })\r\n                    }\"\r\n                    />\r\n                </div>\r\n\r\n            <mNavbar\r\n            :dimensionMapStatus=\"state.toSearchDimensionStatus\"\r\n            :currentLayers=\"state.currentLayers\"\r\n            :mapCount=\"state.mapCount\"\r\n            :openConditionWrap=\"() => {\r\n                state.conditionWrap = !state.conditionWrap\r\n                state.layerSelect = false\r\n            }\"\r\n            :openLayerSelect=\"() => {\r\n                state.layerSelect = !state.layerSelect\r\n                state.conditionWrap = false\r\n            }\"\r\n            :onLayerControl=\"({ action, value }) => {\r\n                layerControl({ action, value })\r\n            }\"\r\n            :onChangeTarget=\"(value) => { changeTarget(value) }\"\r\n            @conditionWrap=\"(value) => { conditionWrap(value) }\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style lang=\"sass\">\r\n@import '@/assets/styles/all.module.scss'\r\n.mapWrap\r\n    justify-content: space-between\r\n    height: 100vh\r\n\r\n.mapWrap .ol-viewport\r\n    height: 100vh\r\n    width: 100vw\r\n.asideTool\r\n    z-index: 220\r\n    left: 5px\r\n.SearchBar\r\n    top: 20px\r\n    left: 20px\r\n    z-index: 220\r\n.conditionCom\r\n    width: 480px\r\n    right: 1%\r\n    bottom: 5%\r\n.middleLine\r\n    width: 5px\r\n    background: $blue-steel\r\n.areaData\r\n    width: 450px\r\n    max-height: 500px\r\n    background: #fff\r\n    box-sizing: border-box\r\n#popup\r\n    border: 1px solid #088\r\n    border-radius: 10px\r\n    background-color: #0FF\r\n\r\n\r\n\r\n@media (max-width: 600px)\r\n    .m-Navbar\r\n        z-index: 222\r\n    .middleLine\r\n        height: 1px\r\n        width: 100%\r\n</style>\r\n"],"names":["_sfc_main","props","emit","state","reactive","node","index","computed","target","XYZ","initMap","Map","baseMapList","defaultView","addPoint","targetLng","targetLat","Point","Style","Icon","mapControl","action","value","View","mainMap","xAxis","yAxis","layerControl","targetLayers","element","nestedSubNodeIndex","layersAry","toRemoveLayerId","nowTileLayer","mapLayers","layeredIndex","visibleStatus","newTileLayer","otherMap","otherLayersData","item","mapLayerList","ol3d","OLCesium","scene","ta","getCurrentLayerNames","delToMap","otherLayers","mapClickEvent","layers","_a","layer","onMapLayerStatus","id","a","vid","click","selector","event","selectedFeatures","Overlay","feature","properties","key","onMounted","res","sub","subIndex","subNodeIndex","nestedSubIndex","nestedSub","FailMethod","e","_hoisted_3","_hoisted_4","_imports_0","_hoisted_6","_hoisted_7","_createElementVNode","_hoisted_10","_hoisted_11","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_1","_normalizeClass","$setup","_openBlock","_createElementBlock","_hoisted_2","_b","_cache","_hoisted_12","_createVNode","_component_condition","_mergeProps","_hoisted_14","_hoisted_15","_createBlock","_component_layerSelect"],"mappings":"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"}