{"version":3,"file":"WebMap-877d40bc.js","sources":["../../src/view/WebMap.vue"],"sourcesContent":["<script>\nimport { useSlots, onBeforeMount, onMounted, onBeforeUnmount, ref, reactive, computed, watch, nextTick, defineAsyncComponent, useCssModule, inject, getCurrentInstance } from 'vue'\nimport $ from 'jquery'\n\nimport { Map, View, Feature } from 'ol'\nimport Select from 'ol/interaction/Select';\nimport { click } from 'ol/events/condition';\n\nimport { ImageArcGISRest, OSM } from 'ol/source.js'\nimport TileWMS from 'ol/source/TileWMS'\nimport { IGC, WFS, } from 'ol/format'\nimport * as ol from 'ol';\nimport { TileArcGISRest } from 'ol/source.js'\n\n\nimport XYZ from 'ol/source/XYZ'\nimport VectorSource from 'ol/source/Vector.js'\nimport { Icon, Fill, Stroke, Style } from 'ol/style.js'\nimport { Tile, Tile as TileLayer, Image as ImageLayer, Vector, Vector as VectorLayer } from 'ol/layer.js'\nimport ImageWMS from 'ol/source/ImageWMS.js';\nimport TileGrid from 'ol/layer/Tile.js';\n\nimport PerspectiveMap from \"ol-ext/map/PerspectiveMap\"\n\nimport EsriJSON from 'ol/format/EsriJSON.js'\nimport { createXYZ } from 'ol/tilegrid.js'\nimport { bbox, tile as tileStrategy } from 'ol/loadingstrategy.js'\nimport { Circle, Polygon, Point } from 'ol/geom.js'\nimport Projection from 'ol/proj/Projection.js'\nimport GeoJSON from 'ol/format/GeoJSON.js'\n\nimport OLCesium from 'olcs/OLCesium.js';\nimport VectorImageLayer from 'ol/layer/VectorImage.js';\nimport TileState from 'ol/TileState.js';\n\nimport 'ol/ol.css'\n\nimport mapLayerList from '@/config/mapLayerList'\nimport baseMapList from '@/config/baseMapList'\n\nimport 'ol-ext/dist/ol-ext.css'\nimport * as olTilecoord from 'ol/tilecoord'\nimport { get as getProjection } from 'ol/proj';\nimport WMSGetFeatureInfo from 'ol/format/WMSGetFeatureInfo.js';\nimport Overlay from 'ol/Overlay.js';\n\nexport default {\n    props: {},\n    setup(props, { emit }) {\n        const mapLayers = mapLayerList\n        const baseMaps = baseMapList\n        const state = reactive({\n            // defaultCenter: [120.971859, 24.801583],\n            defaultCenter: [121.326776, 24.655499],\n            defaultCenterZoom: 14,\n            targetNum: 1,\n            conditionWrap: false,\n            layerSelect: false,\n            currentLayers: [],\n            layers: [],\n            mapLayers: computed(() => {\n                return state.layers.map((node, index) => {\n                    return {\n                        label: node.group_title,\n                        value: node.value,\n                        layers: node.group_layers,\n                        groupClass: node.group_class\n                    }\n                })\n            }),\n            baseMapsOptions: computed(() => baseMapList.sourceData()),\n            selectLock: false,\n            mapCount: 1,\n            map1: null,\n            map2: null,\n            map1LayerStatus: [],\n            map2LayerStatus: [],\n            deleteLightbox: false,\n            // 目前地圖狀態為2D or 3D\n            dimensionMap: {\n                map1: '2D',\n                map2: '2D'\n            },\n            toSearchDimensionStatus: computed(() => {\n                let target = state.targetNum == 1 ? 'map1' : 'map2'\n                return state.dimensionMap[target] === '2D'\n            }),\n            ol3d: null,\n            selectValueTemp: 0,\n            areaData: {\n                nodeRef: null,\n                overlay: null,\n                tribeAreaData: {},\n            },\n        })\n\n        const defaultView = new View({\n            projection: 'EPSG:4326',\n            center: state.defaultCenter,\n            zoom: state.defaultCenterZoom,\n        })\n\n        let ol3d = null\n\n        // 初始化地圖\n        function initMap() {\n            state.map1 = new Map({\n                target: 'map1',\n                layers: [baseMapList.sourceFun('default')],\n                view: defaultView,\n                controls: [],\n            })\n        }\n\n        function addPoint(targetLng, targetLat) {\n            const marker = new Vector({\n                source: new VectorSource({\n                    features: [\n                        new Feature({\n                            geometry: new Point([targetLng, targetLat]),\n                            name: 'Null Island',\n                            population: 4000,\n                            rainfall: 500,\n                        })\n                    ]\n                }),\n                style: new Style({\n                    image: new Icon({\n                        anchor: [0.5, 100],\n                        anchorXUnits: 'fraction',\n                        anchorYUnits: 'pixels',\n                        // 圖片連結需修改\n                        src: 'https://www.ockert-cnc.de/wp-content/uploads/2016/12/map-marker-icon-100x100.png',\n                    }),\n                })\n            })\n\n            let target = state.targetNum == 1 ? 'map1' : 'map2'\n            state[target].addLayer(marker)\n        }\n\n        function mapControl({ action, value }) {\n            let mainMap = state.map1?.getTarget() == null ? 'map2' : 'map1'\n            let View = state[mainMap].getView()\n            switch (action) {\n                case 'In':\n                    View.animate({\n                        zoom: View.getZoom() + 1,\n                    })\n                    break;\n                case 'Out':\n                    View.animate({\n                        zoom: View.getZoom() - 1,\n                    })\n                    break;\n                case 'toNorth':\n                    View.animate({\n                        rotation: 0,\n                    })\n                    break;\n                case 'moveTo':\n                    if (value) {\n                        const { xAxis, yAxis } = value\n                        View.animate({\n                            center: [xAxis, yAxis],\n                            zoom: 10,\n                            duration: 100,\n                        });\n                    } else {\n                        navigator.geolocation.getCurrentPosition(function (pos) {\n                            View.animate({\n                                center: [pos.coords.longitude, pos.coords.latitude],\n                                zoom: 17,\n                                duration: 100,\n                            });\n                            addPoint(pos.coords.longitude, pos.coords.latitude)\n                        })\n                    }\n                    break;\n                case 'fullScreen':\n                    let target = document.getElementById(`map${state.targetNum}`)\n                    if (target.requestFullscreen) {\n                        target.requestFullscreen()\n                    } else if (target.msRequestFullscreen) {\n                        target.msRequestFullscreen()\n                    } else if (target.mozRequestFullScreen) {\n                        target.mozRequestFullScreen()\n                    } else if (target.webkitRequestFullscreen) {\n                        target.webkitRequestFullscreen()\n                    }\n                    break;\n            }\n        }\n\n        function layerControl({ action, value }) {\n            let target = state.targetNum == 1 ? state.map1 : state.map2\n            let targetLayers = target?.getLayers()\n            switch (action) {\n                case 'layerMode':\n                    console.log(value.id)\n                    if (value.checked) {\n                        if (!(state.layers[value.nodeIndex].group_layers[value.subNodeIndex].single_tiles)) {\n                            let layersAry = targetLayers.getArray()\n                            layersAry.forEach(element => {\n                                if (!(element.get('id'))) { return }\n                                if (element.get('id').includes(`node${value.nodeIndex}_subNode${value.subNodeIndex}_nestedSubNode`)) {\n                                    target.removeLayer(element)\n                                }\n                            })\n                            onMapLayerStatus('delete', target.getTarget(), value.id)\n                        }\n                        let nestedSubNodeIndex = value.nestedSubNodeIndex || state.selectValueTemp\n                        let targetLayer = mapLayers.getLayer(state.layers[value.nodeIndex].group_layers[value.subNodeIndex], nestedSubNodeIndex, value.id)\n                        target.addLayer(targetLayer)\n\n                        // needfix 3接4\n                        if (value.id === 'node0_subNode3_nestedSubNodeundefined') {\n                            let obj1 = {\n                                action: \"layerMode\",\n                                value: {\n                                    checked: true,\n                                    id: \"node0_subNode4_nestedSubNodeundefined\",\n                                    nestedSubNode: false,\n                                    nestedSubNodeIndex: undefined,\n                                    nodeIndex: 0,\n                                    subNodeIndex: 4\n                                }\n                            }\n                            layerControl(obj1)\n                        }\n\n                        if (value.id === 'node0_subNode4_nestedSubNodeundefined') {\n                            mapClickEvent(target)\n                        }\n\n                        onMapLayerStatus('add', target.getTarget(), value.id)\n                    } else {\n                        let layersAry = targetLayers.getArray()\n                        let toRemoveLayerId\n                        // fix: 此處寫死 淹水.台灣近岸海域風浪危害圖 兩個圖層，看之後是否可以改成以single_tiles判斷\n                        switch (value.id) {\n                            case 'node0_subNode0_nestedSubNodeundefined':\n                                toRemoveLayerId = layersAry.filter(element => element.get('id') === 'node0_subNode0_nestedSubNodeundefined')\n                                toRemoveLayerId.forEach((node) => {\n                                    target.removeLayer(node)\n                                })\n                                break\n                            case 'node3_subNode1_nestedSubNodeundefined':\n                                toRemoveLayerId = layersAry.filter(element => element.get('id') === 'node3_subNode1_nestedSubNodeundefined')\n                                toRemoveLayerId.forEach((node) => {\n                                    target.removeLayer(node)\n                                })\n                                break\n                            default:\n                                layersAry.forEach(element => {\n                                    if (element.get('id') == value.id) {\n                                        target.removeLayer(element)\n                                    }\n                                })\n                                break\n                        }\n                        onMapLayerStatus('delete', target.getTarget(), value.id)\n                    }\n                    break;\n                case 'selectLayerMode':\n                    if (state.selectLock) { return }\n                    if (value.layerName === 'all') {\n                        let layersAry = targetLayers.getArray()\n                        let layersToRemove = layersAry.filter(node => node.get('name') !== 'default')\n                        layersToRemove.forEach((node) => {\n                            target.removeLayer(node)\n                        })\n                    } else {\n                        let layersAry = targetLayers.getArray()\n                        layersAry.forEach(element => {\n                            if (element.get('id') == value.id) {\n                                target.removeLayer(element)\n                            }\n                        })\n                    }\n                    break;\n                case 'changeOrder':\n                    if (state.selectLock) { return }\n                    let layeredIndex = mapLayerList.getLayerIndex(value.id)\n                    let nowTileLayer = mapLayers.getLayer(state.layers[layeredIndex.nodeIndex].group_layers[layeredIndex.subNodeIndex], layeredIndex.nestedSubNodeIndex, value.id)\n                    if (value.movement === 'up') {\n                        if (value.key + 1 == targetLayers.getArray().length) { return }\n                        value.checked = false\n                        layerControl({ action: 'layerMode', value: value })\n                        targetLayers.insertAt(value.key + 1, nowTileLayer)\n                    }\n                    if (value.movement === 'down') {\n                        if (value.key - 1 == 0) { return }\n                        value.checked = false\n                        layerControl({ action: 'layerMode', value: value })\n                        targetLayers.insertAt(value.key - 1, nowTileLayer)\n                    }\n                    break;\n                case 'changeLayerVisible':\n                    if (state.selectLock) { return }\n                    let visibleStatus = !(targetLayers.getArray()[value.key].getVisible())\n                    targetLayers.getArray()[value.key].setVisible(visibleStatus)\n                    break;\n                case 'baseMap':\n                    let newTileLayer = baseMaps.sourceFun(value.layerName)\n                    targetLayers.extend([newTileLayer])\n\n                    let layersAry = targetLayers.getArray()\n                    layersAry.forEach(element => {\n                        if (element.get('name') !== value.layerName) {\n                            target.removeLayer(element)\n                        }\n                    })\n                    break;\n                case 'changeMapCount':\n                    if (state.mapCount === value) { return }\n                    let otherMap = state.targetNum !== 1 ? 'map1' : 'map2'\n                    state.mapCount = value\n                    let otherLayers = state[`${otherMap}LayerStatus`].filter(node => node !== '3D')\n                    let otherLayersData = otherLayers.map(item => mapLayerList.getLayerIndex(item))\n                    if (value === 2) {\n                        state[otherMap] = new Map({\n                            target: otherMap,\n                            layers: [\n                                baseMapList.sourceFun('default'),\n                                ...otherLayersData.map(node => mapLayers.getLayer(state.layers[node.nodeIndex].group_layers[node.subNodeIndex], node.nestedSubNodeIndex, node.id))\n                            ],\n                            view: defaultView,\n                            controls: [],\n                        })\n                        if (state[`${otherMap}LayerStatus`]?.indexOf('3D') !== -1) {\n                            ol3d = new OLCesium({\n                                map: state[otherMap],\n                            })\n                            ol3d.setEnabled(true)\n                            Cesium.Ion.defaultAccessToken = import.meta.env.VITE_Ol3D_TOKEN\n                            let scene = ol3d.getCesiumScene({})\n                            scene.terrainProvider = Cesium.createWorldTerrain({})\n                        }\n                    }\n                    if (value === 1) {\n                        state[otherMap] = null\n                        const element = document.getElementById(otherMap)\n                        while (element.firstChild) {\n                            element.removeChild(element.firstChild)\n                        }\n                    }\n                    break;\n                case 'changeDimensionMap':\n                    let ta = state.targetNum == 1 ? 'map1' : 'map2'\n                    state.dimensionMap[ta] = value\n                    if (value === '3D') {\n                        ol3d = new OLCesium({\n                            map: target,\n                        })\n                        ol3d.setEnabled(true)\n                        Cesium.Ion.defaultAccessToken = import.meta.env.VITE_Ol3D_TOKEN\n                        let scene = ol3d.getCesiumScene({})\n                        scene.terrainProvider = Cesium.createWorldTerrain({})\n                        state[`${ta}LayerStatus`].push('3D')\n                    } else {\n                        ol3d.setEnabled(false)\n                        state[`${ta}LayerStatus`] = state[`${ta}LayerStatus`].filter(node => node !== '3D')\n                    }\n                    break;\n            }\n            getCurrentLayerNames()\n        }\n\n        function changeTarget(value) {\n            state.targetNum = value\n            let delToMap = state.targetNum !== 1 ? 'map1' : 'map2'\n            if (state.mapCount === 1) {\n                // 目標地圖為空\n                if (!state[`map${value}`]) {\n                    let otherLayers = state[`map${value}LayerStatus`].filter(node => node !== '3D')\n\n                    // needfix: 優化，靶node0_subNode4_nestedSubNodeundefined移到最後面\n                    if (otherLayers.includes('node0_subNode4_nestedSubNodeundefined')) {\n                        let a = otherLayers.filter(node => node !== 'node0_subNode4_nestedSubNodeundefined')\n                        otherLayers = [...a, 'node0_subNode4_nestedSubNodeundefined']\n                    }\n\n                    let otherLayersData = otherLayers.map(item => mapLayerList.getLayerIndex(item))\n\n                    state[`map${value}`] = new Map({\n                        target: `map${value}`,\n                        layers: [\n                            baseMapList.sourceFun('default'),\n                            ...otherLayersData.map(node => mapLayers.getLayer(state.layers[node.nodeIndex].group_layers[node.subNodeIndex], node.nestedSubNodeIndex, node.layeredIndex))\n                        ],\n                        view: defaultView,\n                        controls: [],\n                    })\n\n                    mapClickEvent(state[`map${value}`])\n\n\n                    if (state[`map${value}LayerStatus`]?.indexOf('3D') !== -1) {\n                        ol3d = new OLCesium({\n                            map: state[`map${value}`],\n                        })\n                        ol3d.setEnabled(true)\n                    }\n\n                }\n                // 非目標地圖的刪除\n                if (state[delToMap]) {\n                    state[delToMap] = null\n                    const element = document.getElementById(delToMap)\n                    while (element.firstChild) {\n                        element.removeChild(element.firstChild)\n                    }\n                }\n            }\n            nextTick(() => {\n                getCurrentLayerNames()\n            })\n        }\n\n        function getCurrentLayerNames() {\n            let target = state.targetNum == 1 ? state.map1 : state.map2\n            const layers = target?.getLayers()?.getArray()\n            state.currentLayers = layers?.map(layer => {\n                return {\n                    label: layer.get('label'),\n                    id: layer.get('id'),\n                    visible: layer.getVisible(),\n                }\n            })\n        }\n\n        function conditionWrap() {\n            state.conditionWrap = !state.conditionWrap\n        }\n\n        function onMapLayerStatus(action, target, id) {\n            if (action === 'add') {\n                state[`${target}LayerStatus`].push(id)\n            } else if (action === 'delete') {\n                let a = state[`${target}LayerStatus`].findIndex(node => node === id)\n                state[`${target}LayerStatus`].splice(a, 1)\n            } else {\n                console.log('error')\n            }\n        }\n\n        function mapClickEvent(target) {\n            let selector = new Select({\n                layers: target?.getLayers()?.getArray(),\n                condition: click\n            })\n\n            target.addInteraction(selector)\n\n            selector.on('select', (event) => {\n                let selectedFeatures = event.selected;\n                if (event.selected[0]) {\n                    // needfix: autoPan失效\n                    state.areaData.overlay = new Overlay({\n                        element: state.areaData.nodeRef,\n                        autoPan: true,\n                        autoPanAnimation: {\n                            duration: 250\n                        }\n                    });\n                    target.addOverlay(state.areaData.overlay);\n                    state.areaData.overlay.setPosition(event.mapBrowserEvent.coordinate)\n\n                    selectedFeatures.forEach((feature) => {\n                        let properties = feature.getProperties()\n                        Object.entries(properties).forEach(node => {\n                            const key = node[0], value = node[1]\n                            state.areaData.tribeAreaData[key] = value\n                        })\n                    })\n                } else {\n                    target.removeOverlay(state.areaData.overlay)\n                    state.areaData.overlay = null\n                }\n            })\n        }\n\n        function closeMapData() {\n            let target = state.targetNum == 1 ? state.map1 : state.map2\n            target.removeOverlay(state.areaData.overlay)\n            state.areaData.overlay = null\n        }\n\n\n        onMounted(async () => {\n            await $.ajax({\n                url: 'https://api.edtest.site/layers',\n                method: \"GET\"\n            }).done(res => {\n                state.layers = res.map((node, index) => {\n                    node.group_layers.forEach((sub, subIndex) => {\n                        let subNodeIndex = subIndex, nestedSubNodeIndex = undefined\n                        sub.id = `node${index}_subNode${subNodeIndex}_nestedSubNode${nestedSubNodeIndex}`\n\n                        // fix: 加入https node0_subNode3.4.5_nestedSubNodeundefined\n                        let stopAry = ['node0_subNode3_nestedSubNodeundefined', 'node0_subNode4_nestedSubNodeundefined', 'node0_subNode5_nestedSubNodeundefined']\n                        if(stopAry.includes(sub.id)) {\n                            sub.tiles_url = sub.tiles_url.replace(/http:\\/\\//g, \"https://\");\n                            console.log(sub.tiles_url)\n                        }\n\n                        if (!(sub.single_tiles)) {\n                            sub.tiles_list.forEach((nestedSub, nestedSubIndex) => {\n                                nestedSubNodeIndex = nestedSubIndex\n                                nestedSub.id = `node${index}_subNode${subNodeIndex}_nestedSubNode${nestedSubNodeIndex}`\n                            })\n                        }\n                    })\n                    return {\n                        ...node,\n                        value: index,\n                    }\n                })\n                nextTick(() => {\n                    initMap()\n                    getCurrentLayerNames()\n                })\n            }).fail(FailMethod => {\n                console.log('Fail', FailMethod)\n            })\n        })\n\n        return {\n            state,\n            props,\n            mapControl,\n            layerControl,\n            getCurrentLayerNames,\n            changeTarget,\n            conditionWrap,\n            closeMapData\n        }\n    }\n}\n</script>\n\n<template>\n    <div>\n        <div class=\"SearchBar position-absolute\">\n            <img src=\"@/assets/logo.svg\" alt=\"\" class=\"mb-2\">\n            <SearchBar :dimensionMapStatus=\"state.toSearchDimensionStatus\" :currentLayers=\"state.currentLayers\"\n                :mapCount=\"state.mapCount\" @onLayerControl=\"({ action, value }) => { layerControl({ action, value }) }\"\n                @onChangeTarget=\"(value) => { changeTarget(value) }\" @conditionWrap=\"(value) => { conditionWrap(value) }\" />\n        </div>\n        <mapSourceOption class=\"mapSourceOption\" :baseMapsOptions=\"state.baseMapsOptions\"\n            @onChangeBaseMaps=\"({ action, value }) => { layerControl({ action, value }) }\" />\n\n        <asideTool class=\"asideTool position-absolute top-50 translate-middle-y\" id=\"asideTool\"\n            @onMapControl=\"({ action, value }) => { mapControl({ action, value }) }\" />\n\n        <div class=\"w-100 d-flex flex-nowrap mapWrap\" id=\"mapWrap\">\n            <!-- needFix 寬度設定是否調整 -->\n            <div id=\"map1\" :class=\"{ 'w-100': state.map1?.getTarget() == 'map1' }\"></div>\n            <div class=\"middleLine\" v-if=\"state.mapCount === 2\"></div>\n            <div id=\"map2\" :class=\"{ 'w-100': state.map2?.getTarget() == 'map2' }\"></div>\n        </div>\n        <div class=\"condition position-absolute\">\n            <div class=\"mb-2\">\n                <button class=\"border-0 w-100 rounded-4 bg-steel text-white text-center p-2 fw-bold fs-5\"\n                    v-if=\"!state.conditionWrap\" @click=\"state.conditionWrap = true\">\n                    圖層選項\n                </button>\n                <div class=\"mb-4\" v-if=\"state.conditionWrap\">\n                    <condition v-bind=\"{\n                        mapLayers: state.mapLayers,\n                        currentLayers: state.currentLayers,\n                        onClose: () => {\n                            state.conditionWrap = false\n                        },\n                        showSelectLayerValue: (val) => {\n                            state.selectValueTemp = val\n                        }\n                    }\" @onMapControl=\"({ action, value }) => { mapControl({ action, value }) }\"\n                        @onLayerControl=\"({ action, value }) => { layerControl({ action, value }) }\" />\n                </div>\n            </div>\n\n            <div>\n                <button class=\"border-0 w-100 rounded-4 bg-steel text-white text-center p-2 fw-bold fs-5\"\n                    v-if=\"!state.layerSelect\" @click=\"state.layerSelect = true\">\n                    已選擇的圖層\n                </button>\n                <div v-if=\"state.layerSelect\">\n                    <layerSelect v-bind=\"{\n                        selectLock: state.selectLock,\n                        currentLayers: state.currentLayers,\n                        onClose: () => {\n                            state.layerSelect = false\n                        },\n                        onChangLayerVisible: (action) => {\n                            layerControl(action)\n                        },\n                        onChangeOrderLayer: ({ action, value }) => {\n                            layerControl({ action, value })\n                        },\n                        onLockLayer: () => {\n                            state.selectLock = !state.selectLock\n                        },\n                        onDeleteLayer: ({ action, value }) => {\n                            if (value.layerName == 'all') {\n                                state.deleteLightbox = true\n                            } else {\n                                layerControl({ action, value })\n                            }\n                        },\n                        onDeleteLayerAll: () => {\n                            state.deleteLightbox = true\n                        }\n                    }\" />\n                </div>\n            </div>\n        </div>\n        <div class=\"lightWrap w-100 h-100 d-flex justify-content-center align-items-center\" v-if=\"state.deleteLightbox\">\n            <div class=\"p-4 rounded bg-white\" style=\"width: 250px;\">\n                <p class=\"text-center fw-bold\">是否要刪除全部圖層</p>\n                <div class=\" d-flex justify-content-around\">\n                    <button class=\"rounded px-3 py-1 bg-steel text-white border-0\" @click=\"() => {\n                        layerControl({\n                            action: 'selectLayerMode',\n                            value: {\n                                layerName: 'all'\n                            }\n                        })\n                        state.deleteLightbox = false\n                    }\">確定</button>\n                    <button class=\"rounded px-3 py-1 bg-secondary bg-gradient text-white border-0\" @click=\"() => {\n                        state.deleteLightbox = false\n                    }\">取消</button>\n                </div>\n            </div>\n        </div>\n\n        <div id=\"popup\"\n        style=\"position: fixed;top: 100%; left: 100%;\"\n        :ref=\"(e)=>{\n            state.areaData.nodeRef = e\n        }\">\n            <areaData class=\"areaData\" v-if=\"state.areaData?.overlay\" :closeMapData=\"() => {\n                closeMapData()\n            }\" :tribeAreaData=\"state.areaData.tribeAreaData\" :maxHeight=\"500\" />\n        </div>\n    </div>\n</template>\n\n<style lang=\"sass\">\n@import '@/assets/styles/all.module.scss'\n.mapWrap\n    justify-content: space-between\n    height: 100vh\n\n.mapWrap .ol-viewport\n    height: 100vh\n    width: 100vw\n\n\n.asideTool\n    z-index: 220\n    left: 5px\n.SearchBar\n    position: absolute\n    top: 20px\n    left: 20px\n    z-index: 220\n.condition\n    width: 480px\n    right: 1%\n    bottom: 5%\n\n.mapSourceOption\n    position: fixed\n    top: 20px\n    right: 20px\n    z-index: 220\n\n.middleLine\n    width: 5px\n    background: $blue-steel\n\n\n.areaData\n    width: 450px\n    max-height: 500px\n    background: #fff\n    position: absolute\n    top: 50%\n    right: 50%\n    box-sizing: border-box\n#popup\n    border: 1px solid #088\n    border-radius: 10px\n    background-color: #0FF\n</style>\n"],"names":["_sfc_main","props","emit","state","reactive","node","index","computed","target","initMap","Map","baseMapList","defaultView","addPoint","targetLng","targetLat","Point","Style","Icon","mapControl","action","value","View","mainMap","xAxis","yAxis","layerControl","targetLayers","element","nestedSubNodeIndex","mapClickEvent","layersAry","toRemoveLayerId","nowTileLayer","mapLayers","layeredIndex","visibleStatus","newTileLayer","otherMap","otherLayersData","item","mapLayerList","ol3d","OLCesium","scene","ta","getCurrentLayerNames","delToMap","otherLayers","layers","_a","layer","onMapLayerStatus","id","click","selector","event","selectedFeatures","Overlay","feature","properties","key","onMounted","res","sub","subIndex","subNodeIndex","nestedSubIndex","nestedSub","FailMethod","_hoisted_1","_imports_0","_hoisted_5","_hoisted_6","_hoisted_11","_createElementVNode","_hoisted_12","_cache","$setup","_hoisted_3","_normalizeClass","_openBlock","_createElementBlock","_hoisted_4","_b","_hoisted_7","_createVNode","_component_condition","_mergeProps","_hoisted_9","_hoisted_10","e"],"mappings":"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"}