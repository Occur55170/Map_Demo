{"version":3,"file":"WebMap-daa635ca.js","sources":["../../src/assets/example-AddressData.jpg","../../src/assets/img/icon/vector.svg","../../src/components/areaData.vue","../../src/components/layerSelect.vue","../../src/config/mapLayerList.js","../../src/components/condition.vue","../../src/assets/img/icon/zoomIn.svg","../../src/assets/img/icon/zoomOut.svg","../../src/assets/img/icon/compass.svg","../../src/assets/img/icon/location.svg","../../src/assets/img/icon/zoom.svg","../../src/components/AsideTool.vue","../../src/components/mapSourceOption.vue","../../src/assets/img/icon/twoDimensional.svg","../../src/assets/img/icon/threeDimensional.svg","../../src/assets/img/icon/baseLayer.svg","../../src/assets/img/icon/singleWindow.svg","../../src/assets/img/icon/doubleWindows.svg","../../src/components/SearchBar.vue","../../src/assets/logo.svg","../../src/view/WebMap.vue"],"sourcesContent":["export default \"__VITE_ASSET__e32a2a13__\"","export default \"__VITE_ASSET__204bf141__\"","<script>\r\nimport { useSlots, onBeforeMount, onMounted, onUpdated, onBeforeUnmount, ref, reactive, computed, watch, nextTick, defineAsyncComponent, useCssModule, inject } from 'vue'\r\nimport $ from 'jquery'\r\nimport { compose } from 'ol/transform'\r\n\r\nexport default {\r\n    props: {\r\n        tribeId:{\r\n            Type: String,\r\n            default: 0\r\n        },\r\n        closeMapData: {\r\n            Type: Function,\r\n            default: ()=>{}\r\n        },\r\n        maxHeight: {\r\n            Type: Number,\r\n            default: 0\r\n        }\r\n    },\r\n    setup(props, { emit }){\r\n        const state = reactive({\r\n            media: 'photo',\r\n            scrollY: false,\r\n            tribeData: {},\r\n        })\r\n\r\n        async function getTribeData (tribeId) {\r\n            const result = await $.ajax({\r\n                url: `https://api.edtest.site/tribe?tribeCode=${tribeId}`,\r\n                method: \"GET\"\r\n            }).done(res => {\r\n                return res\r\n                }).fail(FailMethod => {\r\n                console.log('Fail', FailMethod)\r\n                return false\r\n                })\r\n            return result\r\n        }\r\n\r\n        onUpdated(props.tribeId, ()=>{\r\n            getTribeData(props.tribeId).then((result)=>{\r\n                state.tribeData = result\r\n            })\r\n        })\r\n\r\n\r\n        onMounted(()=>{\r\n            getTribeData(props.tribeId).then((result)=>{\r\n                state.tribeData = result\r\n            })\r\n        })\r\n\r\n        return {\r\n            props,\r\n            state,\r\n        }\r\n    }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n    <div class=\"bg-white rounded py-2 \" style=\"overflow-y: auto;\">\r\n        <div class=\"row mx-0 align-items-center flex-nowrap text-center p-2 fw-bold\">\r\n            <p>詳細資訊 {{ state.scrollY }}</p>\r\n            <!-- needfix:尚未加入關閉地圖資訊按鈕事件 -->\r\n            <div class=\"position-absolute col-auto end-0\" style=\"top: 10px;\" @click=\"closeMapData\">\r\n                <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\">\r\n                    <path fill=\"currentColor\" d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10s-4.477 10-10 10zm0-11.414L9.172 7.757L7.757 9.172L10.586 12l-2.829 2.828l1.415 1.415L12 13.414l2.828 2.829l1.415-1.415L13.414 12l2.829-2.828l-1.415-1.415L12 10.586z\"/>\r\n                </svg>\r\n            </div>\r\n        </div>\r\n        <img src=\"@/assets/example-AddressData.jpg\" class=\"w-100\" alt=\"\">\r\n        <div class=\"row mx-0 align-items-center p-2 position-relative\">\r\n            <p>title: {{ props.tribeId }} {{ state?.tribeData?.basicInformation?.tribeName }} </p>\r\n            <p>描述: {{ state?.tribeData?.basicInformation?.description }}</p>\r\n            <div class=\"position-absolute w-auto top-0 end-0 mt-2\">更多資訊</div>\r\n            <p>{{ state?.tribeData?.basicInformation?.area }}</p>\r\n            <a href=\"\">\r\n                <img src=\"@/assets/img/icon/vector.svg\" alt=\"\">\r\n                {{ state?.tribeData?.basicInformation?.coordinates?.WGS84?.lat}}\r\n                ,\r\n                {{state?.tribeData?.basicInformation?.coordinates?.WGS84?.lng }}\r\n            </a>\r\n        </div>\r\n        <div>\r\n            <div class=\"border-bottom row flex-nowrap p-2 my-3 cursor-pointer mx-0\">\r\n                <div class=\"col-6 cursor-pointer\" @click=\"state.media = 'photo'\">相片</div>\r\n                <div class=\"col-6 cursor-pointer\" @click=\"state.media = 'video'\">影片</div>\r\n            </div>\r\n            <div class=\"py-2 px-4\" v-if=\"state.media === 'photo'\">\r\n                <div class=\"d-flex flex-wrap justify-content-between\">\r\n                    <div class=\"w-50 mb-4\" v-for=\"item in state?.tribeData?.culturalLandscape\">\r\n                        <p class=\"mb-0\">{{ item.name }}</p>\r\n                        <img :src=\"item.image\" alt=\"\" class=\"w-100\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"py-2 px-4\" v-if=\"state.media === 'video'\">\r\n                <div>影片影片影片影片影片影片</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style lang=\"sass\" scoped>\r\n@import '@/assets/styles/all.module.scss'\r\n\r\n// .lightbox\r\n//     top: 20%\r\n//     left: 50%\r\n</style>\r\n","<script>\r\nimport { useSlots, onBeforeMount, onMounted, onBeforeUnmount, ref, reactive, computed, watch, nextTick, defineAsyncComponent, useCssModule, inject } from 'vue'\r\nimport $ from 'jquery'\r\nimport { Layer } from 'ol/layer'\r\n\r\nexport default {\r\n    props: {\r\n        onClose: {\r\n            type: Function,\r\n            default: ()=>{}\r\n        },\r\n        onChangLayerVisible: {\r\n            type: Function,\r\n            default: ()=>{}\r\n        },\r\n        onDeleteLayer: {\r\n            type: Function,\r\n            default: ()=>{}\r\n        },\r\n        onLockLayer: {\r\n            type: Function,\r\n            default: ()=>{}\r\n        },\r\n        onChangeOrderLayer: {\r\n            type: Function,\r\n            default: ()=>{}\r\n        },\r\n        currentLayers: {\r\n            type: Array,\r\n            default: []\r\n        },\r\n        selectLock: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n    setup(props, { emit }) {\r\n        const state = reactive({\r\n        })\r\n\r\n        return {\r\n            props,\r\n            state,\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<template>\r\n    <div class=\"rounded-4 bg-white\">\r\n        <div class=\"row mx-0 align-items-center flex-nowrap text-center p-2 fw-bold\">\r\n            <p class=\"mb-0 fs-5\">已選擇的圖層</p>\r\n            <a href=\"\" class=\"closeBtn position-absolute col-auto\" @click.prevent=\"props.onClose\">\r\n                <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10s-4.477 10-10 10zm0-11.414L9.172 7.757L7.757 9.172L10.586 12l-2.829 2.828l1.415 1.415L12 13.414l2.828 2.829l1.415-1.415L13.414 12l2.829-2.828l-1.415-1.415L12 10.586z\"/></svg>\r\n            </a>\r\n        </div>\r\n        <hr class=\"my-0\">\r\n        <div class=\"py-3 px-4 content\">\r\n            <div class=\"allControl d-flex align-items-center justify-content-end mb-0\">\r\n                <a href=\"\" class=\"d-flex align-items-center text-decoration-none me-4\"\r\n                :class=\"{'lockUp': props.selectLock, 'unlock': !props.selectLock}\"\r\n                @click.prevent=\"()=>{\r\n                    props.onLockLayer()\r\n                }\">\r\n                    <svg viewBox=\"0 0 25 24\" fill=\"currentColor\">\r\n                        <path d=\"M8.02381 9.33333H14.881V7.80952C14.881 7.1746 14.6587 6.63492 14.2143 6.19048C13.7698 5.74603 13.2302 5.52381 12.5952 5.52381C11.9603 5.52381 11.4206 5.74603 10.9762 6.19048C10.5317 6.63492 10.3095 7.1746 10.3095 7.80952H8.78571C8.78571 6.75556 9.15727 5.85702 9.90038 5.1139C10.643 4.3713 11.5413 4 12.5952 4C13.6492 4 14.5477 4.3713 15.2909 5.1139C16.0335 5.85702 16.4048 6.75556 16.4048 7.80952V9.33333H17.1667C17.5857 9.33333 17.9446 9.48241 18.2432 9.78057C18.5414 10.0792 18.6905 10.4381 18.6905 10.8571V18.4762C18.6905 18.8952 18.5414 19.2541 18.2432 19.5528C17.9446 19.8509 17.5857 20 17.1667 20H8.02381C7.60476 20 7.24616 19.8509 6.948 19.5528C6.64933 19.2541 6.5 18.8952 6.5 18.4762V10.8571C6.5 10.4381 6.64933 10.0792 6.948 9.78057C7.24616 9.48241 7.60476 9.33333 8.02381 9.33333ZM12.5952 16.1905C13.0143 16.1905 13.3731 16.0414 13.6718 15.7432C13.97 15.4446 14.119 15.0857 14.119 14.6667C14.119 14.2476 13.97 13.8888 13.6718 13.5901C13.3731 13.2919 13.0143 13.1429 12.5952 13.1429C12.1762 13.1429 11.8176 13.2919 11.5194 13.5901C11.2208 13.8888 11.0714 14.2476 11.0714 14.6667C11.0714 15.0857 11.2208 15.4446 11.5194 15.7432C11.8176 16.0414 12.1762 16.1905 12.5952 16.1905Z\" />\r\n                    </svg>\r\n                    鎖定圖層\r\n                </a>\r\n                <a href=\"\" class=\"d-flex align-items-center text-decoration-none\"\r\n                :class=\"{'disabled':props.currentLayers.length <= 1}\"\r\n                @click.prevent=\"()=>{\r\n                    if (props.currentLayers.length > 0) {\r\n                        props.onDeleteLayer({\r\n                            action: 'selectLayerMode',\r\n                            value: {\r\n                                layerName: 'all'\r\n                            }\r\n                        })\r\n                    }\r\n                }\">\r\n                    <svg viewBox=\"0 0 25 24\" fill=\"currentColor\">\r\n                        <path d=\"M7.5 21C6.95 21 6.47933 20.8043 6.088 20.413C5.696 20.021 5.5 19.55 5.5 19V6H4.5V4H9.5V3H15.5V4H20.5V6H19.5V19C19.5 19.55 19.3043 20.021 18.913 20.413C18.521 20.8043 18.05 21 17.5 21H7.5ZM9.5 17H11.5V8H9.5V17ZM13.5 17H15.5V8H13.5V17Z\" />\r\n                    </svg>\r\n                    全部刪除\r\n                </a>\r\n            </div>\r\n            <ul class=\"list-unstyled d-flex flex-wrap flex-column-reverse\">\r\n                <li v-for=\"(node, nodeIndex) in props.currentLayers\">\r\n                    <div class=\"d-flex justify-content-between align-items-center border-bottom py-2\" v-if=\"node.id\">\r\n                        <div>\r\n                            {{ node?.label }}\r\n                        </div>\r\n                        <div class=\"tool\">\r\n                            <a href=\"\"\r\n                            @click.prevent=\"props.onChangeOrderLayer({\r\n                                action: 'changeOrder',\r\n                                value: {\r\n                                    movement:'up',\r\n                                    id: node.id,\r\n                                    key: nodeIndex\r\n                                },\r\n                            })\">\r\n                                <svg viewBox=\"0 0 25 24\" fill=\"currentColor\">\r\n                                    <path d=\"M9.49991 19.84H15.4999V11.84H20.3399L12.4999 4.00003L4.65991 11.84H9.49991V19.84Z\" fill=\"#808080\" />\r\n                                </svg>\r\n                            </a>\r\n                            <a href=\"\"\r\n                            @click.prevent=\"props.onChangeOrderLayer({\r\n                                action: 'changeOrder',\r\n                                value: {\r\n                                    movement: 'down',\r\n                                    id: node.id,\r\n                                    key: nodeIndex\r\n                                }\r\n                            })\">\r\n                                <svg viewBox=\"0 0 25 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <path d=\"M9.49991 4H15.4999V12H20.3399L12.4999 19.84L4.65991 12H9.49991V4Z\" fill=\"#808080\"/>\r\n                                </svg>\r\n                            </a>\r\n                            <a href=\"\"\r\n                            :class=\"{\r\n                                'Invisible': !node?.visible\r\n                            }\"\r\n                            @click.prevent=\"()=>{\r\n                                props.onChangLayerVisible({\r\n                                    action: 'changeLayerVisible',\r\n                                    value: {\r\n                                        key: nodeIndex,\r\n                                    }\r\n                                })\r\n                            }\">\r\n                                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                                    <path d=\"M12.3333 10C11.8029 10 11.2942 10.2107 10.9191 10.5858C10.544 10.9609 10.3333 11.4696 10.3333 12C10.3333 12.5304 10.544 13.0391 10.9191 13.4142C11.2942 13.7893 11.8029 14 12.3333 14C12.8638 14 13.3725 13.7893 13.7475 13.4142C14.1226 13.0391 14.3333 12.5304 14.3333 12C14.3333 11.4696 14.1226 10.9609 13.7475 10.5858C13.3725 10.2107 12.8638 10 12.3333 10ZM12.3333 15.3333C11.4493 15.3333 10.6014 14.9821 9.97631 14.357C9.35119 13.7319 9 12.8841 9 12C9 11.1159 9.35119 10.2681 9.97631 9.64298C10.6014 9.01786 11.4493 8.66667 12.3333 8.66667C13.2174 8.66667 14.0652 9.01786 14.6904 9.64298C15.3155 10.2681 15.6667 11.1159 15.6667 12C15.6667 12.8841 15.3155 13.7319 14.6904 14.357C14.0652 14.9821 13.2174 15.3333 12.3333 15.3333ZM12.3333 7C9 7 6.15333 9.07333 5 12C6.15333 14.9267 9 17 12.3333 17C15.6667 17 18.5133 14.9267 19.6667 12C18.5133 9.07333 15.6667 7 12.3333 7Z\" fill=\"#808080\"/>\r\n                                </svg>\r\n                            </a>\r\n                            <a href=\"\"\r\n                            @click.prevent=\"props.onDeleteLayer({\r\n                                action: 'selectLayerMode',\r\n                                value: {\r\n                                    id: node?.id,\r\n                                }\r\n                            })\">\r\n                                <svg viewBox=\"0 0 25 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <path d=\"M7.5 21C6.95 21 6.47933 20.8043 6.088 20.413C5.696 20.021 5.5 19.55 5.5 19V6H4.5V4H9.5V3H15.5V4H20.5V6H19.5V19C19.5 19.55 19.3043 20.021 18.913 20.413C18.521 20.8043 18.05 21 17.5 21H7.5ZM9.5 17H11.5V8H9.5V17ZM13.5 17H15.5V8H13.5V17Z\" fill=\"#808080\"/>\r\n                                </svg>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style lang=\"sass\" scoped>\r\n@import '@/assets/styles/all.module.scss'\r\n.closeBtn\r\n    right:10px\r\n    svg\r\n        width: 20px\r\n        height: 20px\r\n.content\r\n    .title\r\n        cursor: pointer\r\n        svg\r\n            transform: rotateZ(0)\r\n        .openTitle\r\n            transform: rotateZ(90deg)\r\n    svg\r\n        width: 28px\r\n        height: 28px\r\n    img\r\n        width: 16px\r\n        height: 16px\r\n.tool\r\n    a\r\n        padding: 5px 0\r\n    .visible\r\n        color: red\r\n    .Invisible\r\n        color: blue\r\n        position: relative\r\n        &::after\r\n            content: ''\r\n            position: absolute\r\n            top: 55%\r\n            left: 20%\r\n            width: 60%\r\n            height: 2px\r\n            background: $grey\r\n            transform-origin: 50% 50%\r\n            transform: rotateZ(45deg)\r\n            display: block\r\n.allControl\r\n    a\r\n        color: $grey\r\n    .lockUp\r\n        color: #247BA0\r\n    .unlock\r\n        color: $grey\r\n</style>\r\n","import { useSlots, onBeforeMount, onMounted, onBeforeUnmount, ref, reactive, computed, watch, nextTick, defineAsyncComponent, useCssModule, inject, getCurrentInstance } from 'vue'\r\nimport $ from 'jquery'\r\n\r\nimport { Map, View, Feature } from 'ol' // 引入容器绑定模塊和視圖模塊\r\n\r\nimport { TileArcGISRest } from 'ol/source.js'\r\n\r\nimport XYZ from 'ol/source/XYZ' // 引入XYZ地圖格式\r\nimport VectorSource from 'ol/source/Vector.js'\r\nimport { Fill, Stroke, Style, Icon } from 'ol/style.js'\r\nimport { Tile, Tile as TileLayer, Image as ImageLayer, Vector, Vector as VectorLayer } from 'ol/layer.js'\r\nimport TileWMS from 'ol/source/TileWMS.js'\r\nimport ImageWMS from 'ol/source/ImageWMS.js'\r\nimport TileGrid from 'ol/tilegrid/TileGrid.js'\r\nimport * as olTilegrid from 'ol/tilegrid'\r\nimport * as olProj from 'ol/proj'\r\n\r\nimport { ImageArcGISRest, OSM } from 'ol/source.js'\r\nimport PerspectiveMap from \"ol-ext/map/PerspectiveMap\"\r\n\r\nimport WFS from 'ol/format/WFS.js'\r\nimport EsriJSON from 'ol/format/EsriJSON.js'\r\nimport { createXYZ } from 'ol/tilegrid.js'\r\nimport { tile as tileStrategy } from 'ol/loadingstrategy.js'\r\nimport { Circle, Polygon, Point } from 'ol/geom.js'\r\nimport Projection from 'ol/proj/Projection.js'\r\nimport GeoJSON from 'ol/format/GeoJSON.js'\r\n\r\nimport 'ol/ol.css' // ol提供的css样式\r\nimport { format } from 'ol/coordinate'\r\nimport { get as getProjection, transformExtent } from 'ol/proj.js'\r\nimport { getTopLeft, getWidth } from 'ol/extent.js'\r\nexport const tribeIdList = [ 88, 89, 90, 91, 133, 118, 119, 134 ]\r\n\r\n\r\nexport const initLayers = async function() {\r\n    const obj = await $.ajax({\r\n        url: 'https://api.edtest.site/layers',\r\n        method: 'GET'\r\n    })\r\n    return obj\r\n}\r\n\r\nexport async function getTribeData (tribeId) {\r\n    return await $.ajax({\r\n        url: `https://api.edtest.site/tribe?tribeCode=${tribeId}`,\r\n        method: \"GET\"\r\n    })\r\n}\r\n\r\nexport default {\r\n    getLayer: (layer, nestedSubNodeIndex, id) => {\r\n        let result, layerSource\r\n        let layerType = layer.layer_type\r\n        let figureType = layer.figure_type\r\n        if (layerType === 'WMS') {\r\n            let request = []\r\n            const url = layer.single_tiles ? layer.tiles_url : layer.tiles_list[nestedSubNodeIndex].tile_url\r\n            switch (figureType) {\r\n                case 'Point':\r\n                    if ( url ) {\r\n                        const api = new URL(url)\r\n                        // 取得網址部分\r\n                        const origin = api.origin\r\n                        const pathname = api.pathname\r\n\r\n                        // 取得query參數\r\n                        const searchParams = api.searchParams;\r\n                        const searchParamsObject = {};\r\n                        for (const [key, value] of searchParams.entries()) {\r\n                            searchParamsObject[key] = value;\r\n                        }\r\n                        request[0] = origin + pathname\r\n                        request[1] = searchParamsObject\r\n                    }\r\n                    layerSource = new TileWMS({\r\n                        maxzoom: 18,\r\n                        minzoom: 3,\r\n                        url: request[0],\r\n                        params: request[1],\r\n                        serverType: 'mapserver',\r\n                        crossOrigin: 'anonymous',\r\n                    })\r\n                    break;\r\n                case 'Surface':\r\n                    if ( url ) {\r\n                        const api = new URL(url)\r\n                        // 取得網址部分\r\n                        const origin = api.origin\r\n                        const pathname = api.pathname\r\n\r\n                        // 取得query參數\r\n                        const searchParams = api.searchParams;\r\n                        const searchParamsObject = {};\r\n                        for (const [key, value] of searchParams.entries()) {\r\n                            searchParamsObject[key] = value;\r\n                        }\r\n                        request[0] = origin + pathname\r\n                        request[1] = searchParamsObject\r\n                    }\r\n                    layerSource = new TileWMS({\r\n                        maxzoom: 18,\r\n                        minzoom: 3,\r\n                        url: request[0],\r\n                        params:  request[1],\r\n                        serverType: 'mapserver'\r\n                    })\r\n                    break;\r\n                    case 'Line':\r\n                        // 活動斷層\r\n                        if ( url ) {\r\n                            const api = new URL(url)\r\n                            // 取得網址部分\r\n                            const origin = api.origin\r\n                            const pathname = api.pathname\r\n\r\n                            // 取得query參數\r\n                            const searchParams = api.searchParams;\r\n                            const searchParamsObject = {};\r\n                            for (const [key, value] of searchParams.entries()) {\r\n                                searchParamsObject[key] = value;\r\n                            }\r\n                            request[0] = origin + pathname\r\n                            request[1] = searchParamsObject\r\n                        }\r\n                        layerSource = new TileWMS({\r\n                            maxzoom: 18,\r\n                            minzoom: 3,\r\n                            url: request[0],\r\n                            params: request[1],\r\n                            serverType: 'mapserver'\r\n                        })\r\n                        break;\r\n                default:\r\n                    console.log('otherWMSLayer', figureType)\r\n            }\r\n            let tileTitle = layer.single_tiles ? '' : `- ${ layer.tiles_list[nestedSubNodeIndex]?.title }`\r\n            result = new TileLayer({\r\n                id: id,\r\n                label: `${ layer.title } ${ tileTitle }`,\r\n                source: new TileWMS({\r\n                    name: layer.title,\r\n                    url: layerSource.getUrls()[0],\r\n                    params: layerSource.getParams(),\r\n                    serverType: 'geoserver',\r\n                    crossOrigin: 'anonymous',\r\n                }),\r\n            })\r\n        }\r\n        // needfix: 結構混亂\r\n        if (layerType === 'GeoJson') {\r\n            console.log('GeoJsonLayer', figureType)\r\n            switch (figureType) {\r\n                case 'Line':\r\n                    result = new VectorLayer({\r\n                        source: new VectorSource({\r\n                            url: 'http://gis.edtest.site:8010/ogc/temp',\r\n                            params: {\r\n                                // http://gis.edtest.site:8010/ogc/temp\r\n                                SERVICE: 'WMS',\r\n                                VERSION: '1.3.0',\r\n                                REQUEST: 'GetMap',\r\n                                FORMAT: 'image/png',\r\n                                STYLE: 'default',\r\n                                SLD_VERSION: '1.1.0'\r\n                                // LAYER: '%E6%96%B0%E7%AB%B9%E7%B8%A3%E5%8E%9F%E4%BD%8F%E6%B0%91%E9%83%A8%E8%90%BD%E7%AF%84%E5%9C%8D',\r\n                            }\r\n                            // url: 'https://dmap.ncdr.nat.gov.tw/GeoJson/土石流潛勢溪流.geojson',\r\n                            // url: 'https://openlyersbook.github.io/openlayers_book_samples/assets/data/countries.geojson',\r\n                            // format: new GeoJSON(),\r\n                        }),\r\n                    });\r\n                    break;\r\n                case 'Point':\r\n                    const wmsSource = new TileWMS({\r\n                        maxzoom: 18,\r\n                        minzoom: 3,\r\n                        url: 'https://dwgis1.ncdr.nat.gov.tw/server/services/MAP0627/Map2022FloodingPoint1721/MapServer/WMSServer',\r\n                        params: {\r\n                            'SERVICE': 'WMS',\r\n                            'BGCOLOR': '0xFFFFFF',\r\n                            'TRANSPARENT': 'TRUE',\r\n                            'SRS': 'EPSG:3826',\r\n                            'LAYERS': '0',\r\n                            'VERSION': '1.1.1',\r\n                            'FORMAT': 'image/png',\r\n                        },\r\n                        crossOrigin: 'anonymous',\r\n                    })\r\n                    result = new TileLayer({\r\n                        source: wmsSource,\r\n                    })\r\n\r\n                    // help_btn_display:true\r\n                    // help_memo:\"<p>資料來源:國家災害防救科技中心</p>\\n<p>收整水利署、新聞、媒體及現勘資料2017年~2021年</p>\"\r\n                    break;\r\n                default:\r\n                    console.log(figureType)\r\n            }\r\n        }\r\n\r\n        return result\r\n    },\r\n    getLayerIndex: (layeredIndex) => {\r\n        let nodeIndex, subNodeIndex = undefined, nestedSubNodeIndex = undefined\r\n        layeredIndex.split('_').forEach((element, key)=>{\r\n            switch(key) {\r\n                case 0:\r\n                    nodeIndex = Number(element.split('node')[1])\r\n                    break;\r\n                case 1:\r\n                    subNodeIndex = Number(element.split('subNode')[1])\r\n                    break;\r\n                case 2:\r\n                    nestedSubNodeIndex = element.split('nestedSubNode')[1] !== 'undefined' ? Number(element.split('nestedSubNode')[1]) : 'undefined'\r\n                    break;\r\n            }\r\n        })\r\n        return {nodeIndex, subNodeIndex, nestedSubNodeIndex, layeredIndex}\r\n    },\r\n}\r\n","<script>\r\nimport { useSlots, onBeforeMount, onMounted, onBeforeUnmount, ref, reactive, computed, watch, nextTick, defineAsyncComponent, useCssModule, inject } from 'vue'\r\nimport $ from 'jquery'\r\n\r\nimport mapLayerList, { initLayers } from '@/config/mapLayerList'\r\nimport baseMapList from '@/config/baseMapList'\r\nimport VectorImageLayer from 'ol/layer/VectorImage.js'\r\nimport TileState from 'ol/TileState.js'\r\nimport { useRouter } from 'vue-router'\r\n\r\n\r\nimport 'ol-ext/dist/ol-ext.css'\r\n\r\nexport default {\r\n    props: {\r\n        onClose: {\r\n            type: Function,\r\n            default: () => {}\r\n        },\r\n        mapLayers: {\r\n            type: Array,\r\n            default: []\r\n        },\r\n        currentLayers: {\r\n            type: Array,\r\n            default: []\r\n        },\r\n        showSelectLayerValue: {\r\n            type: Function,\r\n            default: () => {}\r\n        },\r\n    },\r\n    setup(props, { emit }) {\r\n        const mapLayers = mapLayerList\r\n        const router = useRouter()\r\n        const state = reactive({\r\n            DropDown: null,\r\n            TilesListValue: 0\r\n        })\r\n\r\n        function onMapControl(action, value) {\r\n            emit('onMapControl', { action, value })\r\n        }\r\n\r\n        function onLayerControl(action, value) {\r\n            emit('onLayerControl', { action, value })\r\n        }\r\n        function openLayerList(value) {\r\n            if (state.DropDown !== value) {\r\n                state.DropDown = value\r\n            } else {\r\n                state.DropDown = null\r\n            }\r\n        }\r\n        function LayerCheckBoxChange(e, item) {\r\n            let defaultChecked = e.target.checked || ((typeof e.target.checked == 'undefined') ? true : false )\r\n            onLayerControl('layerMode', {\r\n                checked: defaultChecked,\r\n                nodeIndex: item.nodeIndex,\r\n                subNodeIndex: item.subNodeIndex,\r\n                nestedSubNodeIndex: String(item.nestedSubNodeIndex) ? item.nestedSubNodeIndex : undefined,\r\n                nestedSubNode: String(item.nestedSubNodeIndex) ? true : false,\r\n                id: item.id\r\n            })\r\n        }\r\n\r\n        function checkTribe(e) {\r\n            let defaultChecked = e.target.checked || ((typeof e.target.checked == 'undefined') ? true : false )\r\n            onLayerControl('layerMode', {\r\n                checked: defaultChecked,\r\n            })\r\n        }\r\n\r\n        watch(()=>state.TilesListValue, (newVal , oldVal)=>{\r\n            props.showSelectLayerValue(newVal)\r\n        })\r\n\r\n        return {\r\n            props,\r\n            state,\r\n            router,\r\n            mapLayers,\r\n            onMapControl,\r\n            onLayerControl,\r\n            openLayerList,\r\n            LayerCheckBoxChange,\r\n            checkTribe\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<template>\r\n    <div class=\"rounded-4 bg-white\">\r\n        <div class=\"row mx-0 align-items-center flex-nowrap text-center p-2 fw-bold border-bottom\">\r\n            <p class=\"mb-0 fs-5\">圖層選項</p>\r\n            <a href=\"\" class=\"closeBtn position-absolute col-auto\" @click.prevent=\"props.onClose\">\r\n                <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\">\r\n                    <path fill=\"currentColor\"\r\n                        d=\"M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10s-4.477 10-10 10zm0-11.414L9.172 7.757L7.757 9.172L10.586 12l-2.829 2.828l1.415 1.415L12 13.414l2.828 2.829l1.415-1.415L13.414 12l2.829-2.828l-1.415-1.415L12 10.586z\" />\r\n                </svg>\r\n            </a>\r\n        </div>\r\n        <div class=\"py-3 px-4 content\">\r\n            <div class=\"mb-2 landBoundary\">\r\n                <div @click=\"router.push({ path: '/Map_Demo/detail' })\" class=\"my-3 fw-bold h5 text-primary cursor-pointer\">前往地圖細節</div>\r\n                <div v-for=\"(node, nodeIndex) in props.mapLayers\" class=\"mb-2\">\r\n                    <div class=\"title d-flex align-items-center fw-bold text-black order-1 mb-1 text-decoration-none\"\r\n                        @click=\"openLayerList(nodeIndex)\">\r\n                        <div :class=\"node.groupClass\"></div>\r\n                        <div>{{ node.label }}</div>\r\n                        <svg viewBox=\"0 0 24 24\" :class=\"{ 'openTitle': state.DropDown == nodeIndex }\">\r\n                            <path fill=\"currentColor\" d=\"M8 5v14l11-7z\" />\r\n                        </svg>\r\n                    </div>\r\n                    <div class=\"ms-3 mb-1\" v-for=\"(subNode, subNodeIndex) in node.layers\" v-if=\"state.DropDown == nodeIndex\">\r\n                        <div v-if=\"subNode.single_tiles\">\r\n                            <input type=\"checkbox\"\r\n                            :checked=\"props.currentLayers.some(node=> node.id === subNode.id)\"\r\n                            @change=\"(e) => {\r\n                                LayerCheckBoxChange(e, {\r\n                                    nodeIndex: nodeIndex,\r\n                                    subNode: subNode,\r\n                                    subNodeIndex: subNodeIndex,\r\n                                    nestedSubNodeIndex: '',\r\n                                    id: subNode.id\r\n                                })\r\n                            }\">\r\n                            {{ subNode.title }}\r\n                        </div>\r\n                        <div v-else>\r\n                            <input type=\"checkbox\"\r\n                            :checked=\"props.currentLayers.some(node=> node.id === subNode.id)\"\r\n                            @change=\"(e) => {\r\n                                LayerCheckBoxChange(e, {\r\n                                    nodeIndex: nodeIndex,\r\n                                    subNode: subNode,\r\n                                    subNodeIndex: subNodeIndex,\r\n                                    nestedSubNodeIndex: '',\r\n                                    id: subNode.id\r\n                                })\r\n                            }\">\r\n                            {{ subNode.title }}\r\n                                <select name=\"\" id=\"\" class=\"ms-3\"\r\n                                v-model=\"state.TilesListValue\"\r\n                                @change=\"(e) => {\r\n                                    LayerCheckBoxChange(e, {\r\n                                        nodeIndex: nodeIndex,\r\n                                        subNode: subNode,\r\n                                        subNodeIndex: subNodeIndex,\r\n                                        nestedSubNodeIndex: state.TilesListValue,\r\n                                        id: subNode.id\r\n                                    })\r\n                                }\">\r\n                                    <option :value=\"key\" v-for=\"(item, key) in subNode.tiles_list\">{{ item.title }}</option>\r\n                                </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style lang=\"sass\" scoped>\r\n// @import '@/assets/styles/all.module.scss'\r\n.closeBtn\r\n    right:10px\r\n    svg\r\n        width: 20px\r\n        height: 20px\r\n.content\r\n    .title\r\n        cursor: pointer\r\n        svg\r\n            transform: rotateZ(0)\r\n        .openTitle\r\n            transform: rotateZ(90deg)\r\n    svg\r\n        width: 20px\r\n        height: 20px\r\n    img\r\n        width: 16px\r\n        height: 16px\r\n    .wrap\r\n        display: none\r\n</style>","export default \"__VITE_ASSET__a8c0f6d0__\"","export default \"__VITE_ASSET__630fe15b__\"","export default \"__VITE_ASSET__7e8d4017__\"","export default \"__VITE_ASSET__0ebcb08a__\"","export default \"__VITE_ASSET__185ae262__\"","<script>\r\nimport { useSlots, onBeforeMount, onMounted, onBeforeUnmount, ref, reactive, computed, watch, nextTick, defineAsyncComponent, useCssModule, inject } from 'vue'\r\nexport default {\r\n    props: {\r\n        id:{\r\n            Type: String,\r\n            default: 0\r\n        },\r\n        map:{}\r\n    },\r\n    setup(props, { emit }){\r\n\r\n        function onMapControl(action) {\r\n            emit('onMapControl', {action})\r\n        }\r\n\r\n        return {\r\n            onMapControl\r\n        }\r\n    }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n    <div class=\"d-flex flex-nowrap flex-column\">\r\n        <a href=\"\" class=\"asideTool-btn order-1 mb-0\" @click.prevent=\"onMapControl('In')\">\r\n            <img src=\"@/assets/img/icon/zoomIn.svg\" alt=\"zoomIn\">\r\n        </a>\r\n        <a href=\"\" class=\"asideTool-btn order-1 mb-2\" @click.prevent=\"onMapControl('Out')\">\r\n            <img src=\"@/assets/img/icon/zoomOut.svg\" alt=\"zoomOut\">\r\n        </a>\r\n        <a href=\"\" class=\"asideTool-btn order-1 mb-2\" @click.prevent=\"onMapControl('toNorth')\">\r\n            <img src=\"@/assets/img/icon/compass.svg\" alt=\"compass\">\r\n        </a>\r\n        <a href=\"\" class=\"asideTool-btn order-1 mb-2\" @click.prevent=\"onMapControl('moveTo')\">\r\n            <img src=\"@/assets/img/icon/location.svg\" alt=\"location\">\r\n        </a>\r\n        <a href=\"\" class=\"asideTool-btn order-1 mb-2\" @click.prevent=\"onMapControl('fullScreen')\">\r\n            <img src=\"@/assets/img/icon/zoom.svg\" alt=\"zoom\">\r\n        </a>\r\n    </div>\r\n</template>\r\n\r\n<style lang=\"sass\">\r\n\r\n</style>\r\n","<script>\r\nimport { useSlots, onBeforeMount, onMounted, onBeforeUnmount, ref, reactive, computed, watch, nextTick, defineAsyncComponent, useCssModule, inject, getCurrentInstance } from 'vue'\r\nexport default {\r\n    props: {\r\n        baseMapsOptions: {\r\n            type: Array,\r\n            default: []\r\n        },\r\n        onChangeBaseMaps: {\r\n            type: Function,\r\n            default: ()=>{}\r\n        }\r\n    },\r\n    setup(props, { emit }) {\r\n        const state = reactive({\r\n            selectMap: props.baseMapsOptions[0]\r\n        })\r\n        function onChangeBaseMaps(name){\r\n            let action = 'baseMap'\r\n            let value = {\r\n                checked: true,\r\n                layerName: state.selectMap\r\n            }\r\n            emit('onChangeBaseMaps', { action, value })\r\n        }\r\n        return {\r\n            state,\r\n            props,\r\n            onChangeBaseMaps\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<template>\r\n    <div>\r\n        <select name=\"\" id=\"\" v-model=\"state.selectMap\"\r\n        @change=\"(e) => {\r\n            onChangeBaseMaps()\r\n        }\">\r\n            <option :value=\"node.name\" v-for=\"(node, node_i) in props.baseMapsOptions\">{{ node.label }}</option>\r\n        </select>\r\n    </div>\r\n</template>\r\n\r\n<style lang=\"sass\" scoped>\r\nselect\r\n    border: 0\r\n    box-shadow: 0px 4px 4px #999\r\n    border-radius: 5px\r\n    padding: 8px 20px\r\n    option\r\n        padding: 8px 20px\r\n</style>\r\n","export default \"__VITE_ASSET__4d1de3c5__\"","export default \"__VITE_ASSET__e0369fb4__\"","export default \"__VITE_ASSET__9216d299__\"","export default \"__VITE_ASSET__f20fa25d__\"","export default \"__VITE_ASSET__62f11e0f__\"","<script>\r\nimport { useSlots, onBeforeMount, onMounted, onBeforeUnmount, ref, reactive, computed, watch, nextTick, defineAsyncComponent, useCssModule, inject } from 'vue'\r\nimport $ from 'jquery'\r\n\r\nexport default {\r\n    props: {\r\n        currentLayers: {\r\n            type: Array,\r\n            default: []\r\n        },\r\n        mapCount: {\r\n            type: Number,\r\n            default: 1\r\n        },\r\n        dimensionMapStatus: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n    setup(props, { emit }) {\r\n        const state = reactive({\r\n            toolSwitch: {\r\n                threeDimensionalBtn: false,\r\n                layerConditionBtn: false,\r\n                splitWindowBtn: false,\r\n            },\r\n            targetNum: 1,\r\n        })\r\n\r\n        function toolSwitch(target, value) {\r\n            // 其他全部關掉\r\n            Object.keys(state.toolSwitch).forEach(node => {\r\n                if (node === target) {\r\n                    if(state.toolSwitch[target]) {\r\n                        state.toolSwitch[target] = false\r\n                    } else {\r\n                        state.toolSwitch[target] = true\r\n                    }\r\n                } else {\r\n                    state.toolSwitch[node] = false\r\n                }\r\n            })\r\n        }\r\n        function onLayerControl(action, value) {\r\n            if (action === 'changeMapCount') {\r\n                state.toolSwitch['splitWindowBtn'] = false\r\n            }\r\n            emit('onLayerControl', { action, value })\r\n        }\r\n\r\n        function conditionWrap() {\r\n            emit('conditionWrap')\r\n        }\r\n\r\n        function onChangeTarget(value) {\r\n            state.targetNum = value\r\n            emit('onChangeTarget', value)\r\n        }\r\n\r\n        return {\r\n            props,\r\n            state,\r\n            toolSwitch,\r\n            onLayerControl,\r\n            conditionWrap,\r\n            onChangeTarget\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<template>\r\n    <div>\r\n        <ul class=\"list-unstyled d-flex align-items-center flex-nowrap w-full\">\r\n            <li class=\"me-4 position-relative\">\r\n                <div class=\"MapFeatureBtn text-white\">\r\n                    <a href=\"\" v-if=\"props.dimensionMapStatus\"\r\n                    @click.prevent=\"toolSwitch('threeDimensionalBtn'), onLayerControl('changeDimensionMap', '3D')\">\r\n                        <img src=\"@/assets/img/icon/twoDimensional.svg\">\r\n                    </a>\r\n                    <a href=\"\" v-else\r\n                    @click.prevent=\"toolSwitch('threeDimensionalBtn'), onLayerControl('changeDimensionMap', '2D')\">\r\n                        <img src=\"@/assets/img/icon/threeDimensional.svg\">\r\n                    </a>\r\n                </div>\r\n            </li>\r\n            <li class=\"me-4 position-relative\">\r\n                <a href=\"\" class=\"MapFeatureBtn text-white\"\r\n                    @click.prevent=\"toolSwitch('layerConditionBtn'), conditionWrap()\">\r\n                    <img src=\"@/assets/img/icon/baseLayer.svg\" alt=\"\">\r\n                </a>\r\n            </li>\r\n            <li class=\"me-4 position-relative\">\r\n                <a href=\"\" class=\"MapFeatureBtn text-white\" @click.prevent=\"toolSwitch('splitWindowBtn')\">\r\n                    <img src=\"@/assets/img/icon/singleWindow.svg\" alt=\"\" v-if=\"props.mapCount === 1\">\r\n                    <img src=\"@/assets/img/icon/doubleWindows.svg\" alt=\"\" v-if=\"props.mapCount === 2\">\r\n                </a>\r\n                <ul class=\"list-unstyled position-absolute start-0 top-100 p-0\" v-if=\"state.toolSwitch.splitWindowBtn\">\r\n                    <li class=\"mt-2\">\r\n                        <a href=\"\" class=\"text-white MapFeatureBtn\" @click.prevent=\"onLayerControl('changeMapCount', 1)\">\r\n                            <img src=\"@/assets/img/icon/singleWindow.svg\" alt=\"\">\r\n                        </a>\r\n                    </li>\r\n                    <li class=\"mt-2\">\r\n                        <a href=\"\" class=\"text-white MapFeatureBtn\" @click.prevent=\"onLayerControl('changeMapCount', 2)\">\r\n                            <img src=\"@/assets/img/icon/doubleWindows.svg\" alt=\"\">\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n\r\n        <div class=\"switchControl d-flex position-fixed rounded-pill translate-middle-x p-2\" id=\"switchControl\" style=\"z-index: 99;\">\r\n            <div class=\"fs-3 text-white rounded-pill\" :class=\"{ 'active': state.targetNum === 1 }\" @click=\"() => {\r\n                onChangeTarget(1)\r\n            }\">左</div>\r\n            <div class=\"fs-3 text-white rounded-pill\" :class=\"{ 'active': state.targetNum === 2 }\" @click=\"() => {\r\n                onChangeTarget(2)\r\n            }\">右</div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style lang=\"sass\">\r\n.MapFeatureBtn\r\n    display: block\r\n    border-radius: 10px\r\n    width: 68px\r\n    height: 68px\r\n    box-sizing: border-box\r\n    img\r\n        width: 100%\r\n        height: 100%\r\n        &:hover\r\n            filter: brightness(0.5)\r\n    svg\r\n        font-size: 24px\r\n        width: 100%\r\n        height: 100%\r\n\r\n.switchControl\r\n    top: 10px\r\n    left: 50%\r\n    background: rgba(30, 30, 30, 0.9)\r\n    box-sizing: border-box\r\n    div\r\n        padding:5px 28px\r\n        cursor: pointer\r\n        box-sizing: border-box\r\n    .active\r\n        background: #247BA0\r\n\r\n</style>","export default \"__VITE_ASSET__c2b3a5f0__\"","<script>\r\nimport { useSlots, onBeforeMount, onMounted, onBeforeUnmount, ref, reactive, computed, watch, nextTick, defineAsyncComponent, useCssModule, inject, getCurrentInstance } from 'vue'\r\nimport $ from 'jquery'\r\n\r\nimport { Map, View, Feature } from 'ol'\r\nimport { ImageArcGISRest, OSM } from 'ol/source.js'\r\nimport TileWMS from 'ol/source/TileWMS'\r\n\r\nimport { TileArcGISRest } from 'ol/source.js'\r\n\r\nimport XYZ from 'ol/source/XYZ'\r\nimport VectorSource from 'ol/source/Vector.js'\r\nimport { Icon, Fill, Stroke, Style } from 'ol/style.js'\r\nimport { Tile, Tile as TileLayer, Image as ImageLayer, Vector, Vector as VectorLayer } from 'ol/layer.js'\r\nimport ImageWMS from 'ol/source/ImageWMS.js';\r\nimport TileGrid from 'ol/layer/Tile.js';\r\n\r\nimport PerspectiveMap from \"ol-ext/map/PerspectiveMap\"\r\n\r\nimport EsriJSON from 'ol/format/EsriJSON.js'\r\nimport { createXYZ } from 'ol/tilegrid.js'\r\nimport { tile as tileStrategy } from 'ol/loadingstrategy.js'\r\nimport { Circle, Polygon, Point } from 'ol/geom.js'\r\nimport Projection from 'ol/proj/Projection.js'\r\nimport GeoJSON from 'ol/format/GeoJSON.js'\r\n\r\nimport OLCesium from 'olcs/OLCesium.js';\r\nimport VectorImageLayer from 'ol/layer/VectorImage.js';\r\nimport TileState from 'ol/TileState.js';\r\n\r\nimport 'ol/ol.css'\r\n\r\nimport mapLayerList from '@/config/mapLayerList'\r\nimport baseMapList from '@/config/baseMapList'\r\n\r\nimport 'ol-ext/dist/ol-ext.css'\r\n\r\nimport { get as getProjection } from 'ol/proj';\r\n\r\nexport default {\r\n    props: {},\r\n    setup(props, { emit }) {\r\n        const mapLayers = mapLayerList\r\n        const baseMaps = baseMapList\r\n        const state = reactive({\r\n            // defaultCenter: [120.971859, 24.801583],\r\n            defaultCenter: [121.326776, 24.655499],\r\n            defaultCenterZoom: 14,\r\n            targetNum: 1,\r\n            conditionWrap: false,\r\n            layerSelect: false,\r\n            currentLayers: [],\r\n            layers: [],\r\n            mapLayers: computed(() => {\r\n                return state.layers.map((node, index) => {\r\n                    return {\r\n                        label: node.group_title,\r\n                        value: node.value,\r\n                        layers: node.group_layers,\r\n                        groupClass: node.group_class\r\n                    }\r\n                })\r\n            }),\r\n            baseMapsOptions: computed(() => baseMapList.sourceData()),\r\n            selectLock: false,\r\n            mapCount: 1,\r\n            map1: null,\r\n            map2: null,\r\n            map1LayerStatus: [],\r\n            map2LayerStatus: [],\r\n            deleteLightbox: false,\r\n            // 目前地圖狀態為2D or 3D\r\n            dimensionMap: {\r\n                map1: '2D',\r\n                map2: '2D'\r\n            },\r\n            toSearchDimensionStatus: computed(() => {\r\n                let target = state.targetNum == 1 ? 'map1' : 'map2'\r\n                return state.dimensionMap[target] === '2D'\r\n            }),\r\n            tribeId: '',\r\n            ol3d: null,\r\n            selectValueTemp: 0,\r\n        })\r\n\r\n        const defaultView = new View({\r\n            projection: 'EPSG:4326',\r\n            center: state.defaultCenter,\r\n            zoom: state.defaultCenterZoom,\r\n        })\r\n\r\n        let ol3d = null\r\n\r\n        // 初始化地圖\r\n        function initMap() {\r\n            state.map1 = new Map({\r\n                target: 'map1',\r\n                layers: [baseMapList.sourceFun('default')],\r\n                view: defaultView,\r\n                controls: [],\r\n            })\r\n        }\r\n\r\n        function addPoint(targetLng, targetLat) {\r\n            const marker = new Vector({\r\n                source: new VectorSource({\r\n                    features: [\r\n                        new Feature({\r\n                            geometry: new Point([targetLng, targetLat]),\r\n                            name: 'Null Island',\r\n                            population: 4000,\r\n                            rainfall: 500,\r\n                        })\r\n                    ]\r\n                }),\r\n                style: new Style({\r\n                    image: new Icon({\r\n                        anchor: [0.5, 100],\r\n                        anchorXUnits: 'fraction',\r\n                        anchorYUnits: 'pixels',\r\n                        // 圖片連結需修改\r\n                        src: 'https://www.ockert-cnc.de/wp-content/uploads/2016/12/map-marker-icon-100x100.png',\r\n                    }),\r\n                })\r\n            })\r\n\r\n            let target = state.targetNum == 1 ? 'map1' : 'map2'\r\n            state[target].addLayer(marker)\r\n        }\r\n\r\n        function mapControl({ action, value }) {\r\n            let mainMap = state.map1?.getTarget() == null ? 'map2' : 'map1'\r\n            let View = state[mainMap].getView()\r\n            switch (action) {\r\n                case 'In':\r\n                    View.animate({\r\n                        zoom: View.getZoom() + 1,\r\n                    })\r\n                    break;\r\n                case 'Out':\r\n                    View.animate({\r\n                        zoom: View.getZoom() - 1,\r\n                    })\r\n                    break;\r\n                case 'toNorth':\r\n                    View.animate({\r\n                        rotation: 0,\r\n                    })\r\n                    break;\r\n                case 'moveTo':\r\n                    if (value) {\r\n                        const { xAxis, yAxis } = value\r\n                        View.animate({\r\n                            center: [xAxis, yAxis],\r\n                            zoom: 10,\r\n                            duration: 100,\r\n                        });\r\n                    } else {\r\n                        navigator.geolocation.getCurrentPosition(function (pos) {\r\n                            View.animate({\r\n                                center: [pos.coords.longitude, pos.coords.latitude],\r\n                                zoom: 17,\r\n                                duration: 100,\r\n                            });\r\n                            addPoint(pos.coords.longitude, pos.coords.latitude)\r\n                        })\r\n                    }\r\n                    break;\r\n                case 'fullScreen':\r\n                    let target = document.getElementById(`map${state.targetNum}`)\r\n                    if (target.requestFullscreen) {\r\n                        target.requestFullscreen()\r\n                    } else if (target.msRequestFullscreen) {\r\n                        target.msRequestFullscreen()\r\n                    } else if (target.mozRequestFullScreen) {\r\n                        target.mozRequestFullScreen()\r\n                    } else if (target.webkitRequestFullscreen) {\r\n                        target.webkitRequestFullscreen()\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function layerControl({ action, value }) {\r\n            console.log({ action, value })\r\n            let target = state.targetNum == 1 ? state.map1 : state.map2\r\n            let targetLayers = target?.getLayers()\r\n            switch (action) {\r\n                case 'layerMode':\r\n                    if (value.checked) {\r\n                        if (!(state.layers[value.nodeIndex].group_layers[value.subNodeIndex].single_tiles)) {\r\n                            let layersAry = targetLayers.getArray()\r\n                            layersAry.forEach(element => {\r\n                                if (!(element.get('id'))) { return }\r\n                                if (element.get('id').includes(`node${value.nodeIndex}_subNode${value.subNodeIndex}_nestedSubNode`)) {\r\n                                    target.removeLayer(element)\r\n                                }\r\n                            })\r\n                            onMapLayerStatus('delete', target.getTarget(), value.id)\r\n                        }\r\n\r\n                        let nestedSubNodeIndex = value.nestedSubNodeIndex || state.selectValueTemp\r\n                        let targetLayer = mapLayers.getLayer(state.layers[value.nodeIndex].group_layers[value.subNodeIndex], nestedSubNodeIndex, value.id)\r\n                        target.addLayer(targetLayer)\r\n\r\n                        // 部落圖層點擊事件\r\n                        if (value.id === 'node0_subNode3_nestedSubNodeundefined') {\r\n                            target.on('click', (evt) => {\r\n                                const data = targetLayer.getData(evt.pixel)\r\n                                console.log(data)\r\n\r\n                                // // needfix: 已抓入圖層.需要加入後續事件小視窗及後續另開連結事件\r\n                                // if (data[0]) {\r\n                                    // 获取色块的范围\r\n                                    // var extent = clickedFeature.getGeometry().getExtent();\r\n\r\n                                    // // 判断点击位置是否在色块的范围内\r\n                                    // var isInside = ol.extent.containsCoordinate(extent, coordinate);\r\n                                // }\r\n\r\n                                // var coordinate = evt.coordinate;\r\n                                // var pixel = target.getPixelFromCoordinate(coordinate);\r\n                                // var features = targetLayer.getSource().getFeaturesAtCoordinate(coordinate);\r\n                                // if (features.length > 0) {\r\n                                //     var properties = features[0].getProperties();\r\n                                //     console.log(properties)\r\n                                //     // 在這裡對要素的屬性進行處理\r\n                                // }\r\n                            })\r\n                        }\r\n\r\n                        onMapLayerStatus('add', target.getTarget(), value.id)\r\n\r\n                    } else {\r\n                        let layersAry = targetLayers.getArray()\r\n                        let toRemoveLayerId\r\n                        // needfix: 此處寫死 淹水.台灣近岸海域風浪危害圖 兩個圖層，看之後是否可以改成以single_tiles判斷\r\n                        switch (value.id) {\r\n                            case 'node0_subNode0_nestedSubNodeundefined':\r\n                                toRemoveLayerId = layersAry.filter(element => element.get('id') === 'node0_subNode0_nestedSubNodeundefined')\r\n                                toRemoveLayerId.forEach((node) => {\r\n                                    target.removeLayer(node)\r\n                                })\r\n                                break\r\n                            case 'node3_subNode1_nestedSubNodeundefined':\r\n                                toRemoveLayerId = layersAry.filter(element => element.get('id') === 'node3_subNode1_nestedSubNodeundefined')\r\n                                toRemoveLayerId.forEach((node) => {\r\n                                    target.removeLayer(node)\r\n                                })\r\n                                break\r\n                            default:\r\n                                layersAry.forEach(element => {\r\n                                    if (element.get('id') == value.id) {\r\n                                        target.removeLayer(element)\r\n                                    }\r\n                                })\r\n                                break\r\n                        }\r\n                        onMapLayerStatus('delete', target.getTarget(), value.id)\r\n                    }\r\n                    break;\r\n                case 'selectLayerMode':\r\n                    if (state.selectLock) { return }\r\n                    if (value.layerName === 'all') {\r\n                        let layersAry = targetLayers.getArray()\r\n                        let layersToRemove = layersAry.filter(node => node.get('name') !== 'default')\r\n                        layersToRemove.forEach((node) => {\r\n                            target.removeLayer(node)\r\n                        })\r\n                    } else {\r\n                        let layersAry = targetLayers.getArray()\r\n                        layersAry.forEach(element => {\r\n                            if (element.get('id') == value.id) {\r\n                                target.removeLayer(element)\r\n                            }\r\n                        })\r\n                    }\r\n                    break;\r\n                case 'changeOrder':\r\n                    if (state.selectLock) { return }\r\n                    let layeredIndex = mapLayerList.getLayerIndex(value.id)\r\n                    let nowTileLayer = mapLayers.getLayer(state.layers[layeredIndex.nodeIndex].group_layers[layeredIndex.subNodeIndex], layeredIndex.nestedSubNodeIndex, value.id)\r\n                    if (value.movement === 'up') {\r\n                        if (value.key + 1 == targetLayers.getArray().length) { return }\r\n                        value.checked = false\r\n                        layerControl({ action: 'layerMode', value: value })\r\n                        targetLayers.insertAt(value.key + 1, nowTileLayer)\r\n                    }\r\n                    if (value.movement === 'down') {\r\n                        if (value.key - 1 == 0) { return }\r\n                        value.checked = false\r\n                        layerControl({ action: 'layerMode', value: value })\r\n                        targetLayers.insertAt(value.key - 1, nowTileLayer)\r\n                    }\r\n                    break;\r\n                case 'changeLayerVisible':\r\n                    if (state.selectLock) { return }\r\n                    let visibleStatus = !(targetLayers.getArray()[value.key].getVisible())\r\n                    targetLayers.getArray()[value.key].setVisible(visibleStatus)\r\n                    break;\r\n                case 'baseMap':\r\n                    let newTileLayer = baseMaps.sourceFun(value.layerName)\r\n                    targetLayers.extend([newTileLayer])\r\n\r\n                    let layersAry = targetLayers.getArray()\r\n                    layersAry.forEach(element => {\r\n                        if (element.get('name') !== value.layerName) {\r\n                            target.removeLayer(element)\r\n                        }\r\n                    })\r\n                    break;\r\n                case 'changeMapCount':\r\n                    if (state.mapCount === value) { return }\r\n                    let otherMap = state.targetNum !== 1 ? 'map1' : 'map2'\r\n                    state.mapCount = value\r\n                    let otherLayers = state[`${otherMap}LayerStatus`].filter(node => node !== '3D')\r\n                    let otherLayersData = otherLayers.map(item => mapLayerList.getLayerIndex(item))\r\n                    if (value === 2) {\r\n                        state[otherMap] = new Map({\r\n                            target: otherMap,\r\n                            layers: [\r\n                                baseMapList.sourceFun('default'),\r\n                                ...otherLayersData.map(node => mapLayers.getLayer(state.layers[node.nodeIndex].group_layers[node.subNodeIndex], node.nestedSubNodeIndex, node.id))\r\n                            ],\r\n                            view: defaultView,\r\n                            controls: [],\r\n                        })\r\n                        if (state[`${otherMap}LayerStatus`]?.indexOf('3D') !== -1) {\r\n                            ol3d = new OLCesium({\r\n                                map: state[otherMap],\r\n                            })\r\n                            ol3d.setEnabled(true)\r\n                            // needfix: token搬移到env\r\n                            let accessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI0NzM3MWFhYS0xMjNlLTQ3MTMtODFjZS0xZjMzM2I5NGZiYTEiLCJpZCI6MTMwODE4LCJpYXQiOjE2ODQwNzM3Mjl9.UYu4kBialPo19dcvosHzZTpg2BD1zkFQnjCD78YiiYo'\r\n                            Cesium.Ion.defaultAccessToken = accessToken\r\n                            let scene = ol3d.getCesiumScene({})\r\n                            scene.terrainProvider = Cesium.createWorldTerrain({})\r\n                        }\r\n                    }\r\n                    if (value === 1) {\r\n                        state[otherMap] = null\r\n                        const element = document.getElementById(otherMap)\r\n                        while (element.firstChild) {\r\n                            element.removeChild(element.firstChild)\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'changeDimensionMap':\r\n                    let ta = state.targetNum == 1 ? 'map1' : 'map2'\r\n                    state.dimensionMap[ta] = value\r\n                    if (value === '3D') {\r\n                        ol3d = new OLCesium({\r\n                            map: target,\r\n                        })\r\n                        ol3d.setEnabled(true)\r\n                        // needfix: token搬移到env\r\n                        let accessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI0NzM3MWFhYS0xMjNlLTQ3MTMtODFjZS0xZjMzM2I5NGZiYTEiLCJpZCI6MTMwODE4LCJpYXQiOjE2ODQwNzM3Mjl9.UYu4kBialPo19dcvosHzZTpg2BD1zkFQnjCD78YiiYo'\r\n                        Cesium.Ion.defaultAccessToken = accessToken\r\n                        let scene = ol3d.getCesiumScene({})\r\n                        scene.terrainProvider = Cesium.createWorldTerrain({})\r\n                        state[`${ta}LayerStatus`].push('3D')\r\n                    } else {\r\n                        ol3d.setEnabled(false)\r\n                        state[`${ta}LayerStatus`] = state[`${ta}LayerStatus`].filter(node => node !== '3D')\r\n                    }\r\n                    break;\r\n            }\r\n            getCurrentLayerNames()\r\n        }\r\n\r\n        function changeTarget(value) {\r\n            state.targetNum = value\r\n            let delToMap = state.targetNum !== 1 ? 'map1' : 'map2'\r\n            if (state.mapCount === 1) {\r\n                // 目標地圖為空\r\n                if (!state[`map${value}`]) {\r\n                    let otherLayers = state[`map${value}LayerStatus`].filter(node => node !== '3D')\r\n                    let otherLayersData = otherLayers.map(item => mapLayerList.getLayerIndex(item))\r\n\r\n                    state[`map${value}`] = new Map({\r\n                        target: `map${value}`,\r\n                        layers: [\r\n                            baseMapList.sourceFun('default'),\r\n                            ...otherLayersData.map(node => mapLayers.getLayer(state.layers[node.nodeIndex].group_layers[node.subNodeIndex], node.nestedSubNodeIndex, node.layeredIndex))\r\n                        ],\r\n                        view: defaultView,\r\n                        controls: [],\r\n                    })\r\n                    if (state[`map${value}LayerStatus`]?.indexOf('3D') !== -1) {\r\n                        ol3d = new OLCesium({\r\n                            map: state[`map${value}`],\r\n                        })\r\n                        ol3d.setEnabled(true)\r\n                    }\r\n\r\n                }\r\n                // 非目標地圖的刪除\r\n                if (state[delToMap]) {\r\n                    state[delToMap] = null\r\n                    const element = document.getElementById(delToMap)\r\n                    while (element.firstChild) {\r\n                        element.removeChild(element.firstChild)\r\n                    }\r\n                }\r\n            }\r\n            nextTick(() => {\r\n                getCurrentLayerNames()\r\n            })\r\n        }\r\n\r\n        function getCurrentLayerNames() {\r\n            let target = state.targetNum == 1 ? state.map1 : state.map2\r\n            const layers = target?.getLayers()?.getArray()\r\n            state.currentLayers = layers?.map(layer => {\r\n                return {\r\n                    label: layer.get('label'),\r\n                    id: layer.get('id'),\r\n                    visible: layer.getVisible(),\r\n                }\r\n            })\r\n        }\r\n\r\n        function conditionWrap() {\r\n            state.conditionWrap = !state.conditionWrap\r\n        }\r\n\r\n        function onMapLayerStatus(action, target, id) {\r\n            if (action === 'add') {\r\n                state[`${target}LayerStatus`].push(id)\r\n            } else if (action === 'delete') {\r\n                let a = state[`${target}LayerStatus`].findIndex(node => node === id)\r\n                state[`${target}LayerStatus`].splice(a, 1)\r\n            } else {\r\n                console.log('error')\r\n            }\r\n        }\r\n\r\n        function closeMapData() {\r\n            state.tribeId = ''\r\n        }\r\n\r\n\r\n\r\n        // 假設這是你的 API 函式，a使用 Promise 包裝非同步請求\r\n        function callAPI(params) {\r\n            return new Promise((resolve, reject) => {\r\n                // 執行 API 請求\r\n                // ...\r\n\r\n                // 假設回傳的資料為 response\r\n                const response = 'API response';\r\n\r\n                // 模擬非同步延遲\r\n                setTimeout(() => {\r\n                    resolve(response);\r\n                }, 1000);\r\n            });\r\n        }\r\n\r\n        // async function fetchData() {\r\n        //     const tribeIdList = [88, 89, 90, 91, 133, 118, 119, 134]\r\n        //     const promises = []\r\n\r\n        //     // 進行八次非同步請求，每次帶不同的參數\r\n        //     tribeIdList.forEach(tribeId => {\r\n        //         const promise = getTribeDate(tribeId);\r\n        //         promises.push(promise);\r\n        //     })\r\n\r\n        //     try {\r\n        //         // 使用 Promise.all() 等待所有請求完成\r\n        //         const responses = await Promise.all(promises);\r\n\r\n        //         // 在這裡可以處理所有回傳的資料，例如將它們放在一個陣列中\r\n        //         const data = responses.map(response => {\r\n        //             return response.basicInformation.coordinates\r\n        //         });\r\n\r\n        //         // 在這裡可以進行後續動作，使用 data 陣列\r\n        //         console.log(data);\r\n        //     } catch (error) {\r\n        //         // 處理錯誤\r\n        //         console.error(error);\r\n        //     }\r\n        // }\r\n        // // 呼叫 fetchData() 函式來執行\r\n        // fetchData();\r\n        // async function getTribeDate(tribeId) {\r\n        //     return await $.ajax({\r\n        //         url: `https://api.edtest.site/tribe?tribeCode=${tribeId}`,\r\n        //         method: \"GET\"\r\n        //     })\r\n        // }\r\n\r\n        onMounted(async () => {\r\n            await $.ajax({\r\n                url: 'https://api.edtest.site/layers',\r\n                method: \"GET\"\r\n            }).done(res => {\r\n                state.layers = res.map((node, index) => {\r\n                    node.group_layers.forEach((sub, subIndex) => {\r\n                        let subNodeIndex = undefined, nestedSubNodeIndex = undefined\r\n                        subNodeIndex = subIndex\r\n                        sub.id = `node${index}_subNode${subNodeIndex}_nestedSubNode${nestedSubNodeIndex}`\r\n                        if (!(sub.single_tiles)) {\r\n                            sub.tiles_list.forEach((nestedSub, nestedSubIndex) => {\r\n                                nestedSubNodeIndex = nestedSubIndex\r\n                                nestedSub.id = `node${index}_subNode${subNodeIndex}_nestedSubNode${nestedSubNodeIndex}`\r\n                            })\r\n                        }\r\n                    })\r\n                    return {\r\n                        ...node,\r\n                        value: index,\r\n                    }\r\n                })\r\n                nextTick(() => {\r\n                    initMap()\r\n                    getCurrentLayerNames()\r\n                })\r\n            }).fail(FailMethod => {\r\n                console.log('Fail', FailMethod)\r\n            })\r\n        })\r\n\r\n        return {\r\n            state,\r\n            props,\r\n            mapControl,\r\n            layerControl,\r\n            getCurrentLayerNames,\r\n            changeTarget,\r\n            conditionWrap,\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<template>\r\n    <div>\r\n        <div class=\"SearchBar position-absolute\">\r\n            <img src=\"@/assets/logo.svg\" alt=\"\" class=\"mb-2\">\r\n            <SearchBar :dimensionMapStatus=\"state.toSearchDimensionStatus\" :currentLayers=\"state.currentLayers\"\r\n                :mapCount=\"state.mapCount\" @onLayerControl=\"({ action, value }) => { layerControl({ action, value }) }\"\r\n                @onChangeTarget=\"(value) => { changeTarget(value) }\" @conditionWrap=\"(value) => { conditionWrap(value) }\" />\r\n        </div>\r\n        <mapSourceOption class=\"mapSourceOption\" :baseMapsOptions=\"state.baseMapsOptions\"\r\n            @onChangeBaseMaps=\"({ action, value }) => { layerControl({ action, value }) }\" />\r\n\r\n        <asideTool class=\"asideTool position-absolute top-50 translate-middle-y\" id=\"asideTool\"\r\n            @onMapControl=\"({ action, value }) => { mapControl({ action, value }) }\" />\r\n\r\n        <div class=\"w-100 d-flex flex-nowrap mapWrap\" id=\"mapWrap\">\r\n            <!-- needFix 寬度設定是否調整 -->\r\n            <div id=\"map1\" :class=\"{ 'w-100': state.map1?.getTarget() == 'map1' }\"></div>\r\n            <div class=\"middleLine\" v-if=\"state.mapCount === 2\"></div>\r\n            <div id=\"map2\" :class=\"{ 'w-100': state.map2?.getTarget() == 'map2' }\"></div>\r\n        </div>\r\n        <div class=\"condition position-absolute\">\r\n            <div class=\"mb-2\">\r\n                <button class=\"border-0 w-100 rounded-4 bg-steel text-white text-center p-2 fw-bold fs-5\"\r\n                    v-if=\"!state.conditionWrap\" @click=\"state.conditionWrap = true\">\r\n                    圖層選項\r\n                </button>\r\n                <div class=\"mb-4\" v-if=\"state.conditionWrap\">\r\n                    <condition v-bind=\"{\r\n                        mapLayers: state.mapLayers,\r\n                        currentLayers: state.currentLayers,\r\n                        onClose: () => {\r\n                            state.conditionWrap = false\r\n                        },\r\n                        showSelectLayerValue: (val) => {\r\n                            state.selectValueTemp = val\r\n                        }\r\n                    }\" @onMapControl=\"({ action, value }) => { mapControl({ action, value }) }\"\r\n                        @onLayerControl=\"({ action, value }) => { layerControl({ action, value }) }\" />\r\n                    <!-- need continue -->\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <button class=\"border-0 w-100 rounded-4 bg-steel text-white text-center p-2 fw-bold fs-5\"\r\n                    v-if=\"!state.layerSelect\" @click=\"state.layerSelect = true\">\r\n                    已選擇的圖層\r\n                </button>\r\n                <div v-if=\"state.layerSelect\">\r\n                    <layerSelect v-bind=\"{\r\n                        selectLock: state.selectLock,\r\n                        currentLayers: state.currentLayers,\r\n                        onClose: () => {\r\n                            state.layerSelect = false\r\n                        },\r\n                        onChangLayerVisible: (action) => {\r\n                            layerControl(action)\r\n                        },\r\n                        onChangeOrderLayer: ({ action, value }) => {\r\n                            layerControl({ action, value })\r\n                        },\r\n                        onLockLayer: () => {\r\n                            state.selectLock = !state.selectLock\r\n                        },\r\n                        onDeleteLayer: ({ action, value }) => {\r\n                            if (value.layerName == 'all') {\r\n                                state.deleteLightbox = true\r\n                            } else {\r\n                                layerControl({ action, value })\r\n                            }\r\n                        },\r\n                        onDeleteLayerAll: () => {\r\n                            state.deleteLightbox = true\r\n                        }\r\n                    }\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"lightWrap w-100 h-100 d-flex justify-content-center align-items-center\" v-if=\"state.deleteLightbox\">\r\n            <div class=\"p-4 rounded bg-white\" style=\"width: 250px;\">\r\n                <p class=\"text-center fw-bold\">是否要刪除全部圖層</p>\r\n                <div class=\" d-flex justify-content-around\">\r\n                    <button class=\"rounded px-3 py-1 bg-steel text-white border-0\" @click=\"() => {\r\n                        layerControl({\r\n                            action: 'selectLayerMode',\r\n                            value: {\r\n                                layerName: 'all'\r\n                            }\r\n                        })\r\n                        state.deleteLightbox = false\r\n                    }\">確定</button>\r\n                    <button class=\"rounded px-3 py-1 bg-secondary bg-gradient text-white border-0\" @click=\"() => {\r\n                        state.deleteLightbox = false\r\n                    }\">取消</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- 地圖細節小窗 -->\r\n        <areaData class=\"areaData\" v-if=\"state.tribeId\" :closeMapData=\"() => {\r\n            state.tribeId = ''\r\n        }\" :tribeId=\"state.tribeId\" :maxHeight=\"500\" />\r\n    </div>\r\n</template>\r\n\r\n<style lang=\"sass\">\r\n@import '@/assets/styles/all.module.scss'\r\n.mapWrap\r\n    justify-content: space-between\r\n    height: 100vh\r\n\r\n.mapWrap .ol-viewport\r\n    height: 100vh\r\n    width: 100vw\r\n\r\n\r\n.asideTool\r\n    z-index: 220\r\n    left: 5px\r\n.SearchBar\r\n    position: absolute\r\n    top: 20px\r\n    left: 20px\r\n    z-index: 220\r\n.condition\r\n    width: 480px\r\n    right: 1%\r\n    bottom: 5%\r\n\r\n.mapSourceOption\r\n    position: fixed\r\n    top: 20px\r\n    right: 20px\r\n    z-index: 220\r\n\r\n.middleLine\r\n    width: 5px\r\n    background: $blue-steel\r\n\r\n\r\n.areaData\r\n    width: 450px\r\n    max-height: 500px\r\n    background: #fff\r\n    position: absolute\r\n    top: 0\r\n    right: 0\r\n    box-sizing: border-box\r\n</style>\r\n"],"names":["_imports_0$3","_imports_1$2","_sfc_main","props","emit","state","reactive","getTribeData","tribeId","res","FailMethod","result","onMounted","_hoisted_2","_imports_0","_hoisted_6","_hoisted_7","_withScopeId","_createElementVNode","_hoisted_8","_imports_1","_hoisted_10","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_17","_openBlock","_createElementBlock","_hoisted_1","_toDisplayString","$setup","_cache","args","$props","_c","_b","_a","_i","_h","_g","_hoisted_11","_Fragment","_renderList","_u","_t","item","_hoisted_16","_hoisted_18","_hoisted_3","_withModifiers","_normalizeClass","node","nodeIndex","mapLayerList","layer","nestedSubNodeIndex","id","layerSource","layerType","figureType","request","url","api","origin","pathname","searchParams","searchParamsObject","key","value","TileWMS","tileTitle","TileLayer","VectorLayer","VectorSource","wmsSource","layeredIndex","subNodeIndex","element","onMapControl","action","onLayerControl","LayerCheckBoxChange","e","defaultChecked","checkTribe","newVal","router","mapLayers","subNode","_createTextVNode","$event","_vModelSelect","_imports_0$2","_imports_1$1","_imports_2$1","_imports_3$1","_imports_4$1","_imports_2","_imports_3","_imports_4","onChangeBaseMaps","name","node_i","_imports_0$1","toolSwitch","target","_hoisted_15","_hoisted_21","index","computed","initMap","Map","baseMapList","defaultView","addPoint","targetLng","targetLat","Point","Style","Icon","mapControl","View","mainMap","xAxis","yAxis","layerControl","targetLayers","data","targetLayer","evt","layersAry","toRemoveLayerId","nowTileLayer","visibleStatus","newTileLayer","otherMap","otherLayersData","ol3d","OLCesium","accessToken","scene","ta","getCurrentLayerNames","delToMap","layers","onMapLayerStatus","a","sub","subIndex","nestedSubIndex","nestedSub","_hoisted_5","_hoisted_4","_createVNode","_component_condition","_mergeProps","_hoisted_9"],"mappings":"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"}