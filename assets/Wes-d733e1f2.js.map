{"version":3,"file":"Wes-d733e1f2.js","sources":["../../src/view/Wes.vue"],"sourcesContent":["<script>\nimport { useSlots, onBeforeMount, onMounted, onBeforeUnmount, ref, reactive, computed, watch, nextTick, defineAsyncComponent, useCssModule, inject, getCurrentInstance } from 'vue'\nimport $ from 'jquery'\n\nimport { Map, View, Feature } from 'ol'\nimport { ImageArcGISRest, OSM } from 'ol/source.js'\nimport TileWMS from 'ol/source/TileWMS'\nimport Overlay from 'ol/Overlay'// 引入覆蓋物模塊\n\nimport { TileArcGISRest } from 'ol/source.js'\n\nimport XYZ from 'ol/source/XYZ'\nimport VectorSource from 'ol/source/Vector.js'\nimport { Icon, Fill, Stroke, Style } from 'ol/style.js'\nimport { Tile, Tile as TileLayer, Image as ImageLayer, Vector, Vector as VectorLayer } from 'ol/layer.js'\nimport ImageWMS from 'ol/source/ImageWMS.js';\nimport TileGrid from 'ol/layer/Tile.js';\n\nimport PerspectiveMap from \"ol-ext/map/PerspectiveMap\"\n\nimport EsriJSON from 'ol/format/EsriJSON.js'\nimport { createXYZ } from 'ol/tilegrid.js'\nimport { tile as tileStrategy } from 'ol/loadingstrategy.js'\nimport { Circle, Polygon, Point } from 'ol/geom.js'\nimport Projection from 'ol/proj/Projection.js'\nimport GeoJSON from 'ol/format/GeoJSON.js'\n\nimport OLCesium from 'olcs/OLCesium.js';\nimport VectorImageLayer from 'ol/layer/VectorImage.js';\nimport TileState from 'ol/TileState.js';\n\nimport 'ol/ol.css'\n\nimport mapLayerList, { initLayers, getTribeData } from '@/config/mapLayerList'\nimport baseMapList from '@/config/baseMapList'\n\nimport 'ol-ext/dist/ol-ext.css'\n\nimport { get as getProjection } from 'ol/proj';\n\nexport default {\n    props: {},\n    setup(props, { emit }) {\n\n        const state = reactive({\n            map1: null,\n            map2: null,\n            defaultCenter: [121.326776, 24.655499],\n            defaultCenterZoom: 14,\n        })\n        const defaultView = new View({\n            projection: 'EPSG:4326',\n            center: state.defaultCenter,\n            zoom: state.defaultCenterZoom,\n        })\n        const osm = new TileLayer({\n            source: new OSM(),\n        })\n\n        // https://gis.stackexchange.com/questions/179114/error-when-trying-to-get-a-click-event-on-wms-layer\n        // function findFeaturesAtLocationOnClick(event) {\n        //     mouseLocation = map.getLonLatFromPixel(event.xy);\n        //     var url = events.getFullRequestString(\n        //         {\n        //             REQUEST: \"GetFeatureInfo\",\n        //             EXCEPTIONS: \"application/vnd.ogc.se_xml\",\n        //             BBOX: map.getExtent().toBBOX(),\n        //             X: event.xy.x,\n        //             Y: event.xy.y,\n        //             INFO_FORMAT: 'text/plain',\n        //             QUERY_LAYERS: 'events',\n        //             FEATURE_COUNT: 100,\n        //             WIDTH: map.size.w,\n        //             HEIGHT: map.size.h\n        //         },\n        //         wmsURL\n        //     );\n        //     OpenLayers.loadURL(url, '', this, setPopupHTML);\n        // }\n\n        // function setPopupHTML(response) {\n            // In this function, the response contains the exception I mentioned above\n\n        // }\n\n        onMounted(async () => {\n            const api = 'http://gis.edtest.site:8010/ogc/temp?LAYER=%E6%96%B0%E7%AB%B9%E7%B8%A3%E5%8E%9F%E4%BD%8F%E6%B0%91%E9%83%A8%E8%90%BD%E7%AF%84%E5%9C%8D&REQUEST=GetMap&SERVICE=WMS&BGCOLOR=0xFFFFFF&TRANSPARENT=TRUE&SRS=EPSG:3826&VERSION=1.1.1&FORMAT=image/png&STYLES='\n            const url = new URL(api);\n\n            // 取得網址部分\n            const origin = url.origin\n            const pathname = url.pathname\n\n            // 取得query參數\n            const searchParams = url.searchParams;\n            const searchParamsObject = {};\n            for (const [key, value] of searchParams.entries()) {\n                searchParamsObject[key] = value;\n            }\n\n            const braster = new TileLayer ({\n                source: new TileWMS({\n                    name: 'braster',\n                    url: origin + pathname,\n                    params: searchParamsObject,\n                    serverType: 'geoserver',\n                    // 需要開啟此\n                    crossOrigin: 'anonymous',\n                })\n            })\n\n\n            // const braster = new TileLayer({\n            //     source: new TileWMS({\n            //         url: 'https://ahocevar.com/geoserver/wms',\n            //         params: {'LAYERS': 'ne:ne', 'TILED': true},\n            //         serverType: 'geoserver',\n            //         crossOrigin: 'anonymous',\n            //     }),\n            // })\n\n\n            state.map1 = new Map({\n                target: 'map1',\n                layers: [baseMapList.sourceFun('default')],\n                view: defaultView,\n                controls: [],\n            })\n\n            state.map1.addLayer(braster)\n\n            state.map1.on('click', (evt)=>{\n                let layerList = state.map1.getLayers().getArray()\n                let tribeLayer = layerList.filter(node=> node.get('id') == 'node0_subNode3_nestedSubNodeundefined')\n                console.log(tribeLayer)\n                console.log(braster)\n                // const data = tribeLayer.getData(evt.pixel)\n\n                const data = braster.getData(evt.pixel)\n                console.log('getData', data)\n                state.map1.forEachFeatureAtPixel(evt.pixel, function(layer) {\n                    console.log(layer.getSource().getParams().LAYERS)\n                })\n                // if (feature) {\n                //     // needfix: 已抓入圖層.需要加入後續事件小視窗及後續另開連結事件\n                //     console.log('Feature')\n                // }\n            })\n\n            // state.map1.on('pointermove', function (evt) {\n            //     if (evt.dragging) {\n            //         return;\n            //     }\n            //     const data = braster.getData(evt.pixel);\n            //     console.log(data)\n            //     // const hit = data && data[3] > 0; // transparent pixels have zero for data[3]\n            //     // state.map1.getTargetElement().style.cursor = hit ? 'pointer' : '';\n            // });\n        })\n\n        function showLayer() {\n            console.log(state.map1.getLayers().getArray())\n        }\n\n        return {\n            state,\n            showLayer\n            // map\n        }\n    }\n}\n\n\n</script>\n\n<template>\n    000\n    <div @click=\"showLayer\">show</div>\n    <div id=\"map1\" class=\"map\"></div>\n    8999\n\n</template>\n\n<style>\n.map {\n    width: 800px;\n    height: 800px;\n}\n</style>\n"],"names":["_sfc_main","props","emit","state","reactive","OSM","onMounted","api","url","origin","searchParams","key","value","TileWMS","pathname","Map","baseMapList","defaultView","tribeLayer","node","braster","data","evt","showLayer","_createTextVNode","_cache","args","$setup"],"mappings":"oKAwCA,MAAAA,EAAA,CACI,MAAA,CAAA,EACA,MAAAC,EAAA,CAAA,KAAAC,GAAA,CAEI,MAAAC,EAAAC,EAAA,CACI,KAAA,KACA,KAAA,KACA,cAAA,CAAA,WAAA,SAAA,EACA,kBAAA,8FAQA,OAAA,IAAAC,IA6BJC,EAAA,SAAA,CACI,MAAAC,EAAA,0PACAC,EAAA,IAAA,IAAAD,CAAA,EAGAE,EAAAD,EAAA,oBAIAE,EAAAF,EAAA,kBAEA,SAAA,CAAAG,EAAAC,CAAA,IAAAF,EAAA,QAAA,wBAKI,OAAA,IAAAG,EAAA,CACI,KAAA,UACA,IAAAJ,EAAAK,8DAmBRX,EAAA,KAAA,IAAAY,EAAA,eAEI,OAAA,CAAAC,EAAA,UAAA,SAAA,CAAA,EACA,KAAAC,yDAQA,IAAAC,EADAf,EAAA,KAAA,UAAA,EAAA,SAAA,EACA,OAAAgB,GAAAA,EAAA,IAAA,IAAA,GAAA,uCAAA,iBAEA,QAAA,IAAAC,CAAA,EAGA,MAAAC,EAAAD,EAAA,QAAAE,EAAA,KAAA,gIAsBR,SAAAC,GAAA,CACI,QAAA,IAAApB,EAAA,KAAA,UAAA,EAAA,UAAA,CACJ,CAEA,MAAA,SAEI,UAAAoB,CAEJ,CACJ,CACJ,aAQS,GAAA,OAAU,MAAA,6DADfC,EAAA,OAAA,WAAM,QAAAC,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAA,IAAAC,IAAAC,EAAA,WAAAA,EAAA,UAAA,GAAAD,CAAA,cAC2BF,EAAA,QAAA"}