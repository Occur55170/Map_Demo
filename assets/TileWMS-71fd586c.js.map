{"version":3,"file":"TileWMS-71fd586c.js","sources":["../../node_modules/ol/string.js","../../node_modules/ol/uri.js","../../node_modules/ol/source/wms.js","../../node_modules/ol/source/TileWMS.js"],"sourcesContent":["/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\n * @return {string} Formatted string\n */\nexport function padNumber(number, width, precision) {\n  const numberString =\n    precision !== undefined ? number.toFixed(precision) : '' + number;\n  let decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width\n    ? numberString\n    : new Array(1 + width - decimal).join('0') + numberString;\n}\n\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @return {number} Value\n */\nexport function compareVersions(v1, v2) {\n  const s1 = ('' + v1).split('.');\n  const s2 = ('' + v2).split('.');\n\n  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {\n    const n1 = parseInt(s1[i] || '0', 10);\n    const n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n","/**\n * @module ol/uri\n */\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexport function appendParams(uri, params) {\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function (k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri += uri.includes('?') ? '&' : '?';\n  return uri + qs;\n}\n","/**\n * @module ol/source/wms\n */\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_VERSION = '1.3.0';\n\n/**\n * @api\n * @typedef {'carmentaserver' | 'geoserver' | 'mapserver' | 'qgis'} ServerType\n * Set the server type to use implementation-specific parameters beyond the WMS specification.\n *  - `'carmentaserver'`: HiDPI support for [Carmenta Server](https://www.carmenta.com/en/products/carmenta-server)\n *  - `'geoserver'`: HiDPI support for [GeoServer](https://geoserver.org/)\n *  - `'mapserver'`: HiDPI support for [MapServer](https://mapserver.org/)\n *  - `'qgis'`: HiDPI support for [QGIS](https://qgis.org/)\n */\n","/**\n * @module ol/source/TileWMS\n */\n\nimport TileImage from './TileImage.js';\nimport {DEFAULT_VERSION} from './wms.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {buffer as bufferSize, scale as scaleSize, toSize} from '../size.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {compareVersions} from '../string.js';\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\nimport {modulo} from '../math.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nclass TileWMS extends TileImage {\n  /**\n   * @param {Options} [options] Tile WMS options.\n   */\n  constructor(options) {\n    options = options ? options : /** @type {Options} */ ({});\n\n    const params = Object.assign({}, options.params);\n\n    const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n\n    const z = tileGrid.getZForResolution(resolution, this.zDirection);\n    const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    let tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        tileResolution\n      );\n      tileExtent = transformExtent(\n        tileExtent,\n        projectionObj,\n        sourceProjectionObj\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    Object.assign(baseParams, this.params_, params);\n\n    const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    Object.assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.urls[0]), baseParams);\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(\n    tileCoord,\n    tileSize,\n    tileExtent,\n    pixelRatio,\n    projection,\n    params\n  ) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case 'geoserver':\n          const dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case 'mapserver':\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case 'carmentaserver':\n        case 'qgis':\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default: // Unknown `serverType` configured\n          assert(false, 52);\n          break;\n      }\n    }\n\n    const axisOrientation = projection.getAxisOrientation();\n    const bbox = tileExtent;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      let tmp;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n    return appendParams(url, params);\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n    };\n    Object.assign(baseParams, this.params_);\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      pixelRatio,\n      projection,\n      baseParams\n    );\n  }\n}\n\nexport default TileWMS;\n"],"names":["compareVersions","v1","v2","s1","s2","i","n1","n2","appendParams","uri","params","keyParams","k","qs","DEFAULT_VERSION","TileWMS","TileImage","options","transparent","createEmpty","coordinate","resolution","projection","projectionObj","getProjection","sourceProjectionObj","tileGrid","z","tileCoord","tileResolution","tileExtent","tileSize","toSize","gutter","bufferSize","buffer","calculateSourceResolution","transformExtent","transform","baseParams","x","y","layers","mpu","pixelSize","pixelRatio","urls","dpi","assert","axisOrientation","bbox","tmp","url","index","modulo","tileCoordHash","res","key","version","scaleSize","TileWMS$1"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}