{"version":3,"file":"WebMap-f32a887d.js","sources":["../../src/view/WebMap.vue"],"sourcesContent":["<script>\r\nimport { useSlots, onBeforeMount, onMounted, onBeforeUnmount, ref, reactive, computed, watch, nextTick, defineAsyncComponent, useCssModule, inject, getCurrentInstance } from 'vue'\r\nimport $ from 'jquery'\r\nimport { useStore } from 'vuex'\r\n\r\nimport { Map, View, Feature } from 'ol'\r\nimport Select from 'ol/interaction/Select'\r\nimport { click } from 'ol/events/condition'\r\nimport { ScaleLine } from 'ol/control.js'\r\nimport XYZ from 'ol/source/XYZ'\r\nimport VectorSource from 'ol/source/Vector.js'\r\nimport { Tile, Vector } from 'ol/layer.js'\r\nimport { Point } from 'ol/geom.js'\r\nimport { Icon, Style } from 'ol/style.js'\r\n\r\nimport OLCesium from 'olcs/OLCesium.js'\r\n\r\nimport 'ol/ol.css'\r\nimport 'ol-ext/dist/ol-ext.css'\r\nimport Overlay from 'ol/Overlay.js'\r\nimport currentPositionImg from '@/assets/img/icon/currentPosition.svg'\r\n\r\nimport mapLayerList from '@/config/mapLayerList'\r\nimport baseMapList, { getBaseMapAll } from '@/config/baseMapList'\r\n\r\nexport default {\r\n    props: {},\r\n    setup(props, { emit }) {\r\n        const getMapLayers = mapLayerList\r\n        const baseMaps = baseMapList\r\n        const store = useStore()\r\n        const state = reactive({\r\n            // defaultCenter: [120.971859, 24.801583],\r\n            // defaultCenterZoom: 14,\r\n            defaultCenter: [121.326776, 24.655499],\r\n            defaultCenterZoom: 14,\r\n            targetNum: 1,\r\n            conditionWrap: false,\r\n            layerSelect: false,\r\n            currentLayers: [],\r\n            layers: [],\r\n            mapLayers: computed(() => {\r\n                return state.layers.map((node, index) => {\r\n                    return {\r\n                        label: node.group_title,\r\n                        value: node.value,\r\n                        layers: node.group_layers,\r\n                        groupClass: node.group_class\r\n                    }\r\n                })\r\n            }),\r\n            selectLock: false,\r\n            mapCount: 1,\r\n            map1: null,\r\n            map2: null,\r\n            map1LayerStatus: [],\r\n            map2LayerStatus: [],\r\n            temp: {\r\n                map1BaseStatus: 0,\r\n                map2BaseStatus: 0,\r\n            },\r\n            deleteLightbox: false,\r\n            // 目前地圖狀態為2D or 3D\r\n            dimensionMap: {\r\n                map1: '2D',\r\n                map2: '2D'\r\n            },\r\n            toSearchDimensionStatus: computed(() => {\r\n                let target = state.targetNum == 1 ? 'map1' : 'map2'\r\n                return state.dimensionMap[target] === '2D'\r\n            }),\r\n            ol3d: null,\r\n            selectValueTemp: 0,\r\n            popup: {\r\n                nodeRef: null,\r\n                overlay: null,\r\n                popupId: 0,\r\n                coordinate: [],\r\n                popupData: '',\r\n            },\r\n            comSize: {\r\n                wrapHeight: '',\r\n                wrapWidth: '',\r\n            },\r\n            tribeQuery: {},\r\n        })\r\n\r\n        let ol3d = null\r\n\r\n        const defaultView = new View({\r\n            projection: 'EPSG:4326',\r\n            center: state.defaultCenter,\r\n            zoom: state.defaultCenterZoom,\r\n        })\r\n\r\n        // 初始化地圖\r\n        function initMap() {\r\n            state.map1 = new Map({\r\n                target: 'map1',\r\n                layers: [\r\n                    baseMapList.getBaseMapData(0)\r\n                ],\r\n                view: defaultView,\r\n                controls: [],\r\n            })\r\n\r\n            state.map1.addControl(new ScaleLine({\r\n                units: 'metric', // 比例尺單位\r\n            }));\r\n        }\r\n\r\n        function addPoint(targetLng, targetLat) {\r\n            const marker = new Vector({\r\n                source: new VectorSource({\r\n                    features: [\r\n                        new Feature({\r\n                            geometry: new Point([targetLng, targetLat]),\r\n                            population: 4000,\r\n                            rainfall: 500,\r\n                        })\r\n                    ]\r\n                }),\r\n                style: new Style({\r\n                    image: new Icon({\r\n                        anchor: [0.5, 100],\r\n                        anchorXUnits: 'fraction',\r\n                        anchorYUnits: 'pixels',\r\n                        src: currentPositionImg,\r\n                    }),\r\n                })\r\n            })\r\n\r\n            let target = state.targetNum == 1 ? 'map1' : 'map2'\r\n            state[target].addLayer(marker)\r\n        }\r\n\r\n        function mapControl({ action, value }) {\r\n            let mainMap = state.map1?.getTarget() == null ? 'map2' : 'map1'\r\n            let View = state[mainMap].getView()\r\n            switch (action) {\r\n                case 'In':\r\n                    View.animate({\r\n                        zoom: View.getZoom() + 1,\r\n                    })\r\n                    break;\r\n                case 'Out':\r\n                    View.animate({\r\n                        zoom: View.getZoom() - 1,\r\n                    })\r\n                    break;\r\n                case 'toNorth':\r\n                    View.animate({\r\n                        rotation: 0,\r\n                    })\r\n                    break;\r\n                case 'moveTo':\r\n                    if (value) {\r\n                        const { xAxis, yAxis } = value\r\n                        View.animate({\r\n                            center: [xAxis, yAxis],\r\n                            zoom: 17,\r\n                            duration: 100,\r\n                        });\r\n                    } else {\r\n                        navigator.geolocation.getCurrentPosition(function (pos) {\r\n                            View.animate({\r\n                                center: [pos.coords.longitude, pos.coords.latitude],\r\n                                zoom: 17,\r\n                                duration: 100,\r\n                            });\r\n                            addPoint(pos.coords.longitude, pos.coords.latitude)\r\n                        })\r\n                    }\r\n                    break;\r\n                case 'fullScreen':\r\n                    let target = document.getElementById(`map${state.targetNum}`)\r\n                    if (target.requestFullscreen) {\r\n                        target.requestFullscreen()\r\n                    } else if (target.msRequestFullscreen) {\r\n                        target.msRequestFullscreen()\r\n                    } else if (target.mozRequestFullScreen) {\r\n                        target.mozRequestFullScreen()\r\n                    } else if (target.webkitRequestFullscreen) {\r\n                        target.webkitRequestFullscreen()\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function layerControl({ action, value }) {\r\n            let target = state.targetNum == 1 ? state.map1 : state.map2\r\n            let targetLayers = target?.getLayers()\r\n            switch (action) {\r\n                case 'layerMode':\r\n                    if (value.checked) {\r\n                        // 避免加到有群組的母層\r\n                        if (!(state.layers[value.nodeIndex].group_layers[value.subNodeIndex].single_tiles)) {\r\n                            let layersAry = targetLayers.getArray()\r\n                            layersAry.forEach(element => {\r\n                                if (!(element.get('id'))) { return }\r\n                                if (element.get('id').includes(`node${value.nodeIndex}_subNode${value.subNodeIndex}_nestedSubNode`)) {\r\n                                    target.removeLayer(element)\r\n                                }\r\n                            })\r\n                            onMapLayerStatus('delete', target.getTarget(), value.id)\r\n                        }\r\n                        let nestedSubNodeIndex = value.nestedSubNodeIndex || state.selectValueTemp\r\n                        let targetLayer = getMapLayers.getLayer(state.layers[value.nodeIndex].group_layers[value.subNodeIndex], nestedSubNodeIndex, value.id)\r\n                        target.addLayer(targetLayer)\r\n                        if (targetLayer.get('label')?.includes('雷達回波預測')) {\r\n                            var source = targetLayer.getSource();\r\n                            var iconFeature = source.getFeatures()[0]\r\n                            const extent = state.layers[value.nodeIndex].group_layers[value.subNodeIndex].image_options.image_extent\r\n\r\n                            // TODO: 等待api 確定後切換成api路徑\r\n                            const gifUrl = targetLayer.get('extra').url;\r\n                            const gif = gifler(gifUrl);\r\n\r\n                            const extentWidth = extent[2] - extent[0];\r\n                            const extentHeight = extent[3] - extent[1];\r\n\r\n                            gif.frames(\r\n                                document.createElement('canvas'),\r\n                                function (ctx, frame) {\r\n                                    const scaleX = extentWidth / frame.width;\r\n                                    const scaleY = extentHeight / frame.height;\r\n                                    const baseScale = Math.min(scaleX, scaleY);\r\n\r\n                                    // 獲取當前地圖的解析度\r\n                                    const currentResolution = state.map1.getView().getResolution();\r\n\r\n                                    iconFeature.setStyle(\r\n                                        new Style({\r\n                                            image: new Icon({\r\n                                                img: ctx.canvas,\r\n                                                imgSize: [frame.width, frame.height],\r\n                                                opacity: 0.8,\r\n                                                scale: baseScale / currentResolution\r\n                                            }),\r\n                                        })\r\n                                    );\r\n\r\n                                    ctx.clearRect(0, 0, frame.width, frame.height);\r\n                                    ctx.drawImage(frame.buffer, frame.x, frame.y);\r\n\r\n                                    target.render();\r\n                                },\r\n                                true\r\n                            );\r\n                        }\r\n\r\n                        if (state.layers[value.nodeIndex].group_layers[value.subNodeIndex].layer_type === \"WFS\") {\r\n                            mapClickEvent(target, targetLayer.label)\r\n                            addSelectElement(value)\r\n                        }\r\n                        onMapLayerStatus('add', target.getTarget(), value.id)\r\n                    } else {\r\n                        let layersAry = targetLayers.getArray()\r\n                        function removeLayersById(id) {\r\n                            const toRemoveLayerId = layersAry.filter(element => element?.get('id')?.includes(id));\r\n                            toRemoveLayerId.forEach((node) => {\r\n                                target.removeLayer(node);\r\n                            });\r\n                        }\r\n\r\n                        const idMappings = {\r\n                            'node9_subNode0_nestedSubNode': 'node9_subNode0_nestedSubNode',\r\n                            'node12_subNode1_nestedSubNode': 'node12_subNode1_nestedSubNode',\r\n                        };\r\n                        const idToRemove = idMappings[value.id] || value.id;\r\n                        removeLayersById(idToRemove);\r\n                        if (state.layers[value.nodeIndex].group_layers[value.subNodeIndex].layer_type === \"WFS\") {\r\n                            // FIXME: popup 修改\r\n                            // TODO: 結構優化\r\n                            addSelectElement(value);\r\n                            state.popup.popupId = 0\r\n                            state.popup.popupData = '';\r\n                            if (state.popup.overlay) {\r\n                                target.removeOverlay(state.popup.overlay);\r\n                                state.popup.overlay = null;\r\n                            }\r\n                        }\r\n\r\n                        onMapLayerStatus('delete', target.getTarget(), value.id)\r\n                    }\r\n                    break;\r\n                case 'selectLayerMode':\r\n                    if (state.selectLock) { return }\r\n                    if (value.layerName === 'all') {\r\n                        let layersAry = targetLayers.getArray()\r\n                        let layersToRemove = layersAry.filter(node => !(node.get('id') === undefined))\r\n                        layersToRemove.forEach((node) => {\r\n                            target.removeLayer(node)\r\n                        })\r\n                    } else {\r\n                        let layersAry = targetLayers.getArray()\r\n                        layersAry.forEach(element => {\r\n                            if (element.get('id') == value.id) {\r\n                                target.removeLayer(element)\r\n                            }\r\n                        })\r\n                    }\r\n                    break;\r\n                case 'changeOrder':\r\n                    if (state.selectLock) { return }\r\n                    let { nodeIndex, subNodeIndex, nestedSubNodeIndex } = getMapLayers.getLayerIndex(value.id)\r\n                    let nowTileLayer = getMapLayers.getLayer(state.layers[nodeIndex].group_layers[subNodeIndex], nestedSubNodeIndex, value.id)\r\n                    if (value.movement === 'up') {\r\n                        if (value.key + 1 == targetLayers.getArray().length) { return }\r\n                        let obj = {\r\n                            checked: false,\r\n                            nodeIndex: nodeIndex,\r\n                            subNodeIndex: subNodeIndex,\r\n                            nestedSubNodeIndex: nestedSubNodeIndex,\r\n                            id: value.id\r\n                        }\r\n                        layerControl({ action: 'layerMode', value: obj })\r\n                        targetLayers.insertAt(value.key + 1, nowTileLayer)\r\n                    }\r\n                    if (value.movement === 'down') {\r\n                        if (value.key - 1 == 0) { return }\r\n                        let obj = {\r\n                            checked: false,\r\n                            nodeIndex: nodeIndex,\r\n                            subNodeIndex: subNodeIndex,\r\n                            nestedSubNodeIndex: nestedSubNodeIndex,\r\n                            id: value.id\r\n                        }\r\n                        layerControl({ action: 'layerMode', value: obj })\r\n                        targetLayers.insertAt(value.key - 1, nowTileLayer)\r\n                    }\r\n                    break;\r\n                case 'changeLayerVisible':\r\n                    if (state.selectLock) { return }\r\n                    let visibleStatus = !(targetLayers.getArray()[value.key].getVisible())\r\n                    targetLayers.getArray()[value.key].setVisible(visibleStatus)\r\n                    break;\r\n                case 'baseMap':\r\n                    state.temp[`map${state.targetNum}BaseStatus`] = value.baseId\r\n                    let newTileLayer = new Tile({\r\n                        preload: Infinity,\r\n                        name: value.name,\r\n                        label: value.label,\r\n                        type: value.mapType,\r\n                        baseId: value.baseId,\r\n                        source: new XYZ({\r\n                            url: value.url\r\n                        }),\r\n                        crossOrigin: 'anonymous',\r\n                    })\r\n                    let layersAry = target?.getLayers().getArray()\r\n                    targetLayers.insertAt(0, newTileLayer)\r\n\r\n                    layersAry.forEach(element => {\r\n                        if (element.get('type') == 'base' && element.get('baseId') !== value.baseId) {\r\n                            target.removeLayer(element)\r\n                        }\r\n                        return true\r\n                    })\r\n                    break;\r\n                case 'changeDimensionMap':\r\n                    let ta = state.targetNum == 1 ? 'map1' : 'map2'\r\n                    state.dimensionMap[ta] = value\r\n                    if (value === '3D') {\r\n                        // 先移除82處部落，後面補回\r\n                        let layersArray = targetLayers.getArray()\r\n                        const layerToRemove = layersArray.find(element => element.get('label').includes('近年歷史災害82處部落點位'))\r\n                        if (layerToRemove) {\r\n                            state[`map${state.targetNum}`].removeLayer(layerToRemove);\r\n                        }\r\n                        ol3d = new OLCesium({\r\n                            map: target,\r\n                        })\r\n                        ol3d.setEnabled(true)\r\n                        Cesium.Ion.defaultAccessToken = import.meta.env.VITE_Ol3D_TOKEN\r\n                        let scene = ol3d.getCesiumScene({})\r\n                        scene.terrainProvider = Cesium.createWorldTerrain({})\r\n                        state[`${ta}LayerStatus`].push('3D')\r\n                    } else {\r\n                        ol3d.setEnabled(false)\r\n                        state[`${ta}LayerStatus`] = state[`${ta}LayerStatus`].filter(node => node !== '3D')\r\n                        state[`map${state.targetNum}LayerStatus`].forEach(node => {\r\n                            let { nodeIndex, subNodeIndex, nestedSubNodeIndex } = getMapLayers.getLayerIndex(node)\r\n                            let nowTileLayer = getMapLayers.getLayer(state.layers[nodeIndex].group_layers[subNodeIndex], nestedSubNodeIndex, value.id)\r\n                            if (nowTileLayer.get('label').includes('近年歷史災害82處部落點位')) {\r\n                                layerControl({\r\n                                    action: 'layerMode', value: {\r\n                                        checked: true,\r\n                                        nodeIndex: nodeIndex,\r\n                                        subNodeIndex: subNodeIndex,\r\n                                        nestedSubNodeIndex: nestedSubNodeIndex,\r\n                                        id: node\r\n                                    }\r\n                                })\r\n                            }\r\n                            return node\r\n                        })\r\n                    }\r\n                    break;\r\n                case 'setOpacity':\r\n                    targetLayers.getArray()[value.key].setOpacity(Number(value.value))\r\n                    break;\r\n            }\r\n            getCurrentMapData()\r\n        }\r\n\r\n        function changeMapCount(qty) {\r\n            if (state.mapCount === qty) { return }\r\n            let otherMap = state.targetNum !== 1 ? 'map1' : 'map2'\r\n            state.mapCount = qty\r\n            let otherLayers = state[`${otherMap}LayerStatus`].filter(node => node !== '3D')\r\n            let otherLayersData = otherLayers.map(item => mapLayerList.getLayerIndex(item))\r\n            if (qty === 2) {\r\n                state[otherMap] = new Map({\r\n                    target: otherMap,\r\n                    layers: [\r\n                        baseMapList.getBaseMapData(0),\r\n                        ...otherLayersData.map(node => getMapLayers.getLayer(state.layers[node.nodeIndex].group_layers[node.subNodeIndex], node.nestedSubNodeIndex, node.id))\r\n                    ],\r\n                    view: defaultView,\r\n                    controls: [],\r\n                })\r\n                if (state[`${otherMap}LayerStatus`]?.indexOf('3D') !== -1) {\r\n                    ol3d = new OLCesium({\r\n                        map: state[otherMap],\r\n                    })\r\n                    ol3d.setEnabled(true)\r\n                    Cesium.Ion.defaultAccessToken = import.meta.env.VITE_Ol3D_TOKEN\r\n                    let scene = ol3d.getCesiumScene({})\r\n                    scene.terrainProvider = Cesium.createWorldTerrain({})\r\n                }\r\n            }\r\n            if (qty === 1) {\r\n                state[otherMap] = null\r\n                const element = document.getElementById(otherMap)\r\n                while (element.firstChild) {\r\n                    element.removeChild(element.firstChild)\r\n                }\r\n            }\r\n        }\r\n\r\n        function changeTarget(value) {\r\n            state.targetNum = value\r\n            let delToMap = state.targetNum !== 1 ? 'map1' : 'map2'\r\n            if (state.mapCount === 1) {\r\n                // 目標地圖為空\r\n                if (!state[`map${value}`]) {\r\n                    let otherLayers = state[`map${value}LayerStatus`].filter(node => node !== '3D')\r\n\r\n                    // TODO: 優化，把node0_subNode4_nestedSubNodeundefined移到最後面\r\n                    if (otherLayers.includes('node0_subNode4_nestedSubNodeundefined')) {\r\n                        let a = otherLayers.filter(node => node !== 'node0_subNode4_nestedSubNodeundefined')\r\n                        otherLayers = [...a, 'node0_subNode4_nestedSubNodeundefined']\r\n                    }\r\n\r\n                    let otherLayersData = otherLayers.map(item => mapLayerList.getLayerIndex(item))\r\n                    state[`map${value}`] = new Map({\r\n                        target: `map${value}`,\r\n                        layers: [\r\n                            baseMapList.getBaseMapData(state.temp[`map${state.targetNum}BaseStatus`]),\r\n                            ...otherLayersData.map(node => getMapLayers.getLayer(state.layers[node.nodeIndex].group_layers[node.subNodeIndex], node.nestedSubNodeIndex, node.layeredIndex))\r\n                        ],\r\n                        view: defaultView,\r\n                        controls: [],\r\n                    })\r\n\r\n                    mapClickEvent(state[`map${value}`])\r\n                    if (state[`map${value}LayerStatus`]?.indexOf('3D') !== -1) {\r\n                        ol3d = new OLCesium({\r\n                            map: state[`map${value}`],\r\n                        })\r\n                        ol3d.setEnabled(true)\r\n                    }\r\n\r\n                }\r\n                // 非目標地圖的刪除\r\n                if (state[delToMap]) {\r\n                    state[delToMap] = null\r\n                    const element = document.getElementById(delToMap)\r\n                    while (element.firstChild) {\r\n                        element.removeChild(element.firstChild)\r\n                    }\r\n                }\r\n            }\r\n            nextTick(() => {\r\n                getCurrentMapData()\r\n            })\r\n        }\r\n\r\n        function getCurrentMapData() {\r\n            let target = state.targetNum == 1 ? state.map1 : state.map2\r\n            const layers = target?.getLayers()?.getArray()\r\n            state.currentLayers = layers?.map(layer => {\r\n                return {\r\n                    label: layer.get('label'),\r\n                    id: layer.get('id'),\r\n                    visible: layer.getVisible(),\r\n                }\r\n            })\r\n        }\r\n\r\n        function conditionWrap() {\r\n            state.conditionWrap = !state.conditionWrap\r\n        }\r\n\r\n        function onMapLayerStatus(action, target, id) {\r\n            if (action === 'add') {\r\n                state[`${target}LayerStatus`].push(id)\r\n            } else if (action === 'delete') {\r\n                let a = state[`${target}LayerStatus`].findIndex(node => node === id)\r\n                state[`${target}LayerStatus`].splice(a, 1)\r\n            } else {\r\n                console.log('error')\r\n            }\r\n        }\r\n\r\n        function mapClickEvent(target) {\r\n            let selector = new Select({\r\n                layers: target?.getLayers()?.getArray(),\r\n                condition: click,\r\n            })\r\n            target.addInteraction(selector)\r\n            selector.on('select', (event) => {\r\n                let selectedFeatures = event.selected[0]\r\n                if (selectedFeatures) {\r\n                    state.popup.overlay = new Overlay({\r\n                        element: state.popup.nodeRef,\r\n                        autoPan: true,\r\n                        autoPanAnimation: {\r\n                            duration: 250\r\n                        }\r\n                    })\r\n                    state.popup.overlay.setPosition(event.mapBrowserEvent.coordinate)\r\n                    target.addOverlay(state.popup.overlay)\r\n                    // TODO: 截圖結構修改\r\n                    // TODO: 優化結構，獲取state.popupId.overlay方式修正，考慮整包selectedFeatures放進去\r\n                    let selectIds = selectedFeatures.getId().split('.')\r\n                    state.popup.popupData = selectIds[0]\r\n                    state.popup.coordinate = event.mapBrowserEvent.coordinate\r\n                    if (selectIds[0] === '新竹縣原住民部落範圍') {\r\n                        state.popup.popupId = selectedFeatures.get('編號')\r\n                    }\r\n                    if (selectIds[0] === '近年歷史災害82處部落點位') {\r\n                        state.popup.popupId = selectIds[1]\r\n                    }\r\n                } else {\r\n                    target.removeOverlay(state.popup.overlay)\r\n                    state.popup.overlay = null\r\n                    state.popup = {\r\n                        nodeRef: null,\r\n                        overlay: null,\r\n                        popupId: 0,\r\n                        coordinate: [],\r\n                        popupData: '',\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        function closeMapData() {\r\n            let target = state.targetNum == 1 ? state.map1 : state.map2\r\n            target.removeOverlay(state.popup.overlay)\r\n            state.popup.overlay = null\r\n        }\r\n\r\n        // TODO: 優化 移除id判斷?\r\n        function addSelectElement(value) {\r\n            const { checked, id } = value\r\n            if (!checked) { state.selectLayerOption = {}; return }\r\n            if (id === 'node4_subNode0_nestedSubNodeundefined') {\r\n                $.ajax({\r\n                    url: 'https://api.edtest.site/tribeQuery',\r\n                    method: 'GET',\r\n                    success: (res) => {\r\n                        state.tribeQuery = res\r\n                    },\r\n                    error: (res) => {\r\n                        console.log(res)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        function moveToMap(val) {\r\n            let obj = {\r\n                action: 'moveTo',\r\n                value: {\r\n                    xAxis: val.WGS84.lng,\r\n                    yAxis: val.WGS84.lat\r\n                }\r\n            }\r\n            mapControl(obj)\r\n        }\r\n\r\n        onMounted(async () => {\r\n            let getBaseData = $.ajax({\r\n                url: 'https://api.edtest.site/underLayers',\r\n                method: 'GET',\r\n            }).done(res => {\r\n                return res\r\n            })\r\n\r\n            let getLayerData = $.ajax({\r\n                url: 'https://api.edtest.site/layers',\r\n                method: 'GET',\r\n            }).done(res => {\r\n                return res\r\n            })\r\n\r\n            Promise.all([getBaseData, getLayerData]).then((value) => {\r\n                // TODO: 優化\r\n                let result = value[0].data.map((node, nodeIndex) => {\r\n                    return {\r\n                        mapType: 'base',\r\n                        baseId: nodeIndex,\r\n                        onCurrent: false,\r\n                        ...node\r\n                    }\r\n                })\r\n                baseMapList.setBaseMapData(result)\r\n                state.temp.map1BaseStatus = 0\r\n                state.temp.baseMapList = getBaseMapAll()\r\n\r\n                state.layers = value[1].map((node, index) => {\r\n                    node.group_layers.forEach((sub, subIndex) => {\r\n                        let subNodeIndex = subIndex, nestedSubNodeIndex = undefined\r\n                        sub.id = `node${index}_subNode${subNodeIndex}_nestedSubNode${nestedSubNodeIndex}`\r\n\r\n                        if (!(sub.single_tiles)) {\r\n                            sub.tiles_list.forEach((nestedSub, nestedSubIndex) => {\r\n                                nestedSubNodeIndex = nestedSubIndex\r\n                                nestedSub.id = `node${index}_subNode${subNodeIndex}_nestedSubNode${nestedSubNodeIndex}`\r\n                            })\r\n                        }\r\n                    })\r\n                    return {\r\n                        ...node,\r\n                        value: index,\r\n                    }\r\n                })\r\n\r\n                nextTick(() => {\r\n                    initMap()\r\n                    getCurrentMapData()\r\n                })\r\n            })\r\n            state.comSize.wrapHeight = window.innerHeight\r\n            state.comSize.wrapWidth = window.innerWidth\r\n            window.onresize = (e) => {\r\n                state.comSize.wrapHeight = e.target.innerHeight\r\n                state.comSize.wrapWidth = e.target.innerWidth\r\n            }\r\n        })\r\n\r\n        return {\r\n            state,\r\n            props,\r\n            store,\r\n            mapControl,\r\n            layerControl,\r\n            changeTarget,\r\n            conditionWrap,\r\n            closeMapData,\r\n            moveToMap,\r\n            changeMapCount\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<template>\r\n    <div>\r\n        <!-- TODO: 寬度設定是否調整 -->\r\n        <div class=\"w-100 d-flex justify-content-between flex-sm-row flex-wrap flex-sm-nowrap mapWrap\" id=\"mapWrap\">\r\n            <div id=\"map1\"\r\n            :class=\"{\r\n                'w-100': state.map1?.getTarget() == 'map1',\r\n                'h-100': state.mapCount === 1,\r\n                'h-50': state.mapCount === 2 && (state.comSize.wrapWidth < 600),\r\n                'middleMap': state.mapCount === 2\r\n            }\">\r\n            </div>\r\n            <div class=\"middleLine\" v-if=\"state.mapCount === 2\"></div>\r\n            <div id=\"map2\"\r\n            :class=\"{\r\n                'w-100': state.map2?.getTarget() == 'map2',\r\n                'h-100': state.mapCount === 1,\r\n                'h-50': state.mapCount === 2 && (state.comSize.wrapWidth < 600),\r\n                'middleMap': state.mapCount === 2\r\n            }\">\r\n            </div>\r\n        </div>\r\n        <asideTool class=\"asideTool position-absolute top-50 translate-middle-y\" id=\"asideTool\"\r\n        @onMapControl=\"({ action, value }) => { mapControl({ action, value }) }\" />\r\n\r\n        <div class=\"SearchBar d-none d-sm-block position-absolute\">\r\n            <div class=\"d-flex align-items-center\">\r\n                <img src=\"@/assets/logo.svg\" alt=\"\" class=\"me-5\">\r\n                <mapSourceOption class=\"mapSourceOption d-none d-sm-block\"\r\n                :baseMapList=\"state.temp.baseMapList\"\r\n                :onChangeBaseMaps=\"({ action, value }) => {\r\n                    layerControl({ action, value })\r\n                }\" />\r\n            </div>\r\n            <SearchBar class=\"mt-4\"\r\n            v-bind=\"{\r\n                dimensionMapStatus: state.toSearchDimensionStatus,\r\n                currentLayers: state.currentLayers,\r\n                mapCount: state.mapCount,\r\n                onChangeBaseMaps: ({ action, value }) => {\r\n                    layerControl({ action, value })\r\n                },\r\n                onChangeMapCount: (qty) => {\r\n                    changeMapCount(qty)\r\n                }\r\n            }\"\r\n            @onLayerControl=\"({ action, value }) => { layerControl(action, value) }\"\r\n            @onChangeTarget=\"(value) => { changeTarget(value) }\" @conditionWrap=\"(value) => { conditionWrap(value) }\" />\r\n        </div>\r\n\r\n        <div class=\"conditionCom d-none d-sm-block position-absolute\">\r\n            <div class=\"mb-4\">\r\n                <button class=\"border-0 w-100 rounded-4 bg-steel text-white text-center p-2 fw-bold fs-5\"\r\n                    v-if=\"!state.conditionWrap\" @click=\"state.conditionWrap = true\">\r\n                    圖層選項\r\n                </button>\r\n                <div class=\"mb-4\"\r\n                v-if=\"state.conditionWrap\"\r\n                @onLayerControl=\"({ action, value }) => { layerControl({ action, value }) }\">\r\n                    <Condition\r\n                    v-bind=\"{\r\n                        tribeQuery: state.tribeQuery,\r\n                        mapLayers: state.mapLayers,\r\n                        currentLayers: state.currentLayers,\r\n                        onClose: () => {\r\n                            state.conditionWrap = false\r\n                        },\r\n                        showSelectLayerValue: (val) => {\r\n                            state.selectValueTemp = val\r\n                        },\r\n                        moveToMap: (val) => {\r\n                            moveToMap(val)\r\n                        }\r\n                    }\"\r\n                    @onLayerControl=\"({ action, value }) => { layerControl({ action, value }) }\"\r\n                    />\r\n                </div>\r\n                <OverLayer :text=\"'可選擇要加入的圖層'\" :styles=\"'right: 105%;top: 0;text-align: right;'\" />\r\n            </div>\r\n\r\n            <div>\r\n                <button class=\"border-0 w-100 rounded-4 bg-steel text-white text-center p-2 fw-bold fs-5\"\r\n                    v-if=\"!state.layerSelect\" @click=\"state.layerSelect = true\">\r\n                    已選擇的圖層\r\n                </button>\r\n                <div\r\n                v-if=\"state.layerSelect\">\r\n                    <LayerSelector\r\n                    v-bind=\"{\r\n                        selectLock: state.selectLock,\r\n                        currentLayers: state.currentLayers,\r\n                        onClose: () => {\r\n                            state.layerSelect = false\r\n                        },\r\n                        onLockLayer: () => {\r\n                            state.selectLock = !state.selectLock\r\n                        },\r\n                        onDeleteLayer: ({ action, value }) => {\r\n                            if (value.layerName == 'all') {\r\n                                state.deleteLightbox = true\r\n                            } else {\r\n                                layerControl({ action, value })\r\n                            }\r\n                        },\r\n                        onDeleteLayerAll: () => {\r\n                            state.deleteLightbox = true\r\n                        },\r\n                        onLayerControl: ({ action, value }) => {\r\n                            layerControl({ action, value })\r\n                        },\r\n                    }\" />\r\n                </div>\r\n                <OverLayer :text=\"'顯示已經選擇的圖層'\" :styles=\"'right: 105%;top: 0;text-align: right;'\" />\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"m-Navbar d-flex d-sm-none position-fixed bottom-0 start-0 w-100\">\r\n            <div class=\"position-absolute bottom-100 w-100\" style=\"max-height: 70vh;overflow-y: scroll;\">\r\n                <Condition class=\"w-100\"\r\n                v-if=\"state.conditionWrap\"\r\n                v-bind=\"{\r\n                    mapLayers: state.mapLayers,\r\n                    currentLayers: state.currentLayers,\r\n                    onClose: () => {\r\n                        state.conditionWrap = false\r\n                    },\r\n                    showSelectLayerValue: (val) => {\r\n                        state.selectValueTemp = val\r\n                    }\r\n                }\"\r\n                @onLayerControl=\"({ action, value }) => { layerControl({ action, value }) }\" />\r\n            </div>\r\n            <div v-if=\"state.layerSelect\">\r\n                <LayerSelector class=\"position-absolute bottom-100 w-100\"\r\n                v-bind=\"{\r\n                    selectLock: state.selectLock,\r\n                    currentLayers: state.currentLayers,\r\n                    onClose: () => {\r\n                        state.layerSelect = false\r\n                    },\r\n                    onLockLayer: () => {\r\n                        state.selectLock = !state.selectLock\r\n                    },\r\n                    onDeleteLayer: ({ action, value }) => {\r\n                        if (value.layerName == 'all') {\r\n                            state.deleteLightbox = true\r\n                        } else {\r\n                            layerControl({ action, value })\r\n                        }\r\n                    },\r\n                    onDeleteLayerAll: () => {\r\n                        state.deleteLightbox = true\r\n                    },\r\n                    onChangLayerVisible: (action) => {\r\n                        layerControl(action)\r\n                    },\r\n                    onChangeOrderLayer: ({ action, value }) => {\r\n                        layerControl({ action, value })\r\n                    },\r\n                    onLayerControl: ({ action, value }) => {\r\n                        layerControl({ action, value })\r\n                    },\r\n                }\" />\r\n            </div>\r\n            <mNavbar\r\n            v-bind=\"{\r\n                dimensionMapStatus: state.toSearchDimensionStatus,\r\n                currentLayers: state.currentLayers,\r\n                mapCount: state.mapCount,\r\n                openConditionWrap: () => {\r\n                    state.conditionWrap = !state.conditionWrap\r\n                    state.layerSelect = false\r\n                },\r\n                openLayerSelect: () => {\r\n                    state.layerSelect = !state.layerSelect\r\n                    state.conditionWrap = false\r\n                },\r\n                onLayerControl: ({ action, value }) => {\r\n                    layerControl({ action, value })\r\n                },\r\n                onChangeMapCount: (qty) => {\r\n                    changeMapCount(qty)\r\n                },\r\n                onChangeTarget:(value) => {\r\n                    changeTarget(value)\r\n                }\r\n            }\"\r\n            @conditionWrap=\"(value) => { conditionWrap(value) }\" />\r\n        </div>\r\n\r\n        <div class=\"lightWrap w-100 h-100 d-flex justify-content-center align-items-center\" v-if=\"state.deleteLightbox\">\r\n            <div class=\"p-4 rounded bg-white\" style=\"width: 250px;\">\r\n                <p class=\"text-center fw-bold\">是否要取消全部圖層</p>\r\n                <div class=\" d-flex justify-content-around\">\r\n                    <button class=\"rounded px-3 py-1 bg-steel text-white border-0\" @click=\"() => {\r\n                        layerControl({\r\n                            action: 'selectLayerMode',\r\n                            value: {\r\n                                layerName: 'all'\r\n                            }\r\n                        })\r\n                        state.deleteLightbox = false\r\n                    }\">確定</button>\r\n                    <button class=\"rounded px-3 py-1 bg-secondary bg-gradient text-white border-0\" @click=\"() => {\r\n                        state.deleteLightbox = false\r\n                    }\">取消</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div id=\"popup\" class=\"position-absolute bottom-0\"\r\n        :ref=\"(e) => {\r\n            state.popup.nodeRef = e\r\n        }\">\r\n            <areaData class=\"areaData\"\r\n            v-if=\"state.popup.popupId !== 0\"\r\n            :closeMapData=\"() => {\r\n                closeMapData()\r\n            }\"\r\n            :popup=\"state.popup\"\r\n            :maxHeight=\"500\" />\r\n        </div>\r\n\r\n        <div class=\"stepOverLayer position-absolute top-0 start-0 w-100 h-100 bg-black opacity-50\" id=\"firstEnter\"\r\n        v-if=\"store.state.isInit\"\r\n        @click=\"()=>{\r\n            store.dispatch('updateLayerStatus', false)\r\n        }\"></div>\r\n    </div>\r\n</template>\r\n\r\n<style lang=\"sass\">\r\n@import '@/assets/styles/all.module.scss'\r\n.mapWrap\r\n    height: 100vh\r\n.mapWrap .ol-viewport\r\n    height: 100vh\r\n    width: 100vw\r\n.asideTool\r\n    z-index: 220\r\n    left: 20px\r\n.SearchBar\r\n    top: 20px\r\n    left: 20px\r\n    z-index: 220\r\n.conditionCom\r\n    width: 480px\r\n    right: 1%\r\n    bottom: 5%\r\n.middleLine\r\n    width: 5px\r\n    background: $blue-steel\r\n.areaData\r\n    width: 450px\r\n    max-height: 550px\r\n    background: #fff\r\n    box-sizing: border-box\r\n    border-radius: 10px\r\n    border: 1px solid #088\r\n.middleMap\r\n    position: relative\r\n    &::after\r\n        content: ''\r\n        position: absolute\r\n        display: block\r\n        border: 2px solid #000\r\n        width: 40px\r\n        height: 40px\r\n        top: calc((100% - 40px)/2)\r\n        left: calc((100% - 40px)/2)\r\n@media (max-width: 600px)\r\n    .m-Navbar\r\n        z-index: 222\r\n    .middleLine\r\n        height: 1px\r\n        width: 100%\r\n    .areaData\r\n        width: 90vw\r\n</style>\r\n"],"names":["_sfc_main","props","emit","store","useStore","state","reactive","node","index","computed","target","initMap","Map","defaultView","ScaleLine","addPoint","targetLng","targetLat","Point","Style","Icon","mapControl","action","value","View","mainMap","xAxis","yAxis","layerControl","targetLayers","element","nestedSubNodeIndex","targetLayer","getMapLayers","source","iconFeature","gifUrl","extentWidth","extent","extentHeight","ctx","frame","scaleX","scaleY","baseScale","currentResolution","mapClickEvent","layersAry","_a","id","nodeIndex","subNodeIndex","obj","visibleStatus","XYZ","newTileLayer","ta","layerToRemove","ol3d","OLCesium","scene","getCurrentMapData","qty","otherMap","otherLayersData","item","mapLayerList","delToMap","otherLayers","baseMapList","layers","layer","onMapLayerStatus","a","click","selector","event","selectedFeatures","Overlay","selectIds","addSelectElement","$","res","val","onMounted","result","getBaseMapAll","sub","subIndex","nestedSubIndex","nestedSub","e","moveToMap","_hoisted_3","_hoisted_4","_imports_0","_hoisted_6","_hoisted_7","_hoisted_9","_hoisted_14","_createElementVNode","_hoisted_15","_hoisted_1","$setup","_openBlock","_createElementBlock","_hoisted_2","_createVNode","_component_SearchBar","_mergeProps","_cache","_component_Condition","_hoisted_10","_createBlock","_component_LayerSelector","_component_mNavbar","_hoisted_12","_hoisted_13"],"mappings":"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"}